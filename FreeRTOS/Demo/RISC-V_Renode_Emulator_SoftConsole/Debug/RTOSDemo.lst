
RTOSDemo.elf:     file format elf64-littleriscv
RTOSDemo.elf
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000080000000

Program Header:
    LOAD off    0x0000000000001000 vaddr 0x0000000080000000 paddr 0x0000000080000000 align 2**12
         filesz 0x0000000000004ca0 memsz 0x0000000006c7cfe0 flags rwx

Sections:
Idx Name              Size      VMA               LMA               File off  Algn  Flags
  0 .text             00004b80  0000000080000000  0000000080000000  00001000  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata            00000020  0000000080004b80  0000000080004b80  00005b80  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data             00000100  0000000080004ba0  0000000080004ba0  00005ba0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss             000000d0  0000000080004ca0  0000000080004ca0  00005ca0  2**4  ALLOC
  4 .bss              00100270  0000000080004d70  0000000080004d70  00005ca0  2**4  ALLOC
  5 .heap             061ae000  0000000080104fe0  0000000080104fe0  00005ca0  2**4  ALLOC
  6 .stack            009ca000  00000000862b2fe0  00000000862b2fe0  00005ca0  2**4  ALLOC
  7 .debug_info       00005a3c  0000000000000000  0000000000000000  00005ca0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     00001367  0000000000000000  0000000000000000  0000b6dc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges    00000ec0  0000000000000000  0000000000000000  0000ca50  2**4  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     00000d80  0000000000000000  0000000000000000  0000d910  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro      000017b2  0000000000000000  0000000000000000  0000e690  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line       0000a7ba  0000000000000000  0000000000000000  0000fe42  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str        000118ac  0000000000000000  0000000000000000  0001a5fc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment          00000012  0000000000000000  0000000000000000  0002bea8  2**0  CONTENTS, READONLY
 15 .riscv.attributes 00000026  0000000000000000  0000000000000000  0002beba  2**0  CONTENTS, READONLY
 16 .debug_frame      00002658  0000000000000000  0000000000000000  0002bee0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc        000000aa  0000000000000000  0000000000000000  0002e538  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000080000000 l    d  .text	0000000000000000 .text
0000000080004b80 l    d  .sdata	0000000000000000 .sdata
0000000080004ba0 l    d  .data	0000000000000000 .data
0000000080004ca0 l    d  .sbss	0000000000000000 .sbss
0000000080004d70 l    d  .bss	0000000000000000 .bss
0000000080104fe0 l    d  .heap	0000000000000000 .heap
00000000862b2fe0 l    d  .stack	0000000000000000 .stack
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_ranges	0000000000000000 .debug_ranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    d  .debug_loc	0000000000000000 .debug_loc
0000000000000000 l    df *ABS*	0000000000000000 ./Microsemi_Code/riscv_hal/entry.o
000000008000000c l       .text	0000000000000000 handle_reset
0000000080000004 l       .text	0000000000000000 nmi_vector
0000000080000008 l       .text	0000000000000000 trap_vector
0000000000000000 l    df *ABS*	0000000000000000 main_full.c
00000000800000e0 l     F .text	000000000000002c prvRegTestTaskEntry1
000000008000010c l     F .text	000000000000002c prvRegTestTaskEntry2
0000000000000000 l    df *ABS*	0000000000000000 init.c
00000000800001c0 l     F .text	0000000000000064 copy_section
0000000080000224 l     F .text	0000000000000054 zero_section
0000000000000000 l    df *ABS*	0000000000000000 riscv_hal.c
0000000080000330 l     F .text	00000000000000ec PLIC_DisableIRQ
000000008000041c l     F .text	000000000000004c PLIC_ClaimIRQ
0000000080000468 l     F .text	0000000000000054 PLIC_CompleteIRQ
0000000000000000 l    df *ABS*	0000000000000000 riscv_hal_stubs.c
0000000000000000 l    df *ABS*	0000000000000000 uart.c
0000000000000000 l    df *ABS*	0000000000000000 heap_4.c
0000000080004d70 l     O .bss	0000000000100000 ucHeap
0000000080104d70 l     O .bss	0000000000000010 xStart
0000000080004ca8 l     O .sbss	0000000000000008 pxEnd
0000000080004cb0 l     O .sbss	0000000000000008 xFreeBytesRemaining
0000000080004cb8 l     O .sbss	0000000000000008 xMinimumEverFreeBytesRemaining
0000000080004cc0 l     O .sbss	0000000000000008 xBlockAllocatedBit
0000000080000d04 l     F .text	0000000000000140 prvHeapInit
0000000080000e44 l     F .text	000000000000013c prvInsertBlockIntoFreeList
0000000000000000 l    df *ABS*	0000000000000000 port.c
0000000000000000 l    df *ABS*	0000000000000000 ./FreeRTOS_Source/portable/GCC/RISC-V/portASM.o
000000008000118c l       .text	0000000000000000 test_if_asynchronous
00000000800011fc l       .text	0000000000000000 handle_synchronous
0000000080001198 l       .text	0000000000000000 handle_asynchronous
0000000080001198 l       .text	0000000000000000 test_if_mtimer
00000000800011e4 l       .text	0000000000000000 test_if_external_interrupt
000000008000122c l       .text	0000000000000000 processed_source
0000000080001224 l       .text	0000000000000000 as_yet_unhandled
0000000080001204 l       .text	0000000000000000 test_if_environment_call
000000008000121c l       .text	0000000000000000 is_exception
000000008000142c l       .text	0000000000000000 chip_specific_stack_frame
0000000000000000 l    df *ABS*	0000000000000000 list.c
0000000000000000 l    df *ABS*	0000000000000000 queue.c
0000000080001910 l     F .text	0000000000000084 prvInitialiseNewQueue
0000000080001fa8 l     F .text	000000000000018c prvCopyDataToQueue
000000008000232c l     F .text	0000000000000058 prvIsQueueFull
00000000800021cc l     F .text	0000000000000110 prvUnlockQueue
0000000080002134 l     F .text	0000000000000098 prvCopyDataFromQueue
00000000800022dc l     F .text	0000000000000050 prvIsQueueEmpty
0000000000000000 l    df *ABS*	0000000000000000 tasks.c
0000000080104e00 l     O .bss	00000000000000c8 pxReadyTasksLists
0000000080104ec8 l     O .bss	0000000000000028 xDelayedTaskList1
0000000080104ef0 l     O .bss	0000000000000028 xDelayedTaskList2
0000000080004cd8 l     O .sbss	0000000000000008 pxDelayedTaskList
0000000080004ce0 l     O .sbss	0000000000000008 pxOverflowDelayedTaskList
0000000080104f18 l     O .bss	0000000000000028 xPendingReadyList
0000000080104f40 l     O .bss	0000000000000028 xTasksWaitingTermination
0000000080004ce8 l     O .sbss	0000000000000008 uxDeletedTasksWaitingCleanUp
0000000080104f68 l     O .bss	0000000000000028 xSuspendedTaskList
0000000080004cf0 l     O .sbss	0000000000000008 uxCurrentNumberOfTasks
0000000080004cf8 l     O .sbss	0000000000000008 xTickCount
0000000080004d00 l     O .sbss	0000000000000008 uxTopReadyPriority
0000000080004d08 l     O .sbss	0000000000000008 xSchedulerRunning
0000000080004d10 l     O .sbss	0000000000000008 uxPendedTicks
0000000080004d18 l     O .sbss	0000000000000008 xYieldPending
0000000080004d20 l     O .sbss	0000000000000008 xNumOfOverflows
0000000080004d28 l     O .sbss	0000000000000008 uxTaskNumber
0000000080004d30 l     O .sbss	0000000000000008 xNextTaskUnblockTime
0000000080004d38 l     O .sbss	0000000000000008 xIdleTaskHandle
0000000080004d40 l     O .sbss	0000000000000008 uxSchedulerSuspended
00000000800025b8 l     F .text	00000000000001fc prvInitialiseNewTask
00000000800027b4 l     F .text	0000000000000144 prvAddNewTaskToReadyList
0000000080003400 l     F .text	00000000000000c8 prvInitialiseTaskLists
000000008000355c l     F .text	0000000000000040 prvDeleteTCB
000000008000359c l     F .text	0000000000000060 prvResetNextTaskUnblockTime
00000000800038a8 l     F .text	0000000000000154 prvAddCurrentTaskToDelayedList
00000000800033e0 l     F .text	0000000000000020 prvIdleTask
00000000800034c8 l     F .text	0000000000000094 prvCheckTasksWaitingTermination
0000000000000000 l    df *ABS*	0000000000000000 timers.c
0000000080104f90 l     O .bss	0000000000000028 xActiveTimerList1
0000000080104fb8 l     O .bss	0000000000000028 xActiveTimerList2
0000000080004d48 l     O .sbss	0000000000000008 pxCurrentTimerList
0000000080004d50 l     O .sbss	0000000000000008 pxOverflowTimerList
0000000080004d58 l     O .sbss	0000000000000008 xTimerQueue
0000000080004d60 l     O .sbss	0000000000000008 xTimerTaskHandle
0000000080004300 l     F .text	00000000000000b0 prvCheckForValidListAndQueue
0000000080003c68 l     F .text	000000000000003c prvTimerTask
0000000080003b7c l     F .text	00000000000000ec prvProcessExpiredTimer
0000000080003e54 l     F .text	00000000000000e4 prvInsertTimerInActiveList
0000000080003d78 l     F .text	0000000000000070 prvGetNextExpireTime
0000000080003ca4 l     F .text	00000000000000d4 prvProcessTimerOrBlockTask
0000000080003f38 l     F .text	0000000000000280 prvProcessReceivedCommands
0000000080003de8 l     F .text	000000000000006c prvSampleTimeNow
0000000080004d68 l     O .sbss	0000000000000008 xLastTime.0
00000000800041b8 l     F .text	0000000000000148 prvSwitchTimerLists
0000000000000000 l    df *ABS*	0000000000000000 main.c
0000000080004404 l     F .text	0000000000000030 prvSetupHardware
0000000000000000 l    df *ABS*	0000000000000000 libgcc2.c
0000000000000000 l    df *ABS*	0000000000000000 memcpy.c
0000000000000000 l    df *ABS*	0000000000000000 libgcc2.c
00000000009ca000 g       *ABS*	0000000000000000 STACK_SIZE
000000008000069c  w    F .text	0000000000000020 External_11_IRQHandler
0000000080005380 g       .sdata	0000000000000000 __global_pointer$
0000000080002424 g     F .text	00000000000000b4 vQueueWaitForMessageRestricted
0000000080004ba0 g       *ABS*	0000000000000000 __data_load
00000000800005dc  w    F .text	0000000000000020 External_5_IRQHandler
0000000080004b98 g     O .sdata	0000000000000008 pullNextTime
0000000080003800 g     F .text	0000000000000048 vTaskEnterCritical
0000000080001c04 g     F .text	0000000000000174 xQueueGenericSendFromISR
0000000080004ca0 g     O .sbss	0000000000000004 ulTimer0Interrupts
0000000080004cd0 g     O .sbss	0000000000000008 pxCurrentTCB
0000000080000954 g     F .text	0000000000000074 Tx_uart
0000000080004ca0 g       .sbss	0000000000000000 __sbss_start
00000000800007bc  w    F .text	0000000000000020 External_20_IRQHandler
0000000080003240 g     F .text	0000000000000040 vTaskInternalSetTimeOutState
000000008000101c g     F .text	000000000000008c xPortStartScheduler
00000000800044f4 g     F .text	000000000000011c memcpy
0000000080003034 g     F .text	0000000000000064 vTaskPlaceOnEventList
0000000080000f80  w    F .text	000000000000009c vPortSetupTimerInterrupt
0000000080004b80 g       .sdata	0000000000000000 __sdata_start
0000000080000c04 g     F .text	0000000000000100 vPortFree
0000000086c7cfe0 g       .stack	0000000000000000 __freertos_irq_stack_top
000000008000087c  w    F .text	0000000000000020 External_26_IRQHandler
0000000080001538 g     F .text	0000000000000088 vListInsertEnd
0000000040000000 g       *ABS*	0000000000000000 RAM_SIZE
000000008000067c  w    F .text	0000000000000020 External_10_IRQHandler
0000000080001510 g     F .text	0000000000000028 vListInitialiseItem
0000000080001d78 g     F .text	0000000000000230 xQueueReceive
0000000080104d80 g     O .bss	0000000000000080 xQueueRegistry
0000000080000138 g     F .text	000000000000004c External_30_IRQHandler
000000008000075c  w    F .text	0000000000000020 External_17_IRQHandler
00000000862b2fe0 g       .heap	0000000000000000 _heap_end
0000000080104fe0 g       .bss	0000000000000000 __bss_end
00000000800009c8 g     F .text	000000000000023c pvPortMalloc
0000000080000040 g     F .text	00000000000000a0 main_full
0000000080000278 g     F .text	000000000000009c _init
00000000800014ac g     F .text	0000000000000064 vListInitialise
0000000080002c00 g     F .text	000000000000002c xTaskGetTickCount
0000000080001994 g     F .text	0000000000000270 xQueueGenericSend
0000000080003650 g     F .text	00000000000001b0 xTaskPriorityDisinherit
0000000080004d70 g       .sbss	0000000000000000 __sbss_end
0000000080001100 g       .text	0000000000000000 freertos_risc_v_trap_handler
0000000080003110 g     F .text	0000000000000130 xTaskRemoveFromEventList
0000000080004464 g     F .text	0000000000000018 vApplicationMallocFailedHook
000000008000085c  w    F .text	0000000000000020 External_25_IRQHandler
0000000086c7cfe0 g       .stack	0000000000000000 __stack_top
00000000800008dc  w    F .text	0000000000000020 External_29_IRQHandler
0000000080004b80 g     O .sdata	0000000000000008 xISRStackTop
00000000800006dc  w    F .text	0000000000000020 External_13_IRQHandler
000000008000057c  w    F .text	0000000000000020 External_2_IRQHandler
00000000061ae000 g       *ABS*	0000000000000000 HEAP_SIZE
00000000800006bc  w    F .text	0000000000000020 External_12_IRQHandler
0000000080003280 g     F .text	0000000000000138 xTaskCheckForTimeOut
0000000086c7cfe0 g       .stack	0000000000000000 _sp
0000000080000000 g       .text	0000000000000000 _start
0000000080002a18 g     F .text	0000000000000030 vTaskSuspendAll
0000000080001694 g     F .text	0000000000000098 uxListRemove
0000000080004b80 g       *ABS*	0000000000000000 __sdata_load
0000000080004ca0 g       .data	0000000000000000 __data_end
0000000080002e6c g     F .text	00000000000001c8 vTaskSwitchContext
000000008000077c  w    F .text	0000000000000020 External_18_IRQHandler
0000000080003098 g     F .text	0000000000000078 vTaskPlaceOnEventListRestricted
0000000080003a74 g     F .text	0000000000000108 xTimerGenericCommand
0000000080004498 g     F .text	0000000000000020 vApplicationStackOverflowHook
00000000800007fc  w    F .text	0000000000000020 External_22_IRQHandler
000000008000071c  w    F .text	0000000000000020 External_15_IRQHandler
0000000080000000 g       *ABS*	0000000000000000 RAM_START_ADDRESS
0000000080004d70 g       .bss	0000000000000000 __bss_start
000000008000073c  w    F .text	0000000000000020 External_16_IRQHandler
0000000080004610 g     F .text	00000000000000dc memset
00000000800043b0 g     F .text	0000000000000054 main
00000000800015c0 g     F .text	00000000000000d4 vListInsert
00000000800008bc  w    F .text	0000000000000020 External_28_IRQHandler
00000000800039fc g     F .text	0000000000000078 xTimerCreateTimerTask
0000000080001858 g     F .text	00000000000000b8 xQueueGenericCreate
0000000080004ba0 g       .sdata	0000000000000000 __sdata_end
00000000862b2fe0 g       .heap	0000000000000000 __heap_end
00000000800006fc  w    F .text	0000000000000020 External_14_IRQHandler
0000000080000314 g     F .text	000000000000001c _fini
0000000080002a48 g     F .text	00000000000001b8 xTaskResumeAll
00000000800008fc g     F .text	0000000000000058 Transmit_uart
0000000080004a78 g     O .text	0000000000000100 .hidden __clz_tab
0000000080002968 g     F .text	00000000000000b0 vTaskStartScheduler
0000000080004ba0 g     O .data	0000000000000100 ext_irq_handler_table
0000000080004434 g     F .text	0000000000000030 vSendString
0000000080001300 g       .text	0000000000000000 xPortStartFirstTask
00000000862b2fe0 g       .stack	0000000000000000 __stack_bottom
000000008000089c  w    F .text	0000000000000020 External_27_IRQHandler
000000008000063c  w    F .text	0000000000000020 External_8_IRQHandler
000000008000065c  w    F .text	0000000000000020 External_9_IRQHandler
00000000800033b8 g     F .text	0000000000000028 vTaskMissedYield
0000000080104fe0 g       .heap	0000000000000000 __heap_start
000000008000053c  w    F .text	0000000000000020 Invalid_IRQHandler
000000008000059c  w    F .text	0000000000000020 External_3_IRQHandler
0000000080002384 g     F .text	00000000000000a0 vQueueAddToRegistry
0000000080002c2c g     F .text	0000000000000240 xTaskIncrementTick
0000000080004b90 g     O .sdata	0000000000000008 pullMachineTimerCompareRegister
000000008000172c g     F .text	000000000000012c xQueueGenericReset
000000008000079c  w    F .text	0000000000000020 External_19_IRQHandler
0000000080104fe0 g       .bss	0000000000000000 _end
0000000080004ca4 g     O .sbss	0000000000000004 ulTimer1Interrupts
00000000800024d8 g     F .text	00000000000000e0 xTaskCreate
0000000080004b88 g     O .sdata	0000000000000008 uxTimerIncrementsForOneTick
00000000800028f8 g     F .text	0000000000000070 vTaskDelay
00000000800035fc g     F .text	0000000000000054 xTaskGetSchedulerState
0000000080003848 g     F .text	0000000000000060 vTaskExitCritical
0000000080001400 g       .text	0000000000000000 pxPortInitialiseStack
000000008000055c  w    F .text	0000000000000020 External_1_IRQHandler
00000000800005fc  w    F .text	0000000000000020 External_6_IRQHandler
0000000080000184 g     F .text	000000000000003c External_31_IRQHandler
0000000080004ba0 g       .data	0000000000000000 __data_start
0000000080004cc8 g     O .sbss	0000000000000008 ullNextTime
00000000800044b8 g     F .text	000000000000003c .hidden __clzdi2
00000000800007dc  w    F .text	0000000000000020 External_21_IRQHandler
00000000800004bc g     F .text	0000000000000080 handle_m_ext_interrupt
000000008000081c  w    F .text	0000000000000020 External_23_IRQHandler
000000008000083c  w    F .text	0000000000000020 External_24_IRQHandler
00000000800005bc  w    F .text	0000000000000020 External_4_IRQHandler
000000008000061c  w    F .text	0000000000000020 External_7_IRQHandler
000000008000447c g     F .text	000000000000001c vApplicationIdleHook



Disassembly of section .text:

0000000080000000 <_start>:
_start():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:31
  .section      .text.entry
  .extern freertos_risc_v_trap_handler
  .globl _start

_start:
  j handle_reset
    80000000:	00c0006f          	j	8000000c <handle_reset>

0000000080000004 <nmi_vector>:
nmi_vector():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:34

nmi_vector:
  j nmi_vector
    80000004:	0000006f          	j	80000004 <nmi_vector>

0000000080000008 <trap_vector>:
trap_vector():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:37

trap_vector:
  j freertos_risc_v_trap_handler
    80000008:	0f80106f          	j	80001100 <freertos_risc_v_trap_handler>

000000008000000c <handle_reset>:
handle_reset():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:40

handle_reset:
  mv ra,x0
    8000000c:	00000093          	li	ra,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:41
  mv s0,x0
    80000010:	00000413          	li	s0,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:42
  mv s1,x0
    80000014:	00000493          	li	s1,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:43
  la t0, freertos_risc_v_trap_handler
    80000018:	00001297          	auipc	t0,0x1
    8000001c:	0e828293          	addi	t0,t0,232 # 80001100 <freertos_risc_v_trap_handler>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:44
  csrw mtvec, t0
    80000020:	30529073          	csrw	mtvec,t0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:45
  csrwi mstatus, 0
    80000024:	30005073          	csrwi	mstatus,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:46
  csrwi mie, 0
    80000028:	30405073          	csrwi	mie,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:68

# Ensure the instruction is not optimized, since gp is not yet set

.option norelax
  # initialize global pointer
  la gp, __global_pointer$
    8000002c:	00005197          	auipc	gp,0x5
    80000030:	35418193          	addi	gp,gp,852 # 80005380 <__global_pointer$>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:73

.option pop

  # initialize stack pointer
  la sp, __stack_top
    80000034:	06c7d117          	auipc	sp,0x6c7d
    80000038:	fac10113          	addi	sp,sp,-84 # 86c7cfe0 <__freertos_irq_stack_top>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/entry.S:76

  # perform the rest of initialization in C
  j _init
    8000003c:	23c0006f          	j	80000278 <_init>

0000000080000040 <main_full>:
main_full():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:171
volatile uint32_t ulRegTest1LoopCounter = 0UL, ulRegTest2LoopCounter = 0UL;

/*-----------------------------------------------------------*/

void main_full( void )
{
    80000040:	ff010113          	addi	sp,sp,-16
    80000044:	00113423          	sd	ra,8(sp)
    80000048:	00813023          	sd	s0,0(sp)
    8000004c:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:193
	*/
	/* Create the register check tasks, as described at the top of this	file.
	Use xTaskCreateStatic() to create a task using only statically allocated
	memory. */

	if (xTaskCreate( prvRegTestTaskEntry1, 			/* The function that implements the task. */
    80000050:	00000793          	li	a5,0
    80000054:	00200713          	li	a4,2
    80000058:	00000693          	li	a3,0
    8000005c:	3e800613          	li	a2,1000
    80000060:	00004597          	auipc	a1,0x4
    80000064:	69058593          	addi	a1,a1,1680 # 800046f0 <memset+0xe0>
    80000068:	00000517          	auipc	a0,0x0
    8000006c:	07850513          	addi	a0,a0,120 # 800000e0 <prvRegTestTaskEntry1>
    80000070:	468020ef          	jal	ra,800024d8 <xTaskCreate>
    80000074:	00050793          	mv	a5,a0
    80000078:	00078863          	beqz	a5,80000088 <main_full+0x48>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:199
				 "Reg1", 						/* The name of the task. */
				 1000, /* Size of stack to allocate for the task - in words not bytes!. */
				 NULL, /* Parameter passed into the task. */
				 2, 				/* Priority of the task. */
				 NULL )){						/* Can be used to pass out a handle to the created task. */
		Transmit_uart("[  5] Task 1 ok ! \n\r");
    8000007c:	00004517          	auipc	a0,0x4
    80000080:	67c50513          	addi	a0,a0,1660 # 800046f8 <memset+0xe8>
    80000084:	079000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:201
	}
	if (xTaskCreate( prvRegTestTaskEntry2, "Reg2", 1000, NULL, 1, NULL )){
    80000088:	00000793          	li	a5,0
    8000008c:	00100713          	li	a4,1
    80000090:	00000693          	li	a3,0
    80000094:	3e800613          	li	a2,1000
    80000098:	00004597          	auipc	a1,0x4
    8000009c:	67858593          	addi	a1,a1,1656 # 80004710 <memset+0x100>
    800000a0:	00000517          	auipc	a0,0x0
    800000a4:	06c50513          	addi	a0,a0,108 # 8000010c <prvRegTestTaskEntry2>
    800000a8:	430020ef          	jal	ra,800024d8 <xTaskCreate>
    800000ac:	00050793          	mv	a5,a0
    800000b0:	00078863          	beqz	a5,800000c0 <main_full+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:202
		Transmit_uart("[  6] Task 2 ok ! \n\r");
    800000b4:	00004517          	auipc	a0,0x4
    800000b8:	66450513          	addi	a0,a0,1636 # 80004718 <memset+0x108>
    800000bc:	041000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:216
	//vCreateSuicidalTasks( mainCREATOR_TASK_PRIORITY );

	/* Start the timers that are used to exercise external interrupt handling. */
	//prvSetupPeripheralTimers();

	Transmit_uart("[  7] Demo Setted ! \n\r");
    800000c0:	00004517          	auipc	a0,0x4
    800000c4:	67050513          	addi	a0,a0,1648 # 80004730 <memset+0x120>
    800000c8:	035000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:218
	/* Start the scheduler. */
	vTaskStartScheduler();
    800000cc:	09d020ef          	jal	ra,80002968 <vTaskStartScheduler>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:219
	Transmit_uart("[  8] Demo Started ! \n\r");
    800000d0:	00004517          	auipc	a0,0x4
    800000d4:	67850513          	addi	a0,a0,1656 # 80004748 <memset+0x138>
    800000d8:	025000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:226 (discriminator 1)
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the Idle and/or
	timer tasks to be created.  See the memory management section on the
	FreeRTOS web site for more details on the FreeRTOS heap
	http://www.freertos.org/a00111.html. */
	for( ;; );
    800000dc:	0000006f          	j	800000dc <main_full+0x9c>

00000000800000e0 <prvRegTestTaskEntry1>:
prvRegTestTaskEntry1():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:371
	}
}
/*-----------------------------------------------------------*/

static void prvRegTestTaskEntry1( void *pvParameters )
{
    800000e0:	fe010113          	addi	sp,sp,-32
    800000e4:	00113c23          	sd	ra,24(sp)
    800000e8:	00813823          	sd	s0,16(sp)
    800000ec:	02010413          	addi	s0,sp,32
    800000f0:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:376 (discriminator 1)
	/* Although the regtest task is written in assembler, its entry point is
	written in C for convenience of checking the task parameter is being passed
	in correctly. */
	while(1){
		Transmit_uart("Task 1 !\n\r");
    800000f4:	00005517          	auipc	a0,0x5
    800000f8:	8b450513          	addi	a0,a0,-1868 # 800049a8 <memset+0x398>
    800000fc:	001000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:377 (discriminator 1)
		vTaskDelay(1);
    80000100:	00100513          	li	a0,1
    80000104:	7f4020ef          	jal	ra,800028f8 <vTaskDelay>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:375 (discriminator 1)
	while(1){
    80000108:	fedff06f          	j	800000f4 <prvRegTestTaskEntry1+0x14>

000000008000010c <prvRegTestTaskEntry2>:
prvRegTestTaskEntry2():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:394
	vTaskDelete( NULL );
}
/*-----------------------------------------------------------*/

static void prvRegTestTaskEntry2( void *pvParameters )
{
    8000010c:	fe010113          	addi	sp,sp,-32
    80000110:	00113c23          	sd	ra,24(sp)
    80000114:	00813823          	sd	s0,16(sp)
    80000118:	02010413          	addi	s0,sp,32
    8000011c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:399 (discriminator 1)
	/* Although the regtest task is written in assembler, its entry point is
	written in C for convenience of checking the task parameter is being passed
	in correctly. */
	while(1){
		Transmit_uart("Task 2 !\n\r");
    80000120:	00005517          	auipc	a0,0x5
    80000124:	89850513          	addi	a0,a0,-1896 # 800049b8 <memset+0x3a8>
    80000128:	7d4000ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:400 (discriminator 1)
		vTaskDelay(1);
    8000012c:	00100513          	li	a0,1
    80000130:	7c8020ef          	jal	ra,800028f8 <vTaskDelay>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:398 (discriminator 1)
	while(1){
    80000134:	fedff06f          	j	80000120 <prvRegTestTaskEntry2+0x14>

0000000080000138 <External_30_IRQHandler>:
External_30_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:480
}
/*-----------------------------------------------------------*/

/*Core Timer 0 Interrupt Handler*/
uint8_t External_30_IRQHandler( void )
{
    80000138:	ff010113          	addi	sp,sp,-16
    8000013c:	00113423          	sd	ra,8(sp)
    80000140:	00813023          	sd	s0,0(sp)
    80000144:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:481
	ulTimer0Interrupts++;vTaskDelay(1);
    80000148:	92018793          	addi	a5,gp,-1760 # 80004ca0 <ulTimer0Interrupts>
    8000014c:	0007a783          	lw	a5,0(a5)
    80000150:	0007879b          	sext.w	a5,a5
    80000154:	0017879b          	addiw	a5,a5,1
    80000158:	0007871b          	sext.w	a4,a5
    8000015c:	92018793          	addi	a5,gp,-1760 # 80004ca0 <ulTimer0Interrupts>
    80000160:	00e7a023          	sw	a4,0(a5)
    80000164:	00100513          	li	a0,1
    80000168:	790020ef          	jal	ra,800028f8 <vTaskDelay>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:483
    //TMR_clear_int(&g_timer0);
    return( EXT_IRQ_KEEP_ENABLED );
    8000016c:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:484
}
    80000170:	00078513          	mv	a0,a5
    80000174:	00813083          	ld	ra,8(sp)
    80000178:	00013403          	ld	s0,0(sp)
    8000017c:	01010113          	addi	sp,sp,16
    80000180:	00008067          	ret

0000000080000184 <External_31_IRQHandler>:
External_31_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:489
/*-----------------------------------------------------------*/

/*Core Timer 1 Interrupt Handler*/
uint8_t External_31_IRQHandler( void )
{
    80000184:	ff010113          	addi	sp,sp,-16
    80000188:	00813423          	sd	s0,8(sp)
    8000018c:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:490
	ulTimer1Interrupts++;
    80000190:	92418793          	addi	a5,gp,-1756 # 80004ca4 <ulTimer1Interrupts>
    80000194:	0007a783          	lw	a5,0(a5)
    80000198:	0007879b          	sext.w	a5,a5
    8000019c:	0017879b          	addiw	a5,a5,1
    800001a0:	0007871b          	sext.w	a4,a5
    800001a4:	92418793          	addi	a5,gp,-1756 # 80004ca4 <ulTimer1Interrupts>
    800001a8:	00e7a023          	sw	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:493
   // TMR_clear_int(&g_timer1);

    return( EXT_IRQ_KEEP_ENABLED );
    800001ac:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../full_demo/main_full.c:494
}
    800001b0:	00078513          	mv	a0,a5
    800001b4:	00813403          	ld	s0,8(sp)
    800001b8:	01010113          	addi	sp,sp,16
    800001bc:	00008067          	ret

00000000800001c0 <copy_section>:
copy_section():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
    800001c0:	fd010113          	addi	sp,sp,-48
    800001c4:	02813423          	sd	s0,40(sp)
    800001c8:	03010413          	addi	s0,sp,48
    800001cc:	fea43423          	sd	a0,-24(s0)
    800001d0:	feb43023          	sd	a1,-32(s0)
    800001d4:	fcc43c23          	sd	a2,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
    800001d8:	02c0006f          	j	80000204 <copy_section+0x44>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:40
    {
        *p_vma = *p_load;
    800001dc:	fe843783          	ld	a5,-24(s0)
    800001e0:	0007a703          	lw	a4,0(a5)
    800001e4:	fe043783          	ld	a5,-32(s0)
    800001e8:	00e7a023          	sw	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:41
        ++p_load;
    800001ec:	fe843783          	ld	a5,-24(s0)
    800001f0:	00478793          	addi	a5,a5,4
    800001f4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:42
        ++p_vma;
    800001f8:	fe043783          	ld	a5,-32(s0)
    800001fc:	00478793          	addi	a5,a5,4
    80000200:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
    80000204:	fe043703          	ld	a4,-32(s0)
    80000208:	fd843783          	ld	a5,-40(s0)
    8000020c:	fce7f8e3          	bgeu	a5,a4,800001dc <copy_section+0x1c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:44
    }
}
    80000210:	00000013          	nop
    80000214:	00000013          	nop
    80000218:	02813403          	ld	s0,40(sp)
    8000021c:	03010113          	addi	sp,sp,48
    80000220:	00008067          	ret

0000000080000224 <zero_section>:
zero_section():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
    80000224:	fd010113          	addi	sp,sp,-48
    80000228:	02813423          	sd	s0,40(sp)
    8000022c:	03010413          	addi	s0,sp,48
    80000230:	fca43c23          	sd	a0,-40(s0)
    80000234:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:48
    uint32_t * p_zero = start;
    80000238:	fd843783          	ld	a5,-40(s0)
    8000023c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:50
    
    while(p_zero <= end)
    80000240:	0180006f          	j	80000258 <zero_section+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:52
    {
        *p_zero = 0;
    80000244:	fe843783          	ld	a5,-24(s0)
    80000248:	0007a023          	sw	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:53
        ++p_zero;
    8000024c:	fe843783          	ld	a5,-24(s0)
    80000250:	00478793          	addi	a5,a5,4
    80000254:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:50
    while(p_zero <= end)
    80000258:	fe843703          	ld	a4,-24(s0)
    8000025c:	fd043783          	ld	a5,-48(s0)
    80000260:	fee7f2e3          	bgeu	a5,a4,80000244 <zero_section+0x20>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:55
    }
}
    80000264:	00000013          	nop
    80000268:	00000013          	nop
    8000026c:	02813403          	ld	s0,40(sp)
    80000270:	03010113          	addi	sp,sp,48
    80000274:	00008067          	ret

0000000080000278 <_init>:
_init():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:58

void _init(void)
{
    80000278:	fd010113          	addi	sp,sp,-48
    8000027c:	02113423          	sd	ra,40(sp)
    80000280:	02813023          	sd	s0,32(sp)
    80000284:	03010413          	addi	s0,sp,48
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
    80000288:	00004797          	auipc	a5,0x4
    8000028c:	74078793          	addi	a5,a5,1856 # 800049c8 <memset+0x3b8>
    80000290:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
    80000294:	fe843783          	ld	a5,-24(s0)
    80000298:	fcf43823          	sd	a5,-48(s0)
    8000029c:	fc043c23          	sd	zero,-40(s0)
    800002a0:	fe043023          	sd	zero,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
    800002a4:	82018613          	addi	a2,gp,-2016 # 80004ba0 <ext_irq_handler_table>
    800002a8:	00005597          	auipc	a1,0x5
    800002ac:	8d858593          	addi	a1,a1,-1832 # 80004b80 <xISRStackTop>
    800002b0:	00005517          	auipc	a0,0x5
    800002b4:	8d050513          	addi	a0,a0,-1840 # 80004b80 <xISRStackTop>
    800002b8:	f09ff0ef          	jal	ra,800001c0 <copy_section>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
    800002bc:	92018613          	addi	a2,gp,-1760 # 80004ca0 <ulTimer0Interrupts>
    800002c0:	00005597          	auipc	a1,0x5
    800002c4:	8e058593          	addi	a1,a1,-1824 # 80004ba0 <ext_irq_handler_table>
    800002c8:	00005517          	auipc	a0,0x5
    800002cc:	8d850513          	addi	a0,a0,-1832 # 80004ba0 <ext_irq_handler_table>
    800002d0:	ef1ff0ef          	jal	ra,800001c0 <copy_section>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
    800002d4:	9f018593          	addi	a1,gp,-1552 # 80004d70 <ucHeap>
    800002d8:	92018513          	addi	a0,gp,-1760 # 80004ca0 <ulTimer0Interrupts>
    800002dc:	f49ff0ef          	jal	ra,80000224 <zero_section>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
    800002e0:	00105597          	auipc	a1,0x105
    800002e4:	d0058593          	addi	a1,a1,-768 # 80104fe0 <__bss_end>
    800002e8:	9f018513          	addi	a0,gp,-1552 # 80004d70 <ucHeap>
    800002ec:	f39ff0ef          	jal	ra,80000224 <zero_section>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:68
    
    main(1, argv);
    800002f0:	fd040793          	addi	a5,s0,-48
    800002f4:	00078593          	mv	a1,a5
    800002f8:	00100513          	li	a0,1
    800002fc:	0b4040ef          	jal	ra,800043b0 <main>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:69
}
    80000300:	00000013          	nop
    80000304:	02813083          	ld	ra,40(sp)
    80000308:	02013403          	ld	s0,32(sp)
    8000030c:	03010113          	addi	sp,sp,48
    80000310:	00008067          	ret

0000000080000314 <_fini>:
_fini():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
    80000314:	ff010113          	addi	sp,sp,-16
    80000318:	00813423          	sd	s0,8(sp)
    8000031c:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/init.c:75
}
    80000320:	00000013          	nop
    80000324:	00813403          	ld	s0,8(sp)
    80000328:	01010113          	addi	sp,sp,16
    8000032c:	00008067          	ret

0000000080000330 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
    80000330:	fc010113          	addi	sp,sp,-64
    80000334:	02813c23          	sd	s0,56(sp)
    80000338:	04010413          	addi	s0,sp,64
    8000033c:	00050793          	mv	a5,a0
    80000340:	fcf42623          	sw	a5,-52(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
    80000344:	f14027f3          	csrr	a5,mhartid
    80000348:	fef43423          	sd	a5,-24(s0)
    8000034c:	fe843783          	ld	a5,-24(s0)
    80000350:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
    80000354:	02d00793          	li	a5,45
    80000358:	01a79713          	slli	a4,a5,0x1a
    8000035c:	fcc42783          	lw	a5,-52(s0)
    80000360:	0057d79b          	srliw	a5,a5,0x5
    80000364:	0007879b          	sext.w	a5,a5
    80000368:	02079793          	slli	a5,a5,0x20
    8000036c:	0207d793          	srli	a5,a5,0x20
    80000370:	fe043683          	ld	a3,-32(s0)
    80000374:	00569693          	slli	a3,a3,0x5
    80000378:	00f686b3          	add	a3,a3,a5
    8000037c:	000017b7          	lui	a5,0x1
    80000380:	80078793          	addi	a5,a5,-2048 # 800 <STACK_SIZE-0x9c9800>
    80000384:	00f687b3          	add	a5,a3,a5
    80000388:	00279793          	slli	a5,a5,0x2
    8000038c:	00f707b3          	add	a5,a4,a5
    80000390:	0007a783          	lw	a5,0(a5)
    80000394:	fcf42e23          	sw	a5,-36(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
    80000398:	fcc42783          	lw	a5,-52(s0)
    8000039c:	01f7f793          	andi	a5,a5,31
    800003a0:	0007879b          	sext.w	a5,a5
    800003a4:	00078713          	mv	a4,a5
    800003a8:	00100793          	li	a5,1
    800003ac:	00e797bb          	sllw	a5,a5,a4
    800003b0:	0007879b          	sext.w	a5,a5
    800003b4:	fff7c793          	not	a5,a5
    800003b8:	0007871b          	sext.w	a4,a5
    800003bc:	fdc42783          	lw	a5,-36(s0)
    800003c0:	00e7f7b3          	and	a5,a5,a4
    800003c4:	fcf42e23          	sw	a5,-36(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
    800003c8:	02d00793          	li	a5,45
    800003cc:	01a79713          	slli	a4,a5,0x1a
    800003d0:	fcc42783          	lw	a5,-52(s0)
    800003d4:	0057d79b          	srliw	a5,a5,0x5
    800003d8:	0007879b          	sext.w	a5,a5
    800003dc:	02079793          	slli	a5,a5,0x20
    800003e0:	0207d793          	srli	a5,a5,0x20
    800003e4:	fe043683          	ld	a3,-32(s0)
    800003e8:	00569693          	slli	a3,a3,0x5
    800003ec:	00f686b3          	add	a3,a3,a5
    800003f0:	000017b7          	lui	a5,0x1
    800003f4:	80078793          	addi	a5,a5,-2048 # 800 <STACK_SIZE-0x9c9800>
    800003f8:	00f687b3          	add	a5,a3,a5
    800003fc:	00279793          	slli	a5,a5,0x2
    80000400:	00f707b3          	add	a5,a4,a5
    80000404:	fdc42703          	lw	a4,-36(s0)
    80000408:	00e7a023          	sw	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:181
}
    8000040c:	00000013          	nop
    80000410:	03813403          	ld	s0,56(sp)
    80000414:	04010113          	addi	sp,sp,64
    80000418:	00008067          	ret

000000008000041c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
    8000041c:	fe010113          	addi	sp,sp,-32
    80000420:	00813c23          	sd	s0,24(sp)
    80000424:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
    80000428:	f14027f3          	csrr	a5,mhartid
    8000042c:	fef43423          	sd	a5,-24(s0)
    80000430:	fe843783          	ld	a5,-24(s0)
    80000434:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
    80000438:	02d00793          	li	a5,45
    8000043c:	01a79713          	slli	a4,a5,0x1a
    80000440:	fe043783          	ld	a5,-32(s0)
    80000444:	20078793          	addi	a5,a5,512
    80000448:	00c79793          	slli	a5,a5,0xc
    8000044c:	00f707b3          	add	a5,a4,a5
    80000450:	0047a783          	lw	a5,4(a5)
    80000454:	0007879b          	sext.w	a5,a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:209
}
    80000458:	00078513          	mv	a0,a5
    8000045c:	01813403          	ld	s0,24(sp)
    80000460:	02010113          	addi	sp,sp,32
    80000464:	00008067          	ret

0000000080000468 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
    80000468:	fd010113          	addi	sp,sp,-48
    8000046c:	02813423          	sd	s0,40(sp)
    80000470:	03010413          	addi	s0,sp,48
    80000474:	00050793          	mv	a5,a0
    80000478:	fcf42e23          	sw	a5,-36(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
    8000047c:	f14027f3          	csrr	a5,mhartid
    80000480:	fef43423          	sd	a5,-24(s0)
    80000484:	fe843783          	ld	a5,-24(s0)
    80000488:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
    8000048c:	02d00793          	li	a5,45
    80000490:	01a79713          	slli	a4,a5,0x1a
    80000494:	fe043783          	ld	a5,-32(s0)
    80000498:	20078793          	addi	a5,a5,512
    8000049c:	00c79793          	slli	a5,a5,0xc
    800004a0:	00f707b3          	add	a5,a4,a5
    800004a4:	fdc42703          	lw	a4,-36(s0)
    800004a8:	00e7a223          	sw	a4,4(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_plic.h:220
}
    800004ac:	00000013          	nop
    800004b0:	02813403          	ld	s0,40(sp)
    800004b4:	03010113          	addi	sp,sp,48
    800004b8:	00008067          	ret

00000000800004bc <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:113

/*------------------------------------------------------------------------------
 *
 */
void handle_m_ext_interrupt(void)
{
    800004bc:	fe010113          	addi	sp,sp,-32
    800004c0:	00113c23          	sd	ra,24(sp)
    800004c4:	00813823          	sd	s0,16(sp)
    800004c8:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:114
    uint32_t int_num  = PLIC_ClaimIRQ();
    800004cc:	f51ff0ef          	jal	ra,8000041c <PLIC_ClaimIRQ>
    800004d0:	00050793          	mv	a5,a0
    800004d4:	fef42623          	sw	a5,-20(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:115
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
    800004d8:	fe0405a3          	sb	zero,-21(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:117

    disable = ext_irq_handler_table[int_num]();
    800004dc:	00004717          	auipc	a4,0x4
    800004e0:	6c470713          	addi	a4,a4,1732 # 80004ba0 <ext_irq_handler_table>
    800004e4:	fec46783          	lwu	a5,-20(s0)
    800004e8:	00379793          	slli	a5,a5,0x3
    800004ec:	00f707b3          	add	a5,a4,a5
    800004f0:	0007b783          	ld	a5,0(a5)
    800004f4:	000780e7          	jalr	a5
    800004f8:	00050793          	mv	a5,a0
    800004fc:	fef405a3          	sb	a5,-21(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:119

    PLIC_CompleteIRQ(int_num);
    80000500:	fec42783          	lw	a5,-20(s0)
    80000504:	00078513          	mv	a0,a5
    80000508:	f61ff0ef          	jal	ra,80000468 <PLIC_CompleteIRQ>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:121

    if(EXT_IRQ_DISABLE == disable)
    8000050c:	feb44783          	lbu	a5,-21(s0)
    80000510:	0ff7f713          	andi	a4,a5,255
    80000514:	00100793          	li	a5,1
    80000518:	00f71863          	bne	a4,a5,80000528 <handle_m_ext_interrupt+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:123
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
    8000051c:	fec42783          	lw	a5,-20(s0)
    80000520:	00078513          	mv	a0,a5
    80000524:	e0dff0ef          	jal	ra,80000330 <PLIC_DisableIRQ>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal.c:125
    }
}
    80000528:	00000013          	nop
    8000052c:	01813083          	ld	ra,24(sp)
    80000530:	01013403          	ld	s0,16(sp)
    80000534:	02010113          	addi	sp,sp,32
    80000538:	00008067          	ret

000000008000053c <Invalid_IRQHandler>:
Invalid_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:35
	/*Default handler*/
}

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
    8000053c:	ff010113          	addi	sp,sp,-16
    80000540:	00813423          	sd	s0,8(sp)
    80000544:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:36
    return(0U); /*Default handler*/
    80000548:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:37
}
    8000054c:	00078513          	mv	a0,a5
    80000550:	00813403          	ld	s0,8(sp)
    80000554:	01010113          	addi	sp,sp,16
    80000558:	00008067          	ret

000000008000055c <External_1_IRQHandler>:
External_1_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:41

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_1_IRQHandler(void)
{
    8000055c:	ff010113          	addi	sp,sp,-16
    80000560:	00813423          	sd	s0,8(sp)
    80000564:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:42
    return(0U); /*Default handler*/
    80000568:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:43
}
    8000056c:	00078513          	mv	a0,a5
    80000570:	00813403          	ld	s0,8(sp)
    80000574:	01010113          	addi	sp,sp,16
    80000578:	00008067          	ret

000000008000057c <External_2_IRQHandler>:
External_2_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:47

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_2_IRQHandler(void)
{
    8000057c:	ff010113          	addi	sp,sp,-16
    80000580:	00813423          	sd	s0,8(sp)
    80000584:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:48
    return(0U); /*Default handler*/
    80000588:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:49
}
    8000058c:	00078513          	mv	a0,a5
    80000590:	00813403          	ld	s0,8(sp)
    80000594:	01010113          	addi	sp,sp,16
    80000598:	00008067          	ret

000000008000059c <External_3_IRQHandler>:
External_3_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:53

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_3_IRQHandler(void)
{
    8000059c:	ff010113          	addi	sp,sp,-16
    800005a0:	00813423          	sd	s0,8(sp)
    800005a4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:54
    return(0U); /*Default handler*/
    800005a8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:55
}
    800005ac:	00078513          	mv	a0,a5
    800005b0:	00813403          	ld	s0,8(sp)
    800005b4:	01010113          	addi	sp,sp,16
    800005b8:	00008067          	ret

00000000800005bc <External_4_IRQHandler>:
External_4_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:59

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_4_IRQHandler(void)
{
    800005bc:	ff010113          	addi	sp,sp,-16
    800005c0:	00813423          	sd	s0,8(sp)
    800005c4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:60
	return(0U); /*Default handler*/
    800005c8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:61
}
    800005cc:	00078513          	mv	a0,a5
    800005d0:	00813403          	ld	s0,8(sp)
    800005d4:	01010113          	addi	sp,sp,16
    800005d8:	00008067          	ret

00000000800005dc <External_5_IRQHandler>:
External_5_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:65

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_5_IRQHandler(void)
{
    800005dc:	ff010113          	addi	sp,sp,-16
    800005e0:	00813423          	sd	s0,8(sp)
    800005e4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:66
    return(0U); /*Default handler*/
    800005e8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:67
}
    800005ec:	00078513          	mv	a0,a5
    800005f0:	00813403          	ld	s0,8(sp)
    800005f4:	01010113          	addi	sp,sp,16
    800005f8:	00008067          	ret

00000000800005fc <External_6_IRQHandler>:
External_6_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:71

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_6_IRQHandler(void)
{
    800005fc:	ff010113          	addi	sp,sp,-16
    80000600:	00813423          	sd	s0,8(sp)
    80000604:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:72
    return(0U); /*Default handler*/
    80000608:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:73
}
    8000060c:	00078513          	mv	a0,a5
    80000610:	00813403          	ld	s0,8(sp)
    80000614:	01010113          	addi	sp,sp,16
    80000618:	00008067          	ret

000000008000061c <External_7_IRQHandler>:
External_7_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:77

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_7_IRQHandler(void)
{
    8000061c:	ff010113          	addi	sp,sp,-16
    80000620:	00813423          	sd	s0,8(sp)
    80000624:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:78
    return(0U); /*Default handler*/
    80000628:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:79
}
    8000062c:	00078513          	mv	a0,a5
    80000630:	00813403          	ld	s0,8(sp)
    80000634:	01010113          	addi	sp,sp,16
    80000638:	00008067          	ret

000000008000063c <External_8_IRQHandler>:
External_8_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:83

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_8_IRQHandler(void)
{
    8000063c:	ff010113          	addi	sp,sp,-16
    80000640:	00813423          	sd	s0,8(sp)
    80000644:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:84
    return(0U); /*Default handler*/
    80000648:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:85
}
    8000064c:	00078513          	mv	a0,a5
    80000650:	00813403          	ld	s0,8(sp)
    80000654:	01010113          	addi	sp,sp,16
    80000658:	00008067          	ret

000000008000065c <External_9_IRQHandler>:
External_9_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:89

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_9_IRQHandler(void)
{
    8000065c:	ff010113          	addi	sp,sp,-16
    80000660:	00813423          	sd	s0,8(sp)
    80000664:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:90
    return(0U); /*Default handler*/
    80000668:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:91
}
    8000066c:	00078513          	mv	a0,a5
    80000670:	00813403          	ld	s0,8(sp)
    80000674:	01010113          	addi	sp,sp,16
    80000678:	00008067          	ret

000000008000067c <External_10_IRQHandler>:
External_10_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:95

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_10_IRQHandler(void)
{
    8000067c:	ff010113          	addi	sp,sp,-16
    80000680:	00813423          	sd	s0,8(sp)
    80000684:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:96
    return(0U); /*Default handler*/
    80000688:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:97
}
    8000068c:	00078513          	mv	a0,a5
    80000690:	00813403          	ld	s0,8(sp)
    80000694:	01010113          	addi	sp,sp,16
    80000698:	00008067          	ret

000000008000069c <External_11_IRQHandler>:
External_11_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:101

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_11_IRQHandler(void)
{
    8000069c:	ff010113          	addi	sp,sp,-16
    800006a0:	00813423          	sd	s0,8(sp)
    800006a4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:102
    return(0U); /*Default handler*/
    800006a8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:103
}
    800006ac:	00078513          	mv	a0,a5
    800006b0:	00813403          	ld	s0,8(sp)
    800006b4:	01010113          	addi	sp,sp,16
    800006b8:	00008067          	ret

00000000800006bc <External_12_IRQHandler>:
External_12_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:107

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_12_IRQHandler(void)
{
    800006bc:	ff010113          	addi	sp,sp,-16
    800006c0:	00813423          	sd	s0,8(sp)
    800006c4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:108
	return(0U); /*Default handler*/
    800006c8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:109
}
    800006cc:	00078513          	mv	a0,a5
    800006d0:	00813403          	ld	s0,8(sp)
    800006d4:	01010113          	addi	sp,sp,16
    800006d8:	00008067          	ret

00000000800006dc <External_13_IRQHandler>:
External_13_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:113

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_13_IRQHandler(void)
{
    800006dc:	ff010113          	addi	sp,sp,-16
    800006e0:	00813423          	sd	s0,8(sp)
    800006e4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:114
	return(0U); /*Default handler*/
    800006e8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:115
}
    800006ec:	00078513          	mv	a0,a5
    800006f0:	00813403          	ld	s0,8(sp)
    800006f4:	01010113          	addi	sp,sp,16
    800006f8:	00008067          	ret

00000000800006fc <External_14_IRQHandler>:
External_14_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:119

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_14_IRQHandler(void)
{
    800006fc:	ff010113          	addi	sp,sp,-16
    80000700:	00813423          	sd	s0,8(sp)
    80000704:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:120
	return(0U); /*Default handler*/
    80000708:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:121
}
    8000070c:	00078513          	mv	a0,a5
    80000710:	00813403          	ld	s0,8(sp)
    80000714:	01010113          	addi	sp,sp,16
    80000718:	00008067          	ret

000000008000071c <External_15_IRQHandler>:
External_15_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:125

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_15_IRQHandler(void)
{
    8000071c:	ff010113          	addi	sp,sp,-16
    80000720:	00813423          	sd	s0,8(sp)
    80000724:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:126
	return(0U); /*Default handler*/
    80000728:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:127
}
    8000072c:	00078513          	mv	a0,a5
    80000730:	00813403          	ld	s0,8(sp)
    80000734:	01010113          	addi	sp,sp,16
    80000738:	00008067          	ret

000000008000073c <External_16_IRQHandler>:
External_16_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:131

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_16_IRQHandler(void)
{
    8000073c:	ff010113          	addi	sp,sp,-16
    80000740:	00813423          	sd	s0,8(sp)
    80000744:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:132
	return(0U); /*Default handler*/
    80000748:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:133
}
    8000074c:	00078513          	mv	a0,a5
    80000750:	00813403          	ld	s0,8(sp)
    80000754:	01010113          	addi	sp,sp,16
    80000758:	00008067          	ret

000000008000075c <External_17_IRQHandler>:
External_17_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:137

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_17_IRQHandler(void)
{
    8000075c:	ff010113          	addi	sp,sp,-16
    80000760:	00813423          	sd	s0,8(sp)
    80000764:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:138
	return(0U); /*Default handler*/
    80000768:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:139
}
    8000076c:	00078513          	mv	a0,a5
    80000770:	00813403          	ld	s0,8(sp)
    80000774:	01010113          	addi	sp,sp,16
    80000778:	00008067          	ret

000000008000077c <External_18_IRQHandler>:
External_18_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:143

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_18_IRQHandler(void)
{
    8000077c:	ff010113          	addi	sp,sp,-16
    80000780:	00813423          	sd	s0,8(sp)
    80000784:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:144
	return(0U); /*Default handler*/
    80000788:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:145
}
    8000078c:	00078513          	mv	a0,a5
    80000790:	00813403          	ld	s0,8(sp)
    80000794:	01010113          	addi	sp,sp,16
    80000798:	00008067          	ret

000000008000079c <External_19_IRQHandler>:
External_19_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:149

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_19_IRQHandler(void)
{
    8000079c:	ff010113          	addi	sp,sp,-16
    800007a0:	00813423          	sd	s0,8(sp)
    800007a4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:150
	return(0U); /*Default handler*/
    800007a8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:151
}
    800007ac:	00078513          	mv	a0,a5
    800007b0:	00813403          	ld	s0,8(sp)
    800007b4:	01010113          	addi	sp,sp,16
    800007b8:	00008067          	ret

00000000800007bc <External_20_IRQHandler>:
External_20_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:155

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_20_IRQHandler(void)
{
    800007bc:	ff010113          	addi	sp,sp,-16
    800007c0:	00813423          	sd	s0,8(sp)
    800007c4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:156
	return(0U); /*Default handler*/
    800007c8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:157
}
    800007cc:	00078513          	mv	a0,a5
    800007d0:	00813403          	ld	s0,8(sp)
    800007d4:	01010113          	addi	sp,sp,16
    800007d8:	00008067          	ret

00000000800007dc <External_21_IRQHandler>:
External_21_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:161

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_21_IRQHandler(void)
{
    800007dc:	ff010113          	addi	sp,sp,-16
    800007e0:	00813423          	sd	s0,8(sp)
    800007e4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:162
	return(0U); /*Default handler*/
    800007e8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:163
}
    800007ec:	00078513          	mv	a0,a5
    800007f0:	00813403          	ld	s0,8(sp)
    800007f4:	01010113          	addi	sp,sp,16
    800007f8:	00008067          	ret

00000000800007fc <External_22_IRQHandler>:
External_22_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:167

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_22_IRQHandler(void)
{
    800007fc:	ff010113          	addi	sp,sp,-16
    80000800:	00813423          	sd	s0,8(sp)
    80000804:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:168
	return(0U); /*Default handler*/
    80000808:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:169
}
    8000080c:	00078513          	mv	a0,a5
    80000810:	00813403          	ld	s0,8(sp)
    80000814:	01010113          	addi	sp,sp,16
    80000818:	00008067          	ret

000000008000081c <External_23_IRQHandler>:
External_23_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:173

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_23_IRQHandler(void)
{
    8000081c:	ff010113          	addi	sp,sp,-16
    80000820:	00813423          	sd	s0,8(sp)
    80000824:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:174
	return(0U); /*Default handler*/
    80000828:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:175
}
    8000082c:	00078513          	mv	a0,a5
    80000830:	00813403          	ld	s0,8(sp)
    80000834:	01010113          	addi	sp,sp,16
    80000838:	00008067          	ret

000000008000083c <External_24_IRQHandler>:
External_24_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:179

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_24_IRQHandler(void)
{
    8000083c:	ff010113          	addi	sp,sp,-16
    80000840:	00813423          	sd	s0,8(sp)
    80000844:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:180
	return(0U); /*Default handler*/
    80000848:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:181
}
    8000084c:	00078513          	mv	a0,a5
    80000850:	00813403          	ld	s0,8(sp)
    80000854:	01010113          	addi	sp,sp,16
    80000858:	00008067          	ret

000000008000085c <External_25_IRQHandler>:
External_25_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:185

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_25_IRQHandler(void)
{
    8000085c:	ff010113          	addi	sp,sp,-16
    80000860:	00813423          	sd	s0,8(sp)
    80000864:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:186
	return(0U); /*Default handler*/
    80000868:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:187
}
    8000086c:	00078513          	mv	a0,a5
    80000870:	00813403          	ld	s0,8(sp)
    80000874:	01010113          	addi	sp,sp,16
    80000878:	00008067          	ret

000000008000087c <External_26_IRQHandler>:
External_26_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:191

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_26_IRQHandler(void)
{
    8000087c:	ff010113          	addi	sp,sp,-16
    80000880:	00813423          	sd	s0,8(sp)
    80000884:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:192
	return(0U); /*Default handler*/
    80000888:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:193
}
    8000088c:	00078513          	mv	a0,a5
    80000890:	00813403          	ld	s0,8(sp)
    80000894:	01010113          	addi	sp,sp,16
    80000898:	00008067          	ret

000000008000089c <External_27_IRQHandler>:
External_27_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:197

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_27_IRQHandler(void)
{
    8000089c:	ff010113          	addi	sp,sp,-16
    800008a0:	00813423          	sd	s0,8(sp)
    800008a4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:198
	return(0U); /*Default handler*/
    800008a8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:199
}
    800008ac:	00078513          	mv	a0,a5
    800008b0:	00813403          	ld	s0,8(sp)
    800008b4:	01010113          	addi	sp,sp,16
    800008b8:	00008067          	ret

00000000800008bc <External_28_IRQHandler>:
External_28_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:203

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_28_IRQHandler(void)
{
    800008bc:	ff010113          	addi	sp,sp,-16
    800008c0:	00813423          	sd	s0,8(sp)
    800008c4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:204
	return(0U); /*Default handler*/
    800008c8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:205
}
    800008cc:	00078513          	mv	a0,a5
    800008d0:	00813403          	ld	s0,8(sp)
    800008d4:	01010113          	addi	sp,sp,16
    800008d8:	00008067          	ret

00000000800008dc <External_29_IRQHandler>:
External_29_IRQHandler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:209

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_29_IRQHandler(void)
{
    800008dc:	ff010113          	addi	sp,sp,-16
    800008e0:	00813423          	sd	s0,8(sp)
    800008e4:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:210
	return(0U); /*Default handler*/
    800008e8:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/riscv_hal/riscv_hal_stubs.c:211
}
    800008ec:	00078513          	mv	a0,a5
    800008f0:	00813403          	ld	s0,8(sp)
    800008f4:	01010113          	addi	sp,sp,16
    800008f8:	00008067          	ret

00000000800008fc <Transmit_uart>:
Transmit_uart():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:69
 * Date created		: 04/01/2007
 * Description		: Tx character through UART upto '\0'
 * Notes			:
 **************************************************/

void Transmit_uart(UC *data_ptr) {
    800008fc:	fe010113          	addi	sp,sp,-32
    80000900:	00113c23          	sd	ra,24(sp)
    80000904:	00813823          	sd	s0,16(sp)
    80000908:	02010413          	addi	s0,sp,32
    8000090c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:72
	UC lsr;

	while (*data_ptr != '\0') {
    80000910:	0200006f          	j	80000930 <Transmit_uart+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:73
		Tx_uart(*data_ptr);
    80000914:	fe843783          	ld	a5,-24(s0)
    80000918:	0007c783          	lbu	a5,0(a5)
    8000091c:	00078513          	mv	a0,a5
    80000920:	034000ef          	jal	ra,80000954 <Tx_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:74
		data_ptr++;
    80000924:	fe843783          	ld	a5,-24(s0)
    80000928:	00178793          	addi	a5,a5,1
    8000092c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:72
	while (*data_ptr != '\0') {
    80000930:	fe843783          	ld	a5,-24(s0)
    80000934:	0007c783          	lbu	a5,0(a5)
    80000938:	fc079ee3          	bnez	a5,80000914 <Transmit_uart+0x18>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:76
	}
}
    8000093c:	00000013          	nop
    80000940:	00000013          	nop
    80000944:	01813083          	ld	ra,24(sp)
    80000948:	01013403          	ld	s0,16(sp)
    8000094c:	02010113          	addi	sp,sp,32
    80000950:	00008067          	ret

0000000080000954 <Tx_uart>:
Tx_uart():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:88
 * Date created		: 04/01/2007
 * Description		: Tx 1 character through UART
 * Notes			:
 *************************************************/

void Tx_uart(UC tx_char) {
    80000954:	fd010113          	addi	sp,sp,-48
    80000958:	02813423          	sd	s0,40(sp)
    8000095c:	03010413          	addi	s0,sp,48
    80000960:	00050793          	mv	a5,a0
    80000964:	fcf40fa3          	sb	a5,-33(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:93
	UC lsr;

	//__asm volatile( "csrc mie, %0" :: "r"(0x880) );

	uart_regs.UART_DR = tx_char;
    80000968:	100007b7          	lui	a5,0x10000
    8000096c:	10078793          	addi	a5,a5,256 # 10000100 <HEAP_SIZE+0x9e52100>
    80000970:	fdf44703          	lbu	a4,-33(s0)
    80000974:	0007071b          	sext.w	a4,a4
    80000978:	00e7a023          	sw	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:94
	__asm__ __volatile__ ("fence");
    8000097c:	0ff0000f          	fence
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:96 (discriminator 1)
	do {
		lsr = uart_regs.UART_LSR;
    80000980:	100007b7          	lui	a5,0x10000
    80000984:	10078793          	addi	a5,a5,256 # 10000100 <HEAP_SIZE+0x9e52100>
    80000988:	0147a783          	lw	a5,20(a5)
    8000098c:	0007879b          	sext.w	a5,a5
    80000990:	fef407a3          	sb	a5,-17(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:97 (discriminator 1)
		__asm__ __volatile__ ("fence");
    80000994:	0ff0000f          	fence
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:98 (discriminator 1)
		lsr = lsr & 0x20;
    80000998:	fef44783          	lbu	a5,-17(s0)
    8000099c:	0207f793          	andi	a5,a5,32
    800009a0:	fef407a3          	sb	a5,-17(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:99 (discriminator 1)
	} while (lsr != 0x20);
    800009a4:	fef44783          	lbu	a5,-17(s0)
    800009a8:	0ff7f713          	andi	a4,a5,255
    800009ac:	02000793          	li	a5,32
    800009b0:	fcf718e3          	bne	a4,a5,80000980 <Tx_uart+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../Microsemi_Code/drivers/CoreUARTapb/uart.c:103
	//__asm volatile( "csrs mie, %0" :: "r"(0x880) );

	//uart_regs.UART_LSR &= ~0x20; //For emulation only FIXME
}
    800009b4:	00000013          	nop
    800009b8:	00000013          	nop
    800009bc:	02813403          	ld	s0,40(sp)
    800009c0:	03010113          	addi	sp,sp,48
    800009c4:	00008067          	ret

00000000800009c8 <pvPortMalloc>:
pvPortMalloc():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:114
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    800009c8:	fc010113          	addi	sp,sp,-64
    800009cc:	02113c23          	sd	ra,56(sp)
    800009d0:	02813823          	sd	s0,48(sp)
    800009d4:	04010413          	addi	s0,sp,64
    800009d8:	fca43423          	sd	a0,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:116
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    800009dc:	fc043c23          	sd	zero,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:118

	vTaskSuspendAll();
    800009e0:	038020ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:122
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    800009e4:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    800009e8:	0007b783          	ld	a5,0(a5)
    800009ec:	00079463          	bnez	a5,800009f4 <pvPortMalloc+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:124
		{
			prvHeapInit();
    800009f0:	314000ef          	jal	ra,80000d04 <prvHeapInit>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:135

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    800009f4:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    800009f8:	0007b703          	ld	a4,0(a5)
    800009fc:	fc843783          	ld	a5,-56(s0)
    80000a00:	00f777b3          	and	a5,a4,a5
    80000a04:	1c079063          	bnez	a5,80000bc4 <pvPortMalloc+0x1fc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:139
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    80000a08:	fc843783          	ld	a5,-56(s0)
    80000a0c:	04078463          	beqz	a5,80000a54 <pvPortMalloc+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:141
			{
				xWantedSize += xHeapStructSize;
    80000a10:	01000793          	li	a5,16
    80000a14:	fc843703          	ld	a4,-56(s0)
    80000a18:	00f707b3          	add	a5,a4,a5
    80000a1c:	fcf43423          	sd	a5,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:145

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    80000a20:	fc843783          	ld	a5,-56(s0)
    80000a24:	0077f793          	andi	a5,a5,7
    80000a28:	02078663          	beqz	a5,80000a54 <pvPortMalloc+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:148
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    80000a2c:	fc843783          	ld	a5,-56(s0)
    80000a30:	ff87f793          	andi	a5,a5,-8
    80000a34:	00878793          	addi	a5,a5,8
    80000a38:	fcf43423          	sd	a5,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:149
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    80000a3c:	fc843783          	ld	a5,-56(s0)
    80000a40:	0077f793          	andi	a5,a5,7
    80000a44:	00078863          	beqz	a5,80000a54 <pvPortMalloc+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:149 (discriminator 1)
    80000a48:	30047073          	csrci	mstatus,8
    80000a4c:	00100073          	ebreak
    80000a50:	0000006f          	j	80000a50 <pvPortMalloc+0x88>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:161
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    80000a54:	fc843783          	ld	a5,-56(s0)
    80000a58:	16078663          	beqz	a5,80000bc4 <pvPortMalloc+0x1fc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:161 (discriminator 1)
    80000a5c:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000a60:	0007b783          	ld	a5,0(a5)
    80000a64:	fc843703          	ld	a4,-56(s0)
    80000a68:	14e7ee63          	bltu	a5,a4,80000bc4 <pvPortMalloc+0x1fc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:165
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    80000a6c:	00104797          	auipc	a5,0x104
    80000a70:	30478793          	addi	a5,a5,772 # 80104d70 <xStart>
    80000a74:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:166
				pxBlock = xStart.pxNextFreeBlock;
    80000a78:	00104797          	auipc	a5,0x104
    80000a7c:	2f878793          	addi	a5,a5,760 # 80104d70 <xStart>
    80000a80:	0007b783          	ld	a5,0(a5)
    80000a84:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:167
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    80000a88:	0180006f          	j	80000aa0 <pvPortMalloc+0xd8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:169
				{
					pxPreviousBlock = pxBlock;
    80000a8c:	fe843783          	ld	a5,-24(s0)
    80000a90:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:170
					pxBlock = pxBlock->pxNextFreeBlock;
    80000a94:	fe843783          	ld	a5,-24(s0)
    80000a98:	0007b783          	ld	a5,0(a5)
    80000a9c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:167
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    80000aa0:	fe843783          	ld	a5,-24(s0)
    80000aa4:	0087b783          	ld	a5,8(a5)
    80000aa8:	fc843703          	ld	a4,-56(s0)
    80000aac:	00e7f863          	bgeu	a5,a4,80000abc <pvPortMalloc+0xf4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:167 (discriminator 1)
    80000ab0:	fe843783          	ld	a5,-24(s0)
    80000ab4:	0007b783          	ld	a5,0(a5)
    80000ab8:	fc079ae3          	bnez	a5,80000a8c <pvPortMalloc+0xc4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:175
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    80000abc:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000ac0:	0007b783          	ld	a5,0(a5)
    80000ac4:	fe843703          	ld	a4,-24(s0)
    80000ac8:	0ef70e63          	beq	a4,a5,80000bc4 <pvPortMalloc+0x1fc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:179
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    80000acc:	fe043783          	ld	a5,-32(s0)
    80000ad0:	0007b703          	ld	a4,0(a5)
    80000ad4:	01000793          	li	a5,16
    80000ad8:	00f707b3          	add	a5,a4,a5
    80000adc:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:183

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    80000ae0:	fe843783          	ld	a5,-24(s0)
    80000ae4:	0007b703          	ld	a4,0(a5)
    80000ae8:	fe043783          	ld	a5,-32(s0)
    80000aec:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:187

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    80000af0:	fe843783          	ld	a5,-24(s0)
    80000af4:	0087b703          	ld	a4,8(a5)
    80000af8:	fc843783          	ld	a5,-56(s0)
    80000afc:	40f70733          	sub	a4,a4,a5
    80000b00:	01000793          	li	a5,16
    80000b04:	00179793          	slli	a5,a5,0x1
    80000b08:	04e7fc63          	bgeu	a5,a4,80000b60 <pvPortMalloc+0x198>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:193
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    80000b0c:	fe843703          	ld	a4,-24(s0)
    80000b10:	fc843783          	ld	a5,-56(s0)
    80000b14:	00f707b3          	add	a5,a4,a5
    80000b18:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:194
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    80000b1c:	fd043783          	ld	a5,-48(s0)
    80000b20:	0077f793          	andi	a5,a5,7
    80000b24:	00078863          	beqz	a5,80000b34 <pvPortMalloc+0x16c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:194 (discriminator 1)
    80000b28:	30047073          	csrci	mstatus,8
    80000b2c:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:194 (discriminator 3)
    80000b30:	0000006f          	j	80000b30 <pvPortMalloc+0x168>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:198

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    80000b34:	fe843783          	ld	a5,-24(s0)
    80000b38:	0087b703          	ld	a4,8(a5)
    80000b3c:	fc843783          	ld	a5,-56(s0)
    80000b40:	40f70733          	sub	a4,a4,a5
    80000b44:	fd043783          	ld	a5,-48(s0)
    80000b48:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:199
						pxBlock->xBlockSize = xWantedSize;
    80000b4c:	fe843783          	ld	a5,-24(s0)
    80000b50:	fc843703          	ld	a4,-56(s0)
    80000b54:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:202

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    80000b58:	fd043503          	ld	a0,-48(s0)
    80000b5c:	2e8000ef          	jal	ra,80000e44 <prvInsertBlockIntoFreeList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:209
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    80000b60:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000b64:	0007b703          	ld	a4,0(a5)
    80000b68:	fe843783          	ld	a5,-24(s0)
    80000b6c:	0087b783          	ld	a5,8(a5)
    80000b70:	40f70733          	sub	a4,a4,a5
    80000b74:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000b78:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:211

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    80000b7c:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000b80:	0007b703          	ld	a4,0(a5)
    80000b84:	93818793          	addi	a5,gp,-1736 # 80004cb8 <xMinimumEverFreeBytesRemaining>
    80000b88:	0007b783          	ld	a5,0(a5)
    80000b8c:	00f77a63          	bgeu	a4,a5,80000ba0 <pvPortMalloc+0x1d8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:213
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    80000b90:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000b94:	0007b703          	ld	a4,0(a5)
    80000b98:	93818793          	addi	a5,gp,-1736 # 80004cb8 <xMinimumEverFreeBytesRemaining>
    80000b9c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:222
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    80000ba0:	fe843783          	ld	a5,-24(s0)
    80000ba4:	0087b703          	ld	a4,8(a5)
    80000ba8:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    80000bac:	0007b783          	ld	a5,0(a5)
    80000bb0:	00f76733          	or	a4,a4,a5
    80000bb4:	fe843783          	ld	a5,-24(s0)
    80000bb8:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:223
					pxBlock->pxNextFreeBlock = NULL;
    80000bbc:	fe843783          	ld	a5,-24(s0)
    80000bc0:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:242
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    80000bc4:	685010ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:246

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    80000bc8:	fd843783          	ld	a5,-40(s0)
    80000bcc:	00079463          	bnez	a5,80000bd4 <pvPortMalloc+0x20c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:249
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    80000bd0:	095030ef          	jal	ra,80004464 <vApplicationMallocFailedHook>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:258
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    80000bd4:	fd843783          	ld	a5,-40(s0)
    80000bd8:	0077f793          	andi	a5,a5,7
    80000bdc:	00078863          	beqz	a5,80000bec <pvPortMalloc+0x224>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:258 (discriminator 1)
    80000be0:	30047073          	csrci	mstatus,8
    80000be4:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:258 (discriminator 5)
    80000be8:	0000006f          	j	80000be8 <pvPortMalloc+0x220>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:259
	return pvReturn;
    80000bec:	fd843783          	ld	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:260
}
    80000bf0:	00078513          	mv	a0,a5
    80000bf4:	03813083          	ld	ra,56(sp)
    80000bf8:	03013403          	ld	s0,48(sp)
    80000bfc:	04010113          	addi	sp,sp,64
    80000c00:	00008067          	ret

0000000080000c04 <vPortFree>:
vPortFree():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:264
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    80000c04:	fd010113          	addi	sp,sp,-48
    80000c08:	02113423          	sd	ra,40(sp)
    80000c0c:	02813023          	sd	s0,32(sp)
    80000c10:	03010413          	addi	s0,sp,48
    80000c14:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:265
uint8_t *puc = ( uint8_t * ) pv;
    80000c18:	fd843783          	ld	a5,-40(s0)
    80000c1c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:268
BlockLink_t *pxLink;

	if( pv != NULL )
    80000c20:	fd843783          	ld	a5,-40(s0)
    80000c24:	0c078663          	beqz	a5,80000cf0 <vPortFree+0xec>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:272
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    80000c28:	01000793          	li	a5,16
    80000c2c:	40f007b3          	neg	a5,a5
    80000c30:	fe843703          	ld	a4,-24(s0)
    80000c34:	00f707b3          	add	a5,a4,a5
    80000c38:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:275

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    80000c3c:	fe843783          	ld	a5,-24(s0)
    80000c40:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:278

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    80000c44:	fe043783          	ld	a5,-32(s0)
    80000c48:	0087b703          	ld	a4,8(a5)
    80000c4c:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    80000c50:	0007b783          	ld	a5,0(a5)
    80000c54:	00f777b3          	and	a5,a4,a5
    80000c58:	00079863          	bnez	a5,80000c68 <vPortFree+0x64>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:278 (discriminator 1)
    80000c5c:	30047073          	csrci	mstatus,8
    80000c60:	00100073          	ebreak
    80000c64:	0000006f          	j	80000c64 <vPortFree+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:279
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    80000c68:	fe043783          	ld	a5,-32(s0)
    80000c6c:	0007b783          	ld	a5,0(a5)
    80000c70:	00078863          	beqz	a5,80000c80 <vPortFree+0x7c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:279 (discriminator 1)
    80000c74:	30047073          	csrci	mstatus,8
    80000c78:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:279 (discriminator 2)
    80000c7c:	0000006f          	j	80000c7c <vPortFree+0x78>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:281

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    80000c80:	fe043783          	ld	a5,-32(s0)
    80000c84:	0087b703          	ld	a4,8(a5)
    80000c88:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    80000c8c:	0007b783          	ld	a5,0(a5)
    80000c90:	00f777b3          	and	a5,a4,a5
    80000c94:	04078e63          	beqz	a5,80000cf0 <vPortFree+0xec>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:283
		{
			if( pxLink->pxNextFreeBlock == NULL )
    80000c98:	fe043783          	ld	a5,-32(s0)
    80000c9c:	0007b783          	ld	a5,0(a5)
    80000ca0:	04079863          	bnez	a5,80000cf0 <vPortFree+0xec>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:287
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    80000ca4:	fe043783          	ld	a5,-32(s0)
    80000ca8:	0087b703          	ld	a4,8(a5)
    80000cac:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    80000cb0:	0007b783          	ld	a5,0(a5)
    80000cb4:	fff7c793          	not	a5,a5
    80000cb8:	00f77733          	and	a4,a4,a5
    80000cbc:	fe043783          	ld	a5,-32(s0)
    80000cc0:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:289

				vTaskSuspendAll();
    80000cc4:	555010ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:292
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    80000cc8:	fe043783          	ld	a5,-32(s0)
    80000ccc:	0087b703          	ld	a4,8(a5)
    80000cd0:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000cd4:	0007b783          	ld	a5,0(a5)
    80000cd8:	00f70733          	add	a4,a4,a5
    80000cdc:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000ce0:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:294
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    80000ce4:	fe043503          	ld	a0,-32(s0)
    80000ce8:	15c000ef          	jal	ra,80000e44 <prvInsertBlockIntoFreeList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:296
				}
				( void ) xTaskResumeAll();
    80000cec:	55d010ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:308
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    80000cf0:	00000013          	nop
    80000cf4:	02813083          	ld	ra,40(sp)
    80000cf8:	02013403          	ld	s0,32(sp)
    80000cfc:	03010113          	addi	sp,sp,48
    80000d00:	00008067          	ret

0000000080000d04 <prvHeapInit>:
prvHeapInit():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:330
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    80000d04:	fd010113          	addi	sp,sp,-48
    80000d08:	02813423          	sd	s0,40(sp)
    80000d0c:	03010413          	addi	s0,sp,48
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:334
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    80000d10:	001007b7          	lui	a5,0x100
    80000d14:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:337

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    80000d18:	00004797          	auipc	a5,0x4
    80000d1c:	05878793          	addi	a5,a5,88 # 80004d70 <ucHeap>
    80000d20:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:339

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    80000d24:	fe843783          	ld	a5,-24(s0)
    80000d28:	0077f793          	andi	a5,a5,7
    80000d2c:	02078c63          	beqz	a5,80000d64 <prvHeapInit+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:341
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    80000d30:	fe843783          	ld	a5,-24(s0)
    80000d34:	00778793          	addi	a5,a5,7
    80000d38:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:342
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    80000d3c:	fe843783          	ld	a5,-24(s0)
    80000d40:	ff87f793          	andi	a5,a5,-8
    80000d44:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:343
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    80000d48:	fe043703          	ld	a4,-32(s0)
    80000d4c:	fe843783          	ld	a5,-24(s0)
    80000d50:	40f70733          	sub	a4,a4,a5
    80000d54:	00004797          	auipc	a5,0x4
    80000d58:	01c78793          	addi	a5,a5,28 # 80004d70 <ucHeap>
    80000d5c:	00f707b3          	add	a5,a4,a5
    80000d60:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:346
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    80000d64:	fe843783          	ld	a5,-24(s0)
    80000d68:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:350

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    80000d6c:	00104797          	auipc	a5,0x104
    80000d70:	00478793          	addi	a5,a5,4 # 80104d70 <xStart>
    80000d74:	fd843703          	ld	a4,-40(s0)
    80000d78:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:351
	xStart.xBlockSize = ( size_t ) 0;
    80000d7c:	00104797          	auipc	a5,0x104
    80000d80:	ff478793          	addi	a5,a5,-12 # 80104d70 <xStart>
    80000d84:	0007b423          	sd	zero,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:355

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    80000d88:	fd843783          	ld	a5,-40(s0)
    80000d8c:	fe043703          	ld	a4,-32(s0)
    80000d90:	00f707b3          	add	a5,a4,a5
    80000d94:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:356
	uxAddress -= xHeapStructSize;
    80000d98:	01000793          	li	a5,16
    80000d9c:	fe843703          	ld	a4,-24(s0)
    80000da0:	40f707b3          	sub	a5,a4,a5
    80000da4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:357
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    80000da8:	fe843783          	ld	a5,-24(s0)
    80000dac:	ff87f793          	andi	a5,a5,-8
    80000db0:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:358
	pxEnd = ( void * ) uxAddress;
    80000db4:	fe843703          	ld	a4,-24(s0)
    80000db8:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000dbc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:359
	pxEnd->xBlockSize = 0;
    80000dc0:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000dc4:	0007b783          	ld	a5,0(a5)
    80000dc8:	0007b423          	sd	zero,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:360
	pxEnd->pxNextFreeBlock = NULL;
    80000dcc:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000dd0:	0007b783          	ld	a5,0(a5)
    80000dd4:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:364

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    80000dd8:	fd843783          	ld	a5,-40(s0)
    80000ddc:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:365
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    80000de0:	fd043783          	ld	a5,-48(s0)
    80000de4:	fe843703          	ld	a4,-24(s0)
    80000de8:	40f70733          	sub	a4,a4,a5
    80000dec:	fd043783          	ld	a5,-48(s0)
    80000df0:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:366
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    80000df4:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000df8:	0007b703          	ld	a4,0(a5)
    80000dfc:	fd043783          	ld	a5,-48(s0)
    80000e00:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:369

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    80000e04:	fd043783          	ld	a5,-48(s0)
    80000e08:	0087b703          	ld	a4,8(a5)
    80000e0c:	93818793          	addi	a5,gp,-1736 # 80004cb8 <xMinimumEverFreeBytesRemaining>
    80000e10:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:370
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    80000e14:	fd043783          	ld	a5,-48(s0)
    80000e18:	0087b703          	ld	a4,8(a5)
    80000e1c:	93018793          	addi	a5,gp,-1744 # 80004cb0 <xFreeBytesRemaining>
    80000e20:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:373

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    80000e24:	94018793          	addi	a5,gp,-1728 # 80004cc0 <xBlockAllocatedBit>
    80000e28:	fff00713          	li	a4,-1
    80000e2c:	03f71713          	slli	a4,a4,0x3f
    80000e30:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:374
}
    80000e34:	00000013          	nop
    80000e38:	02813403          	ld	s0,40(sp)
    80000e3c:	03010113          	addi	sp,sp,48
    80000e40:	00008067          	ret

0000000080000e44 <prvInsertBlockIntoFreeList>:
prvInsertBlockIntoFreeList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:378
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    80000e44:	fd010113          	addi	sp,sp,-48
    80000e48:	02813423          	sd	s0,40(sp)
    80000e4c:	03010413          	addi	s0,sp,48
    80000e50:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:384
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    80000e54:	00104797          	auipc	a5,0x104
    80000e58:	f1c78793          	addi	a5,a5,-228 # 80104d70 <xStart>
    80000e5c:	fef43423          	sd	a5,-24(s0)
    80000e60:	0100006f          	j	80000e70 <prvInsertBlockIntoFreeList+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:384 (discriminator 3)
    80000e64:	fe843783          	ld	a5,-24(s0)
    80000e68:	0007b783          	ld	a5,0(a5)
    80000e6c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:384 (discriminator 1)
    80000e70:	fe843783          	ld	a5,-24(s0)
    80000e74:	0007b783          	ld	a5,0(a5)
    80000e78:	fd843703          	ld	a4,-40(s0)
    80000e7c:	fee7e4e3          	bltu	a5,a4,80000e64 <prvInsertBlockIntoFreeList+0x20>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:391
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    80000e80:	fe843783          	ld	a5,-24(s0)
    80000e84:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:392
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    80000e88:	fe843783          	ld	a5,-24(s0)
    80000e8c:	0087b783          	ld	a5,8(a5)
    80000e90:	fe043703          	ld	a4,-32(s0)
    80000e94:	00f707b3          	add	a5,a4,a5
    80000e98:	fd843703          	ld	a4,-40(s0)
    80000e9c:	02f71463          	bne	a4,a5,80000ec4 <prvInsertBlockIntoFreeList+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:394
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    80000ea0:	fe843783          	ld	a5,-24(s0)
    80000ea4:	0087b703          	ld	a4,8(a5)
    80000ea8:	fd843783          	ld	a5,-40(s0)
    80000eac:	0087b783          	ld	a5,8(a5)
    80000eb0:	00f70733          	add	a4,a4,a5
    80000eb4:	fe843783          	ld	a5,-24(s0)
    80000eb8:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:395
		pxBlockToInsert = pxIterator;
    80000ebc:	fe843783          	ld	a5,-24(s0)
    80000ec0:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:404
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    80000ec4:	fd843783          	ld	a5,-40(s0)
    80000ec8:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:405
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    80000ecc:	fd843783          	ld	a5,-40(s0)
    80000ed0:	0087b783          	ld	a5,8(a5)
    80000ed4:	fe043703          	ld	a4,-32(s0)
    80000ed8:	00f70733          	add	a4,a4,a5
    80000edc:	fe843783          	ld	a5,-24(s0)
    80000ee0:	0007b783          	ld	a5,0(a5)
    80000ee4:	06f71263          	bne	a4,a5,80000f48 <prvInsertBlockIntoFreeList+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:407
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    80000ee8:	fe843783          	ld	a5,-24(s0)
    80000eec:	0007b703          	ld	a4,0(a5)
    80000ef0:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000ef4:	0007b783          	ld	a5,0(a5)
    80000ef8:	02f70e63          	beq	a4,a5,80000f34 <prvInsertBlockIntoFreeList+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:410
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    80000efc:	fd843783          	ld	a5,-40(s0)
    80000f00:	0087b703          	ld	a4,8(a5)
    80000f04:	fe843783          	ld	a5,-24(s0)
    80000f08:	0007b783          	ld	a5,0(a5)
    80000f0c:	0087b783          	ld	a5,8(a5)
    80000f10:	00f70733          	add	a4,a4,a5
    80000f14:	fd843783          	ld	a5,-40(s0)
    80000f18:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:411
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    80000f1c:	fe843783          	ld	a5,-24(s0)
    80000f20:	0007b783          	ld	a5,0(a5)
    80000f24:	0007b703          	ld	a4,0(a5)
    80000f28:	fd843783          	ld	a5,-40(s0)
    80000f2c:	00e7b023          	sd	a4,0(a5)
    80000f30:	0280006f          	j	80000f58 <prvInsertBlockIntoFreeList+0x114>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:415
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    80000f34:	92818793          	addi	a5,gp,-1752 # 80004ca8 <pxEnd>
    80000f38:	0007b703          	ld	a4,0(a5)
    80000f3c:	fd843783          	ld	a5,-40(s0)
    80000f40:	00e7b023          	sd	a4,0(a5)
    80000f44:	0140006f          	j	80000f58 <prvInsertBlockIntoFreeList+0x114>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:420
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    80000f48:	fe843783          	ld	a5,-24(s0)
    80000f4c:	0007b703          	ld	a4,0(a5)
    80000f50:	fd843783          	ld	a5,-40(s0)
    80000f54:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:427

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    80000f58:	fe843703          	ld	a4,-24(s0)
    80000f5c:	fd843783          	ld	a5,-40(s0)
    80000f60:	00f70863          	beq	a4,a5,80000f70 <prvInsertBlockIntoFreeList+0x12c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:429
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    80000f64:	fe843783          	ld	a5,-24(s0)
    80000f68:	fd843703          	ld	a4,-40(s0)
    80000f6c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/MemMang/heap_4.c:435
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    80000f70:	00000013          	nop
    80000f74:	02813403          	ld	s0,40(sp)
    80000f78:	03010113          	addi	sp,sp,48
    80000f7c:	00008067          	ret

0000000080000f80 <vPortSetupTimerInterrupt>:
vPortSetupTimerInterrupt():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:109
/*-----------------------------------------------------------*/

#if( configCLINT_BASE_ADDRESS != 0 )

	void vPortSetupTimerInterrupt( void )
	{
    80000f80:	fe010113          	addi	sp,sp,-32
    80000f84:	00813c23          	sd	s0,24(sp)
    80000f88:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:111
	uint64_t ulCurrentTime;
	volatile uint64_t * const pulTime = ( volatile uint64_t * const ) ( configCLINT_BASE_ADDRESS + 0x580 );
    80000f8c:	200107b7          	lui	a5,0x20010
    80000f90:	58078793          	addi	a5,a5,1408 # 20010580 <HEAP_SIZE+0x19e62580>
    80000f94:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:115 (discriminator 1)

		do
		{
			ulCurrentTime = *pulTime;
    80000f98:	fe843783          	ld	a5,-24(s0)
    80000f9c:	0007b783          	ld	a5,0(a5)
    80000fa0:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:116 (discriminator 1)
		} while( ulCurrentTime != *pulTime);
    80000fa4:	fe843783          	ld	a5,-24(s0)
    80000fa8:	0007b783          	ld	a5,0(a5)
    80000fac:	fe043703          	ld	a4,-32(s0)
    80000fb0:	fef714e3          	bne	a4,a5,80000f98 <vPortSetupTimerInterrupt+0x18>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:118

		ullNextTime = ( uint64_t ) ulCurrentTime;
    80000fb4:	94818793          	addi	a5,gp,-1720 # 80004cc8 <ullNextTime>
    80000fb8:	fe043703          	ld	a4,-32(s0)
    80000fbc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:119
		ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    80000fc0:	94818793          	addi	a5,gp,-1720 # 80004cc8 <ullNextTime>
    80000fc4:	0007b703          	ld	a4,0(a5)
    80000fc8:	000067b7          	lui	a5,0x6
    80000fcc:	1a878793          	addi	a5,a5,424 # 61a8 <STACK_SIZE-0x9c3e58>
    80000fd0:	00f70733          	add	a4,a4,a5
    80000fd4:	94818793          	addi	a5,gp,-1720 # 80004cc8 <ullNextTime>
    80000fd8:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:120
		*pullMachineTimerCompareRegister = ullNextTime;
    80000fdc:	200107b7          	lui	a5,0x20010
    80000fe0:	48078793          	addi	a5,a5,1152 # 20010480 <HEAP_SIZE+0x19e62480>
    80000fe4:	94818713          	addi	a4,gp,-1720 # 80004cc8 <ullNextTime>
    80000fe8:	00073703          	ld	a4,0(a4)
    80000fec:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:123

		/* Prepare the time to use after the next tick interrupt. */
		ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    80000ff0:	94818793          	addi	a5,gp,-1720 # 80004cc8 <ullNextTime>
    80000ff4:	0007b703          	ld	a4,0(a5)
    80000ff8:	000067b7          	lui	a5,0x6
    80000ffc:	1a878793          	addi	a5,a5,424 # 61a8 <STACK_SIZE-0x9c3e58>
    80001000:	00f70733          	add	a4,a4,a5
    80001004:	94818793          	addi	a5,gp,-1720 # 80004cc8 <ullNextTime>
    80001008:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:124
	}
    8000100c:	00000013          	nop
    80001010:	01813403          	ld	s0,24(sp)
    80001014:	02010113          	addi	sp,sp,32
    80001018:	00008067          	ret

000000008000101c <xPortStartScheduler>:
xPortStartScheduler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:130

#endif /* ( configCLINT_BASE_ADDRESS != 0 ) */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    8000101c:	fe010113          	addi	sp,sp,-32
    80001020:	00113c23          	sd	ra,24(sp)
    80001024:	00813823          	sd	s0,16(sp)
    80001028:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:135
extern void xPortStartFirstTask( void );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t mtvec = 0;
    8000102c:	fe042623          	sw	zero,-20(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:139

		/* Check the least significant two bits of mtvec are 00 - indicating
		single vector mode. */
		__asm volatile( "csrr %0, mtvec" : "=r"( mtvec ) );
    80001030:	305027f3          	csrr	a5,mtvec
    80001034:	fef42623          	sw	a5,-20(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:140
		configASSERT( ( mtvec & 0x03UL ) == 0 );
    80001038:	fec42783          	lw	a5,-20(s0)
    8000103c:	0007879b          	sext.w	a5,a5
    80001040:	02079793          	slli	a5,a5,0x20
    80001044:	0207d793          	srli	a5,a5,0x20
    80001048:	0037f793          	andi	a5,a5,3
    8000104c:	00078863          	beqz	a5,8000105c <xPortStartScheduler+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:140 (discriminator 1)
    80001050:	30047073          	csrci	mstatus,8
    80001054:	00100073          	ebreak
    80001058:	0000006f          	j	80001058 <xPortStartScheduler+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:145

		/* Check alignment of the interrupt stack - which is the same as the
		stack that was being used by main() prior to the scheduler being
		started. */
		configASSERT( ( xISRStackTop & portBYTE_ALIGNMENT_MASK ) == 0 );
    8000105c:	00004797          	auipc	a5,0x4
    80001060:	b2478793          	addi	a5,a5,-1244 # 80004b80 <xISRStackTop>
    80001064:	0007b783          	ld	a5,0(a5)
    80001068:	0077f793          	andi	a5,a5,7
    8000106c:	00078863          	beqz	a5,8000107c <xPortStartScheduler+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:145 (discriminator 1)
    80001070:	30047073          	csrci	mstatus,8
    80001074:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:145 (discriminator 2)
    80001078:	0000006f          	j	80001078 <xPortStartScheduler+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:152
	#endif /* configASSERT_DEFINED */

	/* If there is a CLINT then it is ok to use the default implementation
	in this file, otherwise vPortSetupTimerInterrupt() must be implemented to
	configure whichever clock is to be used to generate the tick interrupt. */
	vPortSetupTimerInterrupt();
    8000107c:	f05ff0ef          	jal	ra,80000f80 <vPortSetupTimerInterrupt>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:159
	#if( configCLINT_BASE_ADDRESS != 0 )
	{
		/* Enable mtime and external interrupts.  1<<7 for timer interrupt, 1<<11
		for external interrupt.  _RB_ What happens here when mtime is not present as
		with pulpino? */
		__asm volatile( "csrs mie, %0" :: "r"(0x880) );
    80001080:	000017b7          	lui	a5,0x1
    80001084:	8807879b          	addiw	a5,a5,-1920
    80001088:	3047a073          	csrs	mie,a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:168
		/* Enable external interrupts. */
		__asm volatile( "csrs mie, %0" :: "r"(0x800) );
	}
	#endif /* configCLINT_BASE_ADDRESS */

	xPortStartFirstTask();
    8000108c:	274000ef          	jal	ra,80001300 <xPortStartFirstTask>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:172

	/* Should not get here as after calling xPortStartFirstTask() only tasks
	should be executing. */
	return pdFAIL;
    80001090:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/port.c:173
}
    80001094:	00078513          	mv	a0,a5
    80001098:	01813083          	ld	ra,24(sp)
    8000109c:	01013403          	ld	s0,16(sp)
    800010a0:	02010113          	addi	sp,sp,32
    800010a4:	00008067          	ret
	...

0000000080001100 <freertos_risc_v_trap_handler>:
freertos_risc_v_trap_handler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:106
/*-----------------------------------------------------------*/

.align 8
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
    80001100:	f1010113          	addi	sp,sp,-240
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:107
	store_x x1, 1 * portWORD_SIZE( sp )
    80001104:	00113423          	sd	ra,8(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:108
	store_x x5, 2 * portWORD_SIZE( sp )
    80001108:	00513823          	sd	t0,16(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:109
	store_x x6, 3 * portWORD_SIZE( sp )
    8000110c:	00613c23          	sd	t1,24(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:110
	store_x x7, 4 * portWORD_SIZE( sp )
    80001110:	02713023          	sd	t2,32(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:111
	store_x x8, 5 * portWORD_SIZE( sp )
    80001114:	02813423          	sd	s0,40(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:112
	store_x x9, 6 * portWORD_SIZE( sp )
    80001118:	02913823          	sd	s1,48(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:113
	store_x x10, 7 * portWORD_SIZE( sp )
    8000111c:	02a13c23          	sd	a0,56(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:114
	store_x x11, 8 * portWORD_SIZE( sp )
    80001120:	04b13023          	sd	a1,64(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:115
	store_x x12, 9 * portWORD_SIZE( sp )
    80001124:	04c13423          	sd	a2,72(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:116
	store_x x13, 10 * portWORD_SIZE( sp )
    80001128:	04d13823          	sd	a3,80(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:117
	store_x x14, 11 * portWORD_SIZE( sp )
    8000112c:	04e13c23          	sd	a4,88(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:118
	store_x x15, 12 * portWORD_SIZE( sp )
    80001130:	06f13023          	sd	a5,96(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:119
	store_x x16, 13 * portWORD_SIZE( sp )
    80001134:	07013423          	sd	a6,104(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:120
	store_x x17, 14 * portWORD_SIZE( sp )
    80001138:	07113823          	sd	a7,112(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:121
	store_x x18, 15 * portWORD_SIZE( sp )
    8000113c:	07213c23          	sd	s2,120(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:122
	store_x x19, 16 * portWORD_SIZE( sp )
    80001140:	09313023          	sd	s3,128(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:123
	store_x x20, 17 * portWORD_SIZE( sp )
    80001144:	09413423          	sd	s4,136(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:124
	store_x x21, 18 * portWORD_SIZE( sp )
    80001148:	09513823          	sd	s5,144(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:125
	store_x x22, 19 * portWORD_SIZE( sp )
    8000114c:	09613c23          	sd	s6,152(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:126
	store_x x23, 20 * portWORD_SIZE( sp )
    80001150:	0b713023          	sd	s7,160(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:127
	store_x x24, 21 * portWORD_SIZE( sp )
    80001154:	0b813423          	sd	s8,168(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:128
	store_x x25, 22 * portWORD_SIZE( sp )
    80001158:	0b913823          	sd	s9,176(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:129
	store_x x26, 23 * portWORD_SIZE( sp )
    8000115c:	0ba13c23          	sd	s10,184(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:130
	store_x x27, 24 * portWORD_SIZE( sp )
    80001160:	0db13023          	sd	s11,192(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:131
	store_x x28, 25 * portWORD_SIZE( sp )
    80001164:	0dc13423          	sd	t3,200(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:132
	store_x x29, 26 * portWORD_SIZE( sp )
    80001168:	0dd13823          	sd	t4,208(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:133
	store_x x30, 27 * portWORD_SIZE( sp )
    8000116c:	0de13c23          	sd	t5,216(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:134
	store_x x31, 28 * portWORD_SIZE( sp )
    80001170:	0ff13023          	sd	t6,224(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:136

	csrr t0, mstatus					/* Required for MPIE bit. */
    80001174:	300022f3          	csrr	t0,mstatus
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:137
	store_x t0, 29 * portWORD_SIZE( sp )
    80001178:	0e513423          	sd	t0,232(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:141

	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
    8000117c:	9501b283          	ld	t0,-1712(gp) # 80004cd0 <pxCurrentTCB>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:142
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
    80001180:	0022b023          	sd	sp,0(t0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:144

	csrr a0, mcause
    80001184:	34202573          	csrr	a0,mcause
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:145
	csrr a1, mepc
    80001188:	341025f3          	csrr	a1,mepc

000000008000118c <test_if_asynchronous>:
test_if_asynchronous():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:148

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
    8000118c:	03f55613          	srli	a2,a0,0x3f
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:149
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
    80001190:	06060663          	beqz	a2,800011fc <handle_synchronous>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:150
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
    80001194:	00b13023          	sd	a1,0(sp)

0000000080001198 <handle_asynchronous>:
handle_asynchronous():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:158

#if( portasmHAS_CLINT != 0 )

	test_if_mtimer:						/* If there is a CLINT then the mtimer is used to generate the tick interrupt. */

		addi t0, x0, 1
    80001198:	00100293          	li	t0,1
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:160

		slli t0, t0, __riscv_xlen - 1   /* LSB is already set, shift into MSB.  Shift 31 on 32-bit or 63 on 64-bit cores. */
    8000119c:	03f29293          	slli	t0,t0,0x3f
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:161
		addi t1, t0, 7					/* 0x8000[]0007 == machine timer interrupt. */
    800011a0:	00728313          	addi	t1,t0,7
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:162
		bne a0, t1, test_if_external_interrupt
    800011a4:	04651063          	bne	a0,t1,800011e4 <test_if_external_interrupt>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:164

		load_x t0, pullMachineTimerCompareRegister  /* Load address of compare register into t0. */
    800011a8:	00004297          	auipc	t0,0x4
    800011ac:	9e82b283          	ld	t0,-1560(t0) # 80004b90 <pullMachineTimerCompareRegister>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:165
		load_x t1, pullNextTime  		/* Load the address of ullNextTime into t1. */
    800011b0:	8181b303          	ld	t1,-2024(gp) # 80004b98 <pullNextTime>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:186
		#endif /* __riscv_xlen == 32 */

		#if( __riscv_xlen == 64 )

			/* Update the 64-bit mtimer compare match value. */
			ld t2, 0(t1)			 	/* Load ullNextTime into t2. */
    800011b4:	00033383          	ld	t2,0(t1)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:187
			sd t2, 0(t0)				/* Store ullNextTime into compare register. */
    800011b8:	0072b023          	sd	t2,0(t0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:188
			ld t0, uxTimerIncrementsForOneTick  /* Load the value of ullTimerIncrementForOneTick into t0 (could this be optimized by storing in an array next to pullNextTime?). */
    800011bc:	00004297          	auipc	t0,0x4
    800011c0:	9cc2b283          	ld	t0,-1588(t0) # 80004b88 <uxTimerIncrementsForOneTick>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:189
			add t4, t0, t2				/* Add ullNextTime to the timer increments for one tick. */
    800011c4:	00728eb3          	add	t4,t0,t2
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:190
			sd t4, 0(t1)				/* Store ullNextTime. */
    800011c8:	01d33023          	sd	t4,0(t1)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:194

		#endif /* __riscv_xlen == 64 */

		load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
    800011cc:	00004117          	auipc	sp,0x4
    800011d0:	9b413103          	ld	sp,-1612(sp) # 80004b80 <xISRStackTop>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:195
		jal xTaskIncrementTick
    800011d4:	259010ef          	jal	ra,80002c2c <xTaskIncrementTick>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:196
		beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
    800011d8:	04050a63          	beqz	a0,8000122c <processed_source>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:197
		jal vTaskSwitchContext
    800011dc:	491010ef          	jal	ra,80002e6c <vTaskSwitchContext>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:198
		j processed_source
    800011e0:	04c0006f          	j	8000122c <processed_source>

00000000800011e4 <test_if_external_interrupt>:
test_if_external_interrupt():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:201

	test_if_external_interrupt:			/* If there is a CLINT and the mtimer interrupt is not pending then check to see if an external interrupt is pending. */
		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
    800011e4:	00430313          	addi	t1,t1,4
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:202
		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */
    800011e8:	02651e63          	bne	a0,t1,80001224 <as_yet_unhandled>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:206

#endif /* portasmHAS_CLINT */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
    800011ec:	00004117          	auipc	sp,0x4
    800011f0:	99413103          	ld	sp,-1644(sp) # 80004b80 <xISRStackTop>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:207
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
    800011f4:	ac8ff0ef          	jal	ra,800004bc <handle_m_ext_interrupt>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:208
	j processed_source
    800011f8:	0340006f          	j	8000122c <processed_source>

00000000800011fc <handle_synchronous>:
handle_synchronous():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:211

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
    800011fc:	00458593          	addi	a1,a1,4
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:212
	store_x a1, 0( sp )					/* Save updated exception return address. */
    80001200:	00b13023          	sd	a1,0(sp)

0000000080001204 <test_if_environment_call>:
test_if_environment_call():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:215

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
    80001204:	00b00293          	li	t0,11
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:216
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
    80001208:	00551a63          	bne	a0,t0,8000121c <is_exception>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:217
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
    8000120c:	00004117          	auipc	sp,0x4
    80001210:	97413103          	ld	sp,-1676(sp) # 80004b80 <xISRStackTop>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:218
	jal vTaskSwitchContext
    80001214:	459010ef          	jal	ra,80002e6c <vTaskSwitchContext>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:219
	j processed_source
    80001218:	0140006f          	j	8000122c <processed_source>

000000008000121c <is_exception>:
is_exception():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:222

is_exception:
	ebreak
    8000121c:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:223
	j is_exception
    80001220:	ffdff06f          	j	8000121c <is_exception>

0000000080001224 <as_yet_unhandled>:
as_yet_unhandled():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:226

as_yet_unhandled:
	ebreak
    80001224:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:227
	j as_yet_unhandled
    80001228:	ffdff06f          	j	80001224 <as_yet_unhandled>

000000008000122c <processed_source>:
processed_source():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:230

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
    8000122c:	9501b303          	ld	t1,-1712(gp) # 80004cd0 <pxCurrentTCB>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:231
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
    80001230:	00033103          	ld	sp,0(t1)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:234

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
    80001234:	00013283          	ld	t0,0(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:235
	csrw mepc, t0
    80001238:	34129073          	csrw	mepc,t0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:240

	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
    8000123c:	0e813283          	ld	t0,232(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:241
	csrw mstatus, t0						/* Required for MPIE bit. */
    80001240:	30029073          	csrw	mstatus,t0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:243

	load_x  x1, 1 * portWORD_SIZE( sp )
    80001244:	00813083          	ld	ra,8(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:244
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
    80001248:	01013283          	ld	t0,16(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:245
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
    8000124c:	01813303          	ld	t1,24(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:246
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
    80001250:	02013383          	ld	t2,32(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:247
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
    80001254:	02813403          	ld	s0,40(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:248
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
    80001258:	03013483          	ld	s1,48(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:249
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
    8000125c:	03813503          	ld	a0,56(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:250
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
    80001260:	04013583          	ld	a1,64(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:251
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
    80001264:	04813603          	ld	a2,72(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:252
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
    80001268:	05013683          	ld	a3,80(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:253
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
    8000126c:	05813703          	ld	a4,88(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:254
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
    80001270:	06013783          	ld	a5,96(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:255
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
    80001274:	06813803          	ld	a6,104(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:256
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
    80001278:	07013883          	ld	a7,112(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:257
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
    8000127c:	07813903          	ld	s2,120(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:258
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
    80001280:	08013983          	ld	s3,128(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:259
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
    80001284:	08813a03          	ld	s4,136(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:260
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
    80001288:	09013a83          	ld	s5,144(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:261
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
    8000128c:	09813b03          	ld	s6,152(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:262
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
    80001290:	0a013b83          	ld	s7,160(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:263
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
    80001294:	0a813c03          	ld	s8,168(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:264
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
    80001298:	0b013c83          	ld	s9,176(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:265
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
    8000129c:	0b813d03          	ld	s10,184(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:266
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
    800012a0:	0c013d83          	ld	s11,192(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:267
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
    800012a4:	0c813e03          	ld	t3,200(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:268
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
    800012a8:	0d013e83          	ld	t4,208(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:269
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
    800012ac:	0d813f03          	ld	t5,216(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:270
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
    800012b0:	0e013f83          	ld	t6,224(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:271
	addi sp, sp, portCONTEXT_SIZE
    800012b4:	0f010113          	addi	sp,sp,240
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:273

	mret
    800012b8:	30200073          	mret
    800012bc:	00000013          	nop
    800012c0:	00000013          	nop
    800012c4:	00000013          	nop
    800012c8:	00000013          	nop
    800012cc:	00000013          	nop
    800012d0:	00000013          	nop
    800012d4:	00000013          	nop
    800012d8:	00000013          	nop
    800012dc:	00000013          	nop
    800012e0:	00000013          	nop
    800012e4:	00000013          	nop
    800012e8:	00000013          	nop
    800012ec:	00000013          	nop
    800012f0:	00000013          	nop
    800012f4:	00000013          	nop
    800012f8:	00000013          	nop
    800012fc:	00000013          	nop

0000000080001300 <xPortStartFirstTask>:
xPortStartFirstTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:285

#if( portasmHAS_CLINT != 0 )
	/* If there is a clint then interrupts can branch directly to the FreeRTOS
	trap handler.  Otherwise the interrupt controller will need to be configured
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
    80001300:	00000297          	auipc	t0,0x0
    80001304:	e0028293          	addi	t0,t0,-512 # 80001100 <freertos_risc_v_trap_handler>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:286
	csrw mtvec, t0
    80001308:	30529073          	csrw	mtvec,t0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:289
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
    8000130c:	9501b103          	ld	sp,-1712(gp) # 80004cd0 <pxCurrentTCB>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:290
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
    80001310:	00013103          	ld	sp,0(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:292

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
    80001314:	00013083          	ld	ra,0(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:296

	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */

	load_x  t0, 29 * portWORD_SIZE( sp )	/* mstatus */
    80001318:	0e813283          	ld	t0,232(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:297
	csrrw  x0, mstatus, t0					/* Interrupts enabled from here! */
    8000131c:	30029073          	csrw	mstatus,t0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:299

	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
    80001320:	01013283          	ld	t0,16(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:300
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
    80001324:	01813303          	ld	t1,24(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:301
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
    80001328:	02013383          	ld	t2,32(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:302
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
    8000132c:	02813403          	ld	s0,40(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:303
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
    80001330:	03013483          	ld	s1,48(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:304
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
    80001334:	03813503          	ld	a0,56(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:305
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
    80001338:	04013583          	ld	a1,64(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:306
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
    8000133c:	04813603          	ld	a2,72(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:307
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
    80001340:	05013683          	ld	a3,80(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:308
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
    80001344:	05813703          	ld	a4,88(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:309
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
    80001348:	06013783          	ld	a5,96(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:310
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
    8000134c:	06813803          	ld	a6,104(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:311
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
    80001350:	07013883          	ld	a7,112(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:312
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
    80001354:	07813903          	ld	s2,120(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:313
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
    80001358:	08013983          	ld	s3,128(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:314
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
    8000135c:	08813a03          	ld	s4,136(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:315
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
    80001360:	09013a83          	ld	s5,144(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:316
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
    80001364:	09813b03          	ld	s6,152(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:317
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
    80001368:	0a013b83          	ld	s7,160(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:318
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
    8000136c:	0a813c03          	ld	s8,168(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:319
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
    80001370:	0b013c83          	ld	s9,176(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:320
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
    80001374:	0b813d03          	ld	s10,184(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:321
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
    80001378:	0c013d83          	ld	s11,192(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:322
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
    8000137c:	0c813e03          	ld	t3,200(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:323
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
    80001380:	0d013e83          	ld	t4,208(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:324
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
    80001384:	0d813f03          	ld	t5,216(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:325
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
    80001388:	0e013f83          	ld	t6,224(sp)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:326
	addi	sp, sp, portCONTEXT_SIZE
    8000138c:	0f010113          	addi	sp,sp,240
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:327
	ret
    80001390:	00008067          	ret
    80001394:	00000013          	nop
    80001398:	00000013          	nop
    8000139c:	00000013          	nop
    800013a0:	00000013          	nop
    800013a4:	00000013          	nop
    800013a8:	00000013          	nop
    800013ac:	00000013          	nop
    800013b0:	00000013          	nop
    800013b4:	00000013          	nop
    800013b8:	00000013          	nop
    800013bc:	00000013          	nop
    800013c0:	00000013          	nop
    800013c4:	00000013          	nop
    800013c8:	00000013          	nop
    800013cc:	00000013          	nop
    800013d0:	00000013          	nop
    800013d4:	00000013          	nop
    800013d8:	00000013          	nop
    800013dc:	00000013          	nop
    800013e0:	00000013          	nop
    800013e4:	00000013          	nop
    800013e8:	00000013          	nop
    800013ec:	00000013          	nop
    800013f0:	00000013          	nop
    800013f4:	00000013          	nop
    800013f8:	00000013          	nop
    800013fc:	00000013          	nop

0000000080001400 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:397
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
    80001400:	300022f3          	csrr	t0,mstatus
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:398
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
    80001404:	18800313          	li	t1,392
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:399
	slli t1, t1, 4
    80001408:	00431313          	slli	t1,t1,0x4
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:400
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
    8000140c:	0062e2b3          	or	t0,t0,t1
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:402

	addi a0, a0, -portWORD_SIZE
    80001410:	ff850513          	addi	a0,a0,-8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:403
	store_x t0, 0(a0)					/* mstatus onto the stack. */
    80001414:	00553023          	sd	t0,0(a0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:404
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
    80001418:	f5050513          	addi	a0,a0,-176
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:405
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
    8000141c:	00c53023          	sd	a2,0(a0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:406
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
    80001420:	fd050513          	addi	a0,a0,-48
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:407
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
    80001424:	00053023          	sd	zero,0(a0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:408
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
    80001428:	00000293          	li	t0,0

000000008000142c <chip_specific_stack_frame>:
chip_specific_stack_frame():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:410
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
    8000142c:	00028a63          	beqz	t0,80001440 <chip_specific_stack_frame+0x14>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:411
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
    80001430:	ff850513          	addi	a0,a0,-8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:412
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
    80001434:	00053023          	sd	zero,0(a0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:413
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
    80001438:	fff28293          	addi	t0,t0,-1
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:414
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
    8000143c:	ff1ff06f          	j	8000142c <chip_specific_stack_frame>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:416
1:
	addi a0, a0, -portWORD_SIZE
    80001440:	ff850513          	addi	a0,a0,-8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:417
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
    80001444:	00b53023          	sd	a1,0(a0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/portable/GCC/RISC-V/portASM.S:418
	ret
    80001448:	00008067          	ret
	...

00000000800014ac <vListInitialise>:
vListInitialise():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:38
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    800014ac:	fe010113          	addi	sp,sp,-32
    800014b0:	00813c23          	sd	s0,24(sp)
    800014b4:	02010413          	addi	s0,sp,32
    800014b8:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:42
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    800014bc:	fe843783          	ld	a5,-24(s0)
    800014c0:	01078713          	addi	a4,a5,16 # 1010 <STACK_SIZE-0x9c8ff0>
    800014c4:	fe843783          	ld	a5,-24(s0)
    800014c8:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:46

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    800014cc:	fe843783          	ld	a5,-24(s0)
    800014d0:	fff00713          	li	a4,-1
    800014d4:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:50

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    800014d8:	fe843783          	ld	a5,-24(s0)
    800014dc:	01078713          	addi	a4,a5,16
    800014e0:	fe843783          	ld	a5,-24(s0)
    800014e4:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:51
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    800014e8:	fe843783          	ld	a5,-24(s0)
    800014ec:	01078713          	addi	a4,a5,16
    800014f0:	fe843783          	ld	a5,-24(s0)
    800014f4:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:53

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    800014f8:	fe843783          	ld	a5,-24(s0)
    800014fc:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:59

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    80001500:	00000013          	nop
    80001504:	01813403          	ld	s0,24(sp)
    80001508:	02010113          	addi	sp,sp,32
    8000150c:	00008067          	ret

0000000080001510 <vListInitialiseItem>:
vListInitialiseItem():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:63
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    80001510:	fe010113          	addi	sp,sp,-32
    80001514:	00813c23          	sd	s0,24(sp)
    80001518:	02010413          	addi	s0,sp,32
    8000151c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:65
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    80001520:	fe843783          	ld	a5,-24(s0)
    80001524:	0207b023          	sd	zero,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:71

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    80001528:	00000013          	nop
    8000152c:	01813403          	ld	s0,24(sp)
    80001530:	02010113          	addi	sp,sp,32
    80001534:	00008067          	ret

0000000080001538 <vListInsertEnd>:
vListInsertEnd():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:75
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    80001538:	fd010113          	addi	sp,sp,-48
    8000153c:	02813423          	sd	s0,40(sp)
    80001540:	03010413          	addi	s0,sp,48
    80001544:	fca43c23          	sd	a0,-40(s0)
    80001548:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:76
ListItem_t * const pxIndex = pxList->pxIndex;
    8000154c:	fd843783          	ld	a5,-40(s0)
    80001550:	0087b783          	ld	a5,8(a5)
    80001554:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:87
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    80001558:	fd043783          	ld	a5,-48(s0)
    8000155c:	fe843703          	ld	a4,-24(s0)
    80001560:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    80001564:	fe843783          	ld	a5,-24(s0)
    80001568:	0107b703          	ld	a4,16(a5)
    8000156c:	fd043783          	ld	a5,-48(s0)
    80001570:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    80001574:	fe843783          	ld	a5,-24(s0)
    80001578:	0107b783          	ld	a5,16(a5)
    8000157c:	fd043703          	ld	a4,-48(s0)
    80001580:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
    80001584:	fe843783          	ld	a5,-24(s0)
    80001588:	fd043703          	ld	a4,-48(s0)
    8000158c:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:97

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    80001590:	fd043783          	ld	a5,-48(s0)
    80001594:	fd843703          	ld	a4,-40(s0)
    80001598:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:99

	( pxList->uxNumberOfItems )++;
    8000159c:	fd843783          	ld	a5,-40(s0)
    800015a0:	0007b783          	ld	a5,0(a5)
    800015a4:	00178713          	addi	a4,a5,1
    800015a8:	fd843783          	ld	a5,-40(s0)
    800015ac:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:100
}
    800015b0:	00000013          	nop
    800015b4:	02813403          	ld	s0,40(sp)
    800015b8:	03010113          	addi	sp,sp,48
    800015bc:	00008067          	ret

00000000800015c0 <vListInsert>:
vListInsert():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:104
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    800015c0:	fd010113          	addi	sp,sp,-48
    800015c4:	02813423          	sd	s0,40(sp)
    800015c8:	03010413          	addi	s0,sp,48
    800015cc:	fca43c23          	sd	a0,-40(s0)
    800015d0:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:106
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    800015d4:	fd043783          	ld	a5,-48(s0)
    800015d8:	0007b783          	ld	a5,0(a5)
    800015dc:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:122
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    800015e0:	fe043703          	ld	a4,-32(s0)
    800015e4:	fff00793          	li	a5,-1
    800015e8:	00f71a63          	bne	a4,a5,800015fc <vListInsert+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:124
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    800015ec:	fd843783          	ld	a5,-40(s0)
    800015f0:	0207b783          	ld	a5,32(a5)
    800015f4:	fef43423          	sd	a5,-24(s0)
    800015f8:	0340006f          	j	8000162c <vListInsert+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:150
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    800015fc:	fd843783          	ld	a5,-40(s0)
    80001600:	01078793          	addi	a5,a5,16
    80001604:	fef43423          	sd	a5,-24(s0)
    80001608:	0100006f          	j	80001618 <vListInsert+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:150 (discriminator 3)
    8000160c:	fe843783          	ld	a5,-24(s0)
    80001610:	0087b783          	ld	a5,8(a5)
    80001614:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:150 (discriminator 1)
    80001618:	fe843783          	ld	a5,-24(s0)
    8000161c:	0087b783          	ld	a5,8(a5)
    80001620:	0007b783          	ld	a5,0(a5)
    80001624:	fe043703          	ld	a4,-32(s0)
    80001628:	fef772e3          	bgeu	a4,a5,8000160c <vListInsert+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    8000162c:	fe843783          	ld	a5,-24(s0)
    80001630:	0087b703          	ld	a4,8(a5)
    80001634:	fd043783          	ld	a5,-48(s0)
    80001638:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    8000163c:	fd043783          	ld	a5,-48(s0)
    80001640:	0087b783          	ld	a5,8(a5)
    80001644:	fd043703          	ld	a4,-48(s0)
    80001648:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
    8000164c:	fd043783          	ld	a5,-48(s0)
    80001650:	fe843703          	ld	a4,-24(s0)
    80001654:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:160
	pxIterator->pxNext = pxNewListItem;
    80001658:	fe843783          	ld	a5,-24(s0)
    8000165c:	fd043703          	ld	a4,-48(s0)
    80001660:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:164

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    80001664:	fd043783          	ld	a5,-48(s0)
    80001668:	fd843703          	ld	a4,-40(s0)
    8000166c:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:166

	( pxList->uxNumberOfItems )++;
    80001670:	fd843783          	ld	a5,-40(s0)
    80001674:	0007b783          	ld	a5,0(a5)
    80001678:	00178713          	addi	a4,a5,1
    8000167c:	fd843783          	ld	a5,-40(s0)
    80001680:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:167
}
    80001684:	00000013          	nop
    80001688:	02813403          	ld	s0,40(sp)
    8000168c:	03010113          	addi	sp,sp,48
    80001690:	00008067          	ret

0000000080001694 <uxListRemove>:
uxListRemove():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:171
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    80001694:	fd010113          	addi	sp,sp,-48
    80001698:	02813423          	sd	s0,40(sp)
    8000169c:	03010413          	addi	s0,sp,48
    800016a0:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:174
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    800016a4:	fd843783          	ld	a5,-40(s0)
    800016a8:	0207b783          	ld	a5,32(a5)
    800016ac:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    800016b0:	fd843783          	ld	a5,-40(s0)
    800016b4:	0087b783          	ld	a5,8(a5)
    800016b8:	fd843703          	ld	a4,-40(s0)
    800016bc:	01073703          	ld	a4,16(a4)
    800016c0:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    800016c4:	fd843783          	ld	a5,-40(s0)
    800016c8:	0107b783          	ld	a5,16(a5)
    800016cc:	fd843703          	ld	a4,-40(s0)
    800016d0:	00873703          	ld	a4,8(a4)
    800016d4:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    800016d8:	fe843783          	ld	a5,-24(s0)
    800016dc:	0087b783          	ld	a5,8(a5)
    800016e0:	fd843703          	ld	a4,-40(s0)
    800016e4:	00f71a63          	bne	a4,a5,800016f8 <uxListRemove+0x64>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:185
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    800016e8:	fd843783          	ld	a5,-40(s0)
    800016ec:	0107b703          	ld	a4,16(a5)
    800016f0:	fe843783          	ld	a5,-24(s0)
    800016f4:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    800016f8:	fd843783          	ld	a5,-40(s0)
    800016fc:	0207b023          	sd	zero,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:193
	( pxList->uxNumberOfItems )--;
    80001700:	fe843783          	ld	a5,-24(s0)
    80001704:	0007b783          	ld	a5,0(a5)
    80001708:	fff78713          	addi	a4,a5,-1
    8000170c:	fe843783          	ld	a5,-24(s0)
    80001710:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:195

	return pxList->uxNumberOfItems;
    80001714:	fe843783          	ld	a5,-24(s0)
    80001718:	0007b783          	ld	a5,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/list.c:196
}
    8000171c:	00078513          	mv	a0,a5
    80001720:	02813403          	ld	s0,40(sp)
    80001724:	03010113          	addi	sp,sp,48
    80001728:	00008067          	ret

000000008000172c <xQueueGenericReset>:
xQueueGenericReset():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:256
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    8000172c:	fd010113          	addi	sp,sp,-48
    80001730:	02113423          	sd	ra,40(sp)
    80001734:	02813023          	sd	s0,32(sp)
    80001738:	03010413          	addi	s0,sp,48
    8000173c:	fca43c23          	sd	a0,-40(s0)
    80001740:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:257
Queue_t * const pxQueue = xQueue;
    80001744:	fd843783          	ld	a5,-40(s0)
    80001748:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:259

	configASSERT( pxQueue );
    8000174c:	fe843783          	ld	a5,-24(s0)
    80001750:	00079863          	bnez	a5,80001760 <xQueueGenericReset+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:259 (discriminator 1)
    80001754:	30047073          	csrci	mstatus,8
    80001758:	00100073          	ebreak
    8000175c:	0000006f          	j	8000175c <xQueueGenericReset+0x30>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:261

	taskENTER_CRITICAL();
    80001760:	0a0020ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:263
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    80001764:	fe843783          	ld	a5,-24(s0)
    80001768:	0007b703          	ld	a4,0(a5)
    8000176c:	fe843783          	ld	a5,-24(s0)
    80001770:	0787b683          	ld	a3,120(a5)
    80001774:	fe843783          	ld	a5,-24(s0)
    80001778:	0807b783          	ld	a5,128(a5)
    8000177c:	02f687b3          	mul	a5,a3,a5
    80001780:	00f70733          	add	a4,a4,a5
    80001784:	fe843783          	ld	a5,-24(s0)
    80001788:	00e7b823          	sd	a4,16(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:264
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    8000178c:	fe843783          	ld	a5,-24(s0)
    80001790:	0607b823          	sd	zero,112(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:265
		pxQueue->pcWriteTo = pxQueue->pcHead;
    80001794:	fe843783          	ld	a5,-24(s0)
    80001798:	0007b703          	ld	a4,0(a5)
    8000179c:	fe843783          	ld	a5,-24(s0)
    800017a0:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:266
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    800017a4:	fe843783          	ld	a5,-24(s0)
    800017a8:	0007b703          	ld	a4,0(a5)
    800017ac:	fe843783          	ld	a5,-24(s0)
    800017b0:	0787b783          	ld	a5,120(a5)
    800017b4:	fff78693          	addi	a3,a5,-1
    800017b8:	fe843783          	ld	a5,-24(s0)
    800017bc:	0807b783          	ld	a5,128(a5)
    800017c0:	02f687b3          	mul	a5,a3,a5
    800017c4:	00f70733          	add	a4,a4,a5
    800017c8:	fe843783          	ld	a5,-24(s0)
    800017cc:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:267
		pxQueue->cRxLock = queueUNLOCKED;
    800017d0:	fe843783          	ld	a5,-24(s0)
    800017d4:	fff00713          	li	a4,-1
    800017d8:	08e78423          	sb	a4,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:268
		pxQueue->cTxLock = queueUNLOCKED;
    800017dc:	fe843783          	ld	a5,-24(s0)
    800017e0:	fff00713          	li	a4,-1
    800017e4:	08e784a3          	sb	a4,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:270

		if( xNewQueue == pdFALSE )
    800017e8:	fd043783          	ld	a5,-48(s0)
    800017ec:	02079863          	bnez	a5,8000181c <xQueueGenericReset+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:277
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    800017f0:	fe843783          	ld	a5,-24(s0)
    800017f4:	0207b783          	ld	a5,32(a5)
    800017f8:	04078263          	beqz	a5,8000183c <xQueueGenericReset+0x110>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:279
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    800017fc:	fe843783          	ld	a5,-24(s0)
    80001800:	02078793          	addi	a5,a5,32
    80001804:	00078513          	mv	a0,a5
    80001808:	109010ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    8000180c:	00050793          	mv	a5,a0
    80001810:	02078663          	beqz	a5,8000183c <xQueueGenericReset+0x110>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:281
				{
					queueYIELD_IF_USING_PREEMPTION();
    80001814:	00000073          	ecall
    80001818:	0240006f          	j	8000183c <xQueueGenericReset+0x110>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:296
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    8000181c:	fe843783          	ld	a5,-24(s0)
    80001820:	02078793          	addi	a5,a5,32
    80001824:	00078513          	mv	a0,a5
    80001828:	c85ff0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:297
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    8000182c:	fe843783          	ld	a5,-24(s0)
    80001830:	04878793          	addi	a5,a5,72
    80001834:	00078513          	mv	a0,a5
    80001838:	c75ff0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:300
		}
	}
	taskEXIT_CRITICAL();
    8000183c:	00c020ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:304

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    80001840:	00100793          	li	a5,1
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:305
}
    80001844:	00078513          	mv	a0,a5
    80001848:	02813083          	ld	ra,40(sp)
    8000184c:	02013403          	ld	s0,32(sp)
    80001850:	03010113          	addi	sp,sp,48
    80001854:	00008067          	ret

0000000080001858 <xQueueGenericCreate>:
xQueueGenericCreate():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:369
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    80001858:	fb010113          	addi	sp,sp,-80
    8000185c:	04113423          	sd	ra,72(sp)
    80001860:	04813023          	sd	s0,64(sp)
    80001864:	05010413          	addi	s0,sp,80
    80001868:	fca43423          	sd	a0,-56(s0)
    8000186c:	fcb43023          	sd	a1,-64(s0)
    80001870:	00060793          	mv	a5,a2
    80001874:	faf40fa3          	sb	a5,-65(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:374
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    80001878:	fc843783          	ld	a5,-56(s0)
    8000187c:	00079863          	bnez	a5,8000188c <xQueueGenericCreate+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:374 (discriminator 1)
    80001880:	30047073          	csrci	mstatus,8
    80001884:	00100073          	ebreak
    80001888:	0000006f          	j	80001888 <xQueueGenericCreate+0x30>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:376

		if( uxItemSize == ( UBaseType_t ) 0 )
    8000188c:	fc043783          	ld	a5,-64(s0)
    80001890:	00079663          	bnez	a5,8000189c <xQueueGenericCreate+0x44>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:379
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    80001894:	fe043423          	sd	zero,-24(s0)
    80001898:	0140006f          	j	800018ac <xQueueGenericCreate+0x54>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:385
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8000189c:	fc843703          	ld	a4,-56(s0)
    800018a0:	fc043783          	ld	a5,-64(s0)
    800018a4:	02f707b3          	mul	a5,a4,a5
    800018a8:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:397
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    800018ac:	fe843783          	ld	a5,-24(s0)
    800018b0:	09078793          	addi	a5,a5,144
    800018b4:	00078513          	mv	a0,a5
    800018b8:	910ff0ef          	jal	ra,800009c8 <pvPortMalloc>
    800018bc:	fea43023          	sd	a0,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:399

		if( pxNewQueue != NULL )
    800018c0:	fe043783          	ld	a5,-32(s0)
    800018c4:	02078a63          	beqz	a5,800018f8 <xQueueGenericCreate+0xa0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:403
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    800018c8:	fe043783          	ld	a5,-32(s0)
    800018cc:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:404
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    800018d0:	fd843783          	ld	a5,-40(s0)
    800018d4:	09078793          	addi	a5,a5,144
    800018d8:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:415
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    800018dc:	fbf44783          	lbu	a5,-65(s0)
    800018e0:	fe043703          	ld	a4,-32(s0)
    800018e4:	00078693          	mv	a3,a5
    800018e8:	fd843603          	ld	a2,-40(s0)
    800018ec:	fc043583          	ld	a1,-64(s0)
    800018f0:	fc843503          	ld	a0,-56(s0)
    800018f4:	01c000ef          	jal	ra,80001910 <prvInitialiseNewQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:423
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    800018f8:	fe043783          	ld	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:424
	}
    800018fc:	00078513          	mv	a0,a5
    80001900:	04813083          	ld	ra,72(sp)
    80001904:	04013403          	ld	s0,64(sp)
    80001908:	05010113          	addi	sp,sp,80
    8000190c:	00008067          	ret

0000000080001910 <prvInitialiseNewQueue>:
prvInitialiseNewQueue():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:430

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    80001910:	fc010113          	addi	sp,sp,-64
    80001914:	02113c23          	sd	ra,56(sp)
    80001918:	02813823          	sd	s0,48(sp)
    8000191c:	04010413          	addi	s0,sp,64
    80001920:	fea43423          	sd	a0,-24(s0)
    80001924:	feb43023          	sd	a1,-32(s0)
    80001928:	fcc43c23          	sd	a2,-40(s0)
    8000192c:	00068793          	mv	a5,a3
    80001930:	fce43423          	sd	a4,-56(s0)
    80001934:	fcf40ba3          	sb	a5,-41(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:435
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    80001938:	fe043783          	ld	a5,-32(s0)
    8000193c:	00079a63          	bnez	a5,80001950 <prvInitialiseNewQueue+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:441
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    80001940:	fc843783          	ld	a5,-56(s0)
    80001944:	fc843703          	ld	a4,-56(s0)
    80001948:	00e7b023          	sd	a4,0(a5)
    8000194c:	0100006f          	j	8000195c <prvInitialiseNewQueue+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:446
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    80001950:	fc843783          	ld	a5,-56(s0)
    80001954:	fd843703          	ld	a4,-40(s0)
    80001958:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:451
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    8000195c:	fc843783          	ld	a5,-56(s0)
    80001960:	fe843703          	ld	a4,-24(s0)
    80001964:	06e7bc23          	sd	a4,120(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:452
	pxNewQueue->uxItemSize = uxItemSize;
    80001968:	fc843783          	ld	a5,-56(s0)
    8000196c:	fe043703          	ld	a4,-32(s0)
    80001970:	08e7b023          	sd	a4,128(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:453
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    80001974:	00100593          	li	a1,1
    80001978:	fc843503          	ld	a0,-56(s0)
    8000197c:	db1ff0ef          	jal	ra,8000172c <xQueueGenericReset>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:468
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    80001980:	00000013          	nop
    80001984:	03813083          	ld	ra,56(sp)
    80001988:	03013403          	ld	s0,48(sp)
    8000198c:	04010113          	addi	sp,sp,64
    80001990:	00008067          	ret

0000000080001994 <xQueueGenericSend>:
xQueueGenericSend():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:748

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    80001994:	fa010113          	addi	sp,sp,-96
    80001998:	04113c23          	sd	ra,88(sp)
    8000199c:	04813823          	sd	s0,80(sp)
    800019a0:	06010413          	addi	s0,sp,96
    800019a4:	faa43c23          	sd	a0,-72(s0)
    800019a8:	fab43823          	sd	a1,-80(s0)
    800019ac:	fac43423          	sd	a2,-88(s0)
    800019b0:	fad43023          	sd	a3,-96(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:749
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    800019b4:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:751
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    800019b8:	fb843783          	ld	a5,-72(s0)
    800019bc:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:753

	configASSERT( pxQueue );
    800019c0:	fe043783          	ld	a5,-32(s0)
    800019c4:	00079863          	bnez	a5,800019d4 <xQueueGenericSend+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:753 (discriminator 1)
    800019c8:	30047073          	csrci	mstatus,8
    800019cc:	00100073          	ebreak
    800019d0:	0000006f          	j	800019d0 <xQueueGenericSend+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    800019d4:	fb043783          	ld	a5,-80(s0)
    800019d8:	00079863          	bnez	a5,800019e8 <xQueueGenericSend+0x54>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 2)
    800019dc:	fe043783          	ld	a5,-32(s0)
    800019e0:	0807b783          	ld	a5,128(a5)
    800019e4:	00079663          	bnez	a5,800019f0 <xQueueGenericSend+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 3)
    800019e8:	00100793          	li	a5,1
    800019ec:	0080006f          	j	800019f4 <xQueueGenericSend+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 4)
    800019f0:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 6)
    800019f4:	00079863          	bnez	a5,80001a04 <xQueueGenericSend+0x70>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 7)
    800019f8:	30047073          	csrci	mstatus,8
    800019fc:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:754 (discriminator 2)
    80001a00:	0000006f          	j	80001a00 <xQueueGenericSend+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    80001a04:	fa043703          	ld	a4,-96(s0)
    80001a08:	00200793          	li	a5,2
    80001a0c:	00f71a63          	bne	a4,a5,80001a20 <xQueueGenericSend+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 2)
    80001a10:	fe043783          	ld	a5,-32(s0)
    80001a14:	0787b703          	ld	a4,120(a5)
    80001a18:	00100793          	li	a5,1
    80001a1c:	00f71663          	bne	a4,a5,80001a28 <xQueueGenericSend+0x94>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 3)
    80001a20:	00100793          	li	a5,1
    80001a24:	0080006f          	j	80001a2c <xQueueGenericSend+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 4)
    80001a28:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 6)
    80001a2c:	00079863          	bnez	a5,80001a3c <xQueueGenericSend+0xa8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 7)
    80001a30:	30047073          	csrci	mstatus,8
    80001a34:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:755 (discriminator 3)
    80001a38:	0000006f          	j	80001a38 <xQueueGenericSend+0xa4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    80001a3c:	3c1010ef          	jal	ra,800035fc <xTaskGetSchedulerState>
    80001a40:	00050793          	mv	a5,a0
    80001a44:	00079663          	bnez	a5,80001a50 <xQueueGenericSend+0xbc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 2)
    80001a48:	fa843783          	ld	a5,-88(s0)
    80001a4c:	00079663          	bnez	a5,80001a58 <xQueueGenericSend+0xc4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 3)
    80001a50:	00100793          	li	a5,1
    80001a54:	0080006f          	j	80001a5c <xQueueGenericSend+0xc8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 4)
    80001a58:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 6)
    80001a5c:	00079863          	bnez	a5,80001a6c <xQueueGenericSend+0xd8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 7)
    80001a60:	30047073          	csrci	mstatus,8
    80001a64:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:758 (discriminator 4)
    80001a68:	0000006f          	j	80001a68 <xQueueGenericSend+0xd4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:768
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    80001a6c:	595010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:774
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    80001a70:	fe043783          	ld	a5,-32(s0)
    80001a74:	0707b703          	ld	a4,112(a5)
    80001a78:	fe043783          	ld	a5,-32(s0)
    80001a7c:	0787b783          	ld	a5,120(a5)
    80001a80:	00f76863          	bltu	a4,a5,80001a90 <xQueueGenericSend+0xfc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:774 (discriminator 1)
    80001a84:	fa043703          	ld	a4,-96(s0)
    80001a88:	00200793          	li	a5,2
    80001a8c:	04f71e63          	bne	a4,a5,80001ae8 <xQueueGenericSend+0x154>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:840
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    80001a90:	fa043603          	ld	a2,-96(s0)
    80001a94:	fb043583          	ld	a1,-80(s0)
    80001a98:	fe043503          	ld	a0,-32(s0)
    80001a9c:	50c000ef          	jal	ra,80001fa8 <prvCopyDataToQueue>
    80001aa0:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:844

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    80001aa4:	fe043783          	ld	a5,-32(s0)
    80001aa8:	0487b783          	ld	a5,72(a5)
    80001aac:	02078263          	beqz	a5,80001ad0 <xQueueGenericSend+0x13c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:846
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    80001ab0:	fe043783          	ld	a5,-32(s0)
    80001ab4:	04878793          	addi	a5,a5,72
    80001ab8:	00078513          	mv	a0,a5
    80001abc:	654010ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    80001ac0:	00050793          	mv	a5,a0
    80001ac4:	00078c63          	beqz	a5,80001adc <xQueueGenericSend+0x148>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:852
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    80001ac8:	00000073          	ecall
    80001acc:	0100006f          	j	80001adc <xQueueGenericSend+0x148>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:859
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    80001ad0:	fd843783          	ld	a5,-40(s0)
    80001ad4:	00078463          	beqz	a5,80001adc <xQueueGenericSend+0x148>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:865
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    80001ad8:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:874
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    80001adc:	56d010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:875
				return pdPASS;
    80001ae0:	00100793          	li	a5,1
    80001ae4:	10c0006f          	j	80001bf0 <xQueueGenericSend+0x25c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:879
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    80001ae8:	fa843783          	ld	a5,-88(s0)
    80001aec:	00079863          	bnez	a5,80001afc <xQueueGenericSend+0x168>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:883
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    80001af0:	559010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:888

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    80001af4:	00000793          	li	a5,0
    80001af8:	0f80006f          	j	80001bf0 <xQueueGenericSend+0x25c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:890
				}
				else if( xEntryTimeSet == pdFALSE )
    80001afc:	fe843783          	ld	a5,-24(s0)
    80001b00:	00079c63          	bnez	a5,80001b18 <xQueueGenericSend+0x184>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:894
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    80001b04:	fc840793          	addi	a5,s0,-56
    80001b08:	00078513          	mv	a0,a5
    80001b0c:	734010ef          	jal	ra,80003240 <vTaskInternalSetTimeOutState>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:895
					xEntryTimeSet = pdTRUE;
    80001b10:	00100793          	li	a5,1
    80001b14:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:904
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    80001b18:	531010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:909

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    80001b1c:	6fd000ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:910
		prvLockQueue( pxQueue );
    80001b20:	4e1010ef          	jal	ra,80003800 <vTaskEnterCritical>
    80001b24:	fe043783          	ld	a5,-32(s0)
    80001b28:	0887c783          	lbu	a5,136(a5)
    80001b2c:	0187979b          	slliw	a5,a5,0x18
    80001b30:	4187d79b          	sraiw	a5,a5,0x18
    80001b34:	00078713          	mv	a4,a5
    80001b38:	fff00793          	li	a5,-1
    80001b3c:	00f71663          	bne	a4,a5,80001b48 <xQueueGenericSend+0x1b4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:910 (discriminator 1)
    80001b40:	fe043783          	ld	a5,-32(s0)
    80001b44:	08078423          	sb	zero,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:910 (discriminator 3)
    80001b48:	fe043783          	ld	a5,-32(s0)
    80001b4c:	0897c783          	lbu	a5,137(a5)
    80001b50:	0187979b          	slliw	a5,a5,0x18
    80001b54:	4187d79b          	sraiw	a5,a5,0x18
    80001b58:	00078713          	mv	a4,a5
    80001b5c:	fff00793          	li	a5,-1
    80001b60:	00f71663          	bne	a4,a5,80001b6c <xQueueGenericSend+0x1d8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:910 (discriminator 4)
    80001b64:	fe043783          	ld	a5,-32(s0)
    80001b68:	080784a3          	sb	zero,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:910 (discriminator 6)
    80001b6c:	4dd010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:913 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    80001b70:	fa840713          	addi	a4,s0,-88
    80001b74:	fc840793          	addi	a5,s0,-56
    80001b78:	00070593          	mv	a1,a4
    80001b7c:	00078513          	mv	a0,a5
    80001b80:	700010ef          	jal	ra,80003280 <xTaskCheckForTimeOut>
    80001b84:	00050793          	mv	a5,a0
    80001b88:	04079c63          	bnez	a5,80001be0 <xQueueGenericSend+0x24c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:915
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    80001b8c:	fe043503          	ld	a0,-32(s0)
    80001b90:	79c000ef          	jal	ra,8000232c <prvIsQueueFull>
    80001b94:	00050793          	mv	a5,a0
    80001b98:	02078c63          	beqz	a5,80001bd0 <xQueueGenericSend+0x23c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:918
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    80001b9c:	fe043783          	ld	a5,-32(s0)
    80001ba0:	02078793          	addi	a5,a5,32
    80001ba4:	fa843703          	ld	a4,-88(s0)
    80001ba8:	00070593          	mv	a1,a4
    80001bac:	00078513          	mv	a0,a5
    80001bb0:	484010ef          	jal	ra,80003034 <vTaskPlaceOnEventList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:925
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    80001bb4:	fe043503          	ld	a0,-32(s0)
    80001bb8:	614000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:932
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    80001bbc:	68d000ef          	jal	ra,80002a48 <xTaskResumeAll>
    80001bc0:	00050793          	mv	a5,a0
    80001bc4:	ea0794e3          	bnez	a5,80001a6c <xQueueGenericSend+0xd8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:934
				{
					portYIELD_WITHIN_API();
    80001bc8:	00000073          	ecall
    80001bcc:	ea1ff06f          	j	80001a6c <xQueueGenericSend+0xd8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:940
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    80001bd0:	fe043503          	ld	a0,-32(s0)
    80001bd4:	5f8000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:941
				( void ) xTaskResumeAll();
    80001bd8:	671000ef          	jal	ra,80002a48 <xTaskResumeAll>
    80001bdc:	e91ff06f          	j	80001a6c <xQueueGenericSend+0xd8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:947
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    80001be0:	fe043503          	ld	a0,-32(s0)
    80001be4:	5e8000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:948
			( void ) xTaskResumeAll();
    80001be8:	661000ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:951

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    80001bec:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:954 (discriminator 7)
		}
	} /*lint -restore */
}
    80001bf0:	00078513          	mv	a0,a5
    80001bf4:	05813083          	ld	ra,88(sp)
    80001bf8:	05013403          	ld	s0,80(sp)
    80001bfc:	06010113          	addi	sp,sp,96
    80001c00:	00008067          	ret

0000000080001c04 <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:958
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    80001c04:	fb010113          	addi	sp,sp,-80
    80001c08:	04113423          	sd	ra,72(sp)
    80001c0c:	04813023          	sd	s0,64(sp)
    80001c10:	05010413          	addi	s0,sp,80
    80001c14:	fca43423          	sd	a0,-56(s0)
    80001c18:	fcb43023          	sd	a1,-64(s0)
    80001c1c:	fac43c23          	sd	a2,-72(s0)
    80001c20:	fad43823          	sd	a3,-80(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:961
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    80001c24:	fc843783          	ld	a5,-56(s0)
    80001c28:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:963

	configASSERT( pxQueue );
    80001c2c:	fe043783          	ld	a5,-32(s0)
    80001c30:	00079863          	bnez	a5,80001c40 <xQueueGenericSendFromISR+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:963 (discriminator 1)
    80001c34:	30047073          	csrci	mstatus,8
    80001c38:	00100073          	ebreak
    80001c3c:	0000006f          	j	80001c3c <xQueueGenericSendFromISR+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    80001c40:	fc043783          	ld	a5,-64(s0)
    80001c44:	00079863          	bnez	a5,80001c54 <xQueueGenericSendFromISR+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 2)
    80001c48:	fe043783          	ld	a5,-32(s0)
    80001c4c:	0807b783          	ld	a5,128(a5)
    80001c50:	00079663          	bnez	a5,80001c5c <xQueueGenericSendFromISR+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 3)
    80001c54:	00100793          	li	a5,1
    80001c58:	0080006f          	j	80001c60 <xQueueGenericSendFromISR+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 4)
    80001c5c:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 6)
    80001c60:	00079863          	bnez	a5,80001c70 <xQueueGenericSendFromISR+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 7)
    80001c64:	30047073          	csrci	mstatus,8
    80001c68:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:964 (discriminator 2)
    80001c6c:	0000006f          	j	80001c6c <xQueueGenericSendFromISR+0x68>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    80001c70:	fb043703          	ld	a4,-80(s0)
    80001c74:	00200793          	li	a5,2
    80001c78:	00f71a63          	bne	a4,a5,80001c8c <xQueueGenericSendFromISR+0x88>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 2)
    80001c7c:	fe043783          	ld	a5,-32(s0)
    80001c80:	0787b703          	ld	a4,120(a5)
    80001c84:	00100793          	li	a5,1
    80001c88:	00f71663          	bne	a4,a5,80001c94 <xQueueGenericSendFromISR+0x90>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 3)
    80001c8c:	00100793          	li	a5,1
    80001c90:	0080006f          	j	80001c98 <xQueueGenericSendFromISR+0x94>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 4)
    80001c94:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 6)
    80001c98:	00079863          	bnez	a5,80001ca8 <xQueueGenericSendFromISR+0xa4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 7)
    80001c9c:	30047073          	csrci	mstatus,8
    80001ca0:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:965 (discriminator 3)
    80001ca4:	0000006f          	j	80001ca4 <xQueueGenericSendFromISR+0xa0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:988
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    80001ca8:	fc043c23          	sd	zero,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:990
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    80001cac:	fe043783          	ld	a5,-32(s0)
    80001cb0:	0707b703          	ld	a4,112(a5)
    80001cb4:	fe043783          	ld	a5,-32(s0)
    80001cb8:	0787b783          	ld	a5,120(a5)
    80001cbc:	00f76863          	bltu	a4,a5,80001ccc <xQueueGenericSendFromISR+0xc8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:990 (discriminator 1)
    80001cc0:	fb043703          	ld	a4,-80(s0)
    80001cc4:	00200793          	li	a5,2
    80001cc8:	08f71a63          	bne	a4,a5,80001d5c <xQueueGenericSendFromISR+0x158>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:992
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    80001ccc:	fe043783          	ld	a5,-32(s0)
    80001cd0:	0897c783          	lbu	a5,137(a5)
    80001cd4:	fcf40ba3          	sb	a5,-41(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1001
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    80001cd8:	fb043603          	ld	a2,-80(s0)
    80001cdc:	fc043583          	ld	a1,-64(s0)
    80001ce0:	fe043503          	ld	a0,-32(s0)
    80001ce4:	2c4000ef          	jal	ra,80001fa8 <prvCopyDataToQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1005

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    80001ce8:	fd744783          	lbu	a5,-41(s0)
    80001cec:	0ff7f713          	andi	a4,a5,255
    80001cf0:	0ff00793          	li	a5,255
    80001cf4:	04f71063          	bne	a4,a5,80001d34 <xQueueGenericSendFromISR+0x130>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1060
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    80001cf8:	fe043783          	ld	a5,-32(s0)
    80001cfc:	0487b783          	ld	a5,72(a5)
    80001d00:	04078863          	beqz	a5,80001d50 <xQueueGenericSendFromISR+0x14c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1062
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    80001d04:	fe043783          	ld	a5,-32(s0)
    80001d08:	04878793          	addi	a5,a5,72
    80001d0c:	00078513          	mv	a0,a5
    80001d10:	400010ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    80001d14:	00050793          	mv	a5,a0
    80001d18:	02078c63          	beqz	a5,80001d50 <xQueueGenericSendFromISR+0x14c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1066
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    80001d1c:	fb843783          	ld	a5,-72(s0)
    80001d20:	02078863          	beqz	a5,80001d50 <xQueueGenericSendFromISR+0x14c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1068
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    80001d24:	fb843783          	ld	a5,-72(s0)
    80001d28:	00100713          	li	a4,1
    80001d2c:	00e7b023          	sd	a4,0(a5)
    80001d30:	0200006f          	j	80001d50 <xQueueGenericSendFromISR+0x14c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1091
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    80001d34:	fd744783          	lbu	a5,-41(s0)
    80001d38:	0017879b          	addiw	a5,a5,1
    80001d3c:	0ff7f793          	andi	a5,a5,255
    80001d40:	0187971b          	slliw	a4,a5,0x18
    80001d44:	4187571b          	sraiw	a4,a4,0x18
    80001d48:	fe043783          	ld	a5,-32(s0)
    80001d4c:	08e784a3          	sb	a4,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1094
			}

			xReturn = pdPASS;
    80001d50:	00100793          	li	a5,1
    80001d54:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:991
		{
    80001d58:	0080006f          	j	80001d60 <xQueueGenericSendFromISR+0x15c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1099
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    80001d5c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1104
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    80001d60:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1105
}
    80001d64:	00078513          	mv	a0,a5
    80001d68:	04813083          	ld	ra,72(sp)
    80001d6c:	04013403          	ld	s0,64(sp)
    80001d70:	05010113          	addi	sp,sp,80
    80001d74:	00008067          	ret

0000000080001d78 <xQueueReceive>:
xQueueReceive():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1274
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    80001d78:	fa010113          	addi	sp,sp,-96
    80001d7c:	04113c23          	sd	ra,88(sp)
    80001d80:	04813823          	sd	s0,80(sp)
    80001d84:	06010413          	addi	s0,sp,96
    80001d88:	faa43c23          	sd	a0,-72(s0)
    80001d8c:	fab43823          	sd	a1,-80(s0)
    80001d90:	fac43423          	sd	a2,-88(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1275
BaseType_t xEntryTimeSet = pdFALSE;
    80001d94:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1277
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    80001d98:	fb843783          	ld	a5,-72(s0)
    80001d9c:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1280

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    80001da0:	fe043783          	ld	a5,-32(s0)
    80001da4:	00079863          	bnez	a5,80001db4 <xQueueReceive+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1280 (discriminator 1)
    80001da8:	30047073          	csrci	mstatus,8
    80001dac:	00100073          	ebreak
    80001db0:	0000006f          	j	80001db0 <xQueueReceive+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    80001db4:	fb043783          	ld	a5,-80(s0)
    80001db8:	00079863          	bnez	a5,80001dc8 <xQueueReceive+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 2)
    80001dbc:	fe043783          	ld	a5,-32(s0)
    80001dc0:	0807b783          	ld	a5,128(a5)
    80001dc4:	00079663          	bnez	a5,80001dd0 <xQueueReceive+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 3)
    80001dc8:	00100793          	li	a5,1
    80001dcc:	0080006f          	j	80001dd4 <xQueueReceive+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 4)
    80001dd0:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 6)
    80001dd4:	00079863          	bnez	a5,80001de4 <xQueueReceive+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 7)
    80001dd8:	30047073          	csrci	mstatus,8
    80001ddc:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1284 (discriminator 2)
    80001de0:	0000006f          	j	80001de0 <xQueueReceive+0x68>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    80001de4:	019010ef          	jal	ra,800035fc <xTaskGetSchedulerState>
    80001de8:	00050793          	mv	a5,a0
    80001dec:	00079663          	bnez	a5,80001df8 <xQueueReceive+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 2)
    80001df0:	fa843783          	ld	a5,-88(s0)
    80001df4:	00079663          	bnez	a5,80001e00 <xQueueReceive+0x88>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 3)
    80001df8:	00100793          	li	a5,1
    80001dfc:	0080006f          	j	80001e04 <xQueueReceive+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 4)
    80001e00:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 6)
    80001e04:	00079863          	bnez	a5,80001e14 <xQueueReceive+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 7)
    80001e08:	30047073          	csrci	mstatus,8
    80001e0c:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1289 (discriminator 3)
    80001e10:	0000006f          	j	80001e10 <xQueueReceive+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1299
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    80001e14:	1ed010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1301
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    80001e18:	fe043783          	ld	a5,-32(s0)
    80001e1c:	0707b783          	ld	a5,112(a5)
    80001e20:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1305

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    80001e24:	fd843783          	ld	a5,-40(s0)
    80001e28:	04078a63          	beqz	a5,80001e7c <xQueueReceive+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1308
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    80001e2c:	fb043583          	ld	a1,-80(s0)
    80001e30:	fe043503          	ld	a0,-32(s0)
    80001e34:	300000ef          	jal	ra,80002134 <prvCopyDataFromQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1310
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    80001e38:	fd843783          	ld	a5,-40(s0)
    80001e3c:	fff78713          	addi	a4,a5,-1
    80001e40:	fe043783          	ld	a5,-32(s0)
    80001e44:	06e7b823          	sd	a4,112(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1315

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    80001e48:	fe043783          	ld	a5,-32(s0)
    80001e4c:	0207b783          	ld	a5,32(a5)
    80001e50:	02078063          	beqz	a5,80001e70 <xQueueReceive+0xf8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1317
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    80001e54:	fe043783          	ld	a5,-32(s0)
    80001e58:	02078793          	addi	a5,a5,32
    80001e5c:	00078513          	mv	a0,a5
    80001e60:	2b0010ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    80001e64:	00050793          	mv	a5,a0
    80001e68:	00078463          	beqz	a5,80001e70 <xQueueReceive+0xf8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1319
					{
						queueYIELD_IF_USING_PREEMPTION();
    80001e6c:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1331
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    80001e70:	1d9010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1332
				return pdPASS;
    80001e74:	00100793          	li	a5,1
    80001e78:	11c0006f          	j	80001f94 <xQueueReceive+0x21c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1336
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    80001e7c:	fa843783          	ld	a5,-88(s0)
    80001e80:	00079863          	bnez	a5,80001e90 <xQueueReceive+0x118>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1340
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    80001e84:	1c5010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1342
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    80001e88:	00000793          	li	a5,0
    80001e8c:	1080006f          	j	80001f94 <xQueueReceive+0x21c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1344
				}
				else if( xEntryTimeSet == pdFALSE )
    80001e90:	fe843783          	ld	a5,-24(s0)
    80001e94:	00079c63          	bnez	a5,80001eac <xQueueReceive+0x134>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1348
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    80001e98:	fc840793          	addi	a5,s0,-56
    80001e9c:	00078513          	mv	a0,a5
    80001ea0:	3a0010ef          	jal	ra,80003240 <vTaskInternalSetTimeOutState>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1349
					xEntryTimeSet = pdTRUE;
    80001ea4:	00100793          	li	a5,1
    80001ea8:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1358
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    80001eac:	19d010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1363

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    80001eb0:	369000ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1364
		prvLockQueue( pxQueue );
    80001eb4:	14d010ef          	jal	ra,80003800 <vTaskEnterCritical>
    80001eb8:	fe043783          	ld	a5,-32(s0)
    80001ebc:	0887c783          	lbu	a5,136(a5)
    80001ec0:	0187979b          	slliw	a5,a5,0x18
    80001ec4:	4187d79b          	sraiw	a5,a5,0x18
    80001ec8:	00078713          	mv	a4,a5
    80001ecc:	fff00793          	li	a5,-1
    80001ed0:	00f71663          	bne	a4,a5,80001edc <xQueueReceive+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1364 (discriminator 1)
    80001ed4:	fe043783          	ld	a5,-32(s0)
    80001ed8:	08078423          	sb	zero,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1364 (discriminator 3)
    80001edc:	fe043783          	ld	a5,-32(s0)
    80001ee0:	0897c783          	lbu	a5,137(a5)
    80001ee4:	0187979b          	slliw	a5,a5,0x18
    80001ee8:	4187d79b          	sraiw	a5,a5,0x18
    80001eec:	00078713          	mv	a4,a5
    80001ef0:	fff00793          	li	a5,-1
    80001ef4:	00f71663          	bne	a4,a5,80001f00 <xQueueReceive+0x188>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1364 (discriminator 4)
    80001ef8:	fe043783          	ld	a5,-32(s0)
    80001efc:	080784a3          	sb	zero,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1364 (discriminator 6)
    80001f00:	149010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1367 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    80001f04:	fa840713          	addi	a4,s0,-88
    80001f08:	fc840793          	addi	a5,s0,-56
    80001f0c:	00070593          	mv	a1,a4
    80001f10:	00078513          	mv	a0,a5
    80001f14:	36c010ef          	jal	ra,80003280 <xTaskCheckForTimeOut>
    80001f18:	00050793          	mv	a5,a0
    80001f1c:	04079c63          	bnez	a5,80001f74 <xQueueReceive+0x1fc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1371
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    80001f20:	fe043503          	ld	a0,-32(s0)
    80001f24:	3b8000ef          	jal	ra,800022dc <prvIsQueueEmpty>
    80001f28:	00050793          	mv	a5,a0
    80001f2c:	02078c63          	beqz	a5,80001f64 <xQueueReceive+0x1ec>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1374
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    80001f30:	fe043783          	ld	a5,-32(s0)
    80001f34:	04878793          	addi	a5,a5,72
    80001f38:	fa843703          	ld	a4,-88(s0)
    80001f3c:	00070593          	mv	a1,a4
    80001f40:	00078513          	mv	a0,a5
    80001f44:	0f0010ef          	jal	ra,80003034 <vTaskPlaceOnEventList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1375
				prvUnlockQueue( pxQueue );
    80001f48:	fe043503          	ld	a0,-32(s0)
    80001f4c:	280000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1376
				if( xTaskResumeAll() == pdFALSE )
    80001f50:	2f9000ef          	jal	ra,80002a48 <xTaskResumeAll>
    80001f54:	00050793          	mv	a5,a0
    80001f58:	ea079ee3          	bnez	a5,80001e14 <xQueueReceive+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1378
				{
					portYIELD_WITHIN_API();
    80001f5c:	00000073          	ecall
    80001f60:	eb5ff06f          	j	80001e14 <xQueueReceive+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1389
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    80001f64:	fe043503          	ld	a0,-32(s0)
    80001f68:	264000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1390
				( void ) xTaskResumeAll();
    80001f6c:	2dd000ef          	jal	ra,80002a48 <xTaskResumeAll>
    80001f70:	ea5ff06f          	j	80001e14 <xQueueReceive+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1397
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    80001f74:	fe043503          	ld	a0,-32(s0)
    80001f78:	254000ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1398
			( void ) xTaskResumeAll();
    80001f7c:	2cd000ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1400

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    80001f80:	fe043503          	ld	a0,-32(s0)
    80001f84:	358000ef          	jal	ra,800022dc <prvIsQueueEmpty>
    80001f88:	00050793          	mv	a5,a0
    80001f8c:	e80784e3          	beqz	a5,80001e14 <xQueueReceive+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1403
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    80001f90:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:1411 (discriminator 6)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    80001f94:	00078513          	mv	a0,a5
    80001f98:	05813083          	ld	ra,88(sp)
    80001f9c:	05013403          	ld	s0,80(sp)
    80001fa0:	06010113          	addi	sp,sp,96
    80001fa4:	00008067          	ret

0000000080001fa8 <prvCopyDataToQueue>:
prvCopyDataToQueue():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2071

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    80001fa8:	fc010113          	addi	sp,sp,-64
    80001fac:	02113c23          	sd	ra,56(sp)
    80001fb0:	02813823          	sd	s0,48(sp)
    80001fb4:	04010413          	addi	s0,sp,64
    80001fb8:	fca43c23          	sd	a0,-40(s0)
    80001fbc:	fcb43823          	sd	a1,-48(s0)
    80001fc0:	fcc43423          	sd	a2,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2072
BaseType_t xReturn = pdFALSE;
    80001fc4:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2077
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    80001fc8:	fd843783          	ld	a5,-40(s0)
    80001fcc:	0707b783          	ld	a5,112(a5)
    80001fd0:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2079

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    80001fd4:	fd843783          	ld	a5,-40(s0)
    80001fd8:	0807b783          	ld	a5,128(a5)
    80001fdc:	02079863          	bnez	a5,8000200c <prvCopyDataToQueue+0x64>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2083
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    80001fe0:	fd843783          	ld	a5,-40(s0)
    80001fe4:	0007b783          	ld	a5,0(a5)
    80001fe8:	12079263          	bnez	a5,8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2086
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    80001fec:	fd843783          	ld	a5,-40(s0)
    80001ff0:	0107b783          	ld	a5,16(a5)
    80001ff4:	00078513          	mv	a0,a5
    80001ff8:	658010ef          	jal	ra,80003650 <xTaskPriorityDisinherit>
    80001ffc:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2087
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    80002000:	fd843783          	ld	a5,-40(s0)
    80002004:	0007b823          	sd	zero,16(a5)
    80002008:	1040006f          	j	8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2096
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    8000200c:	fc843783          	ld	a5,-56(s0)
    80002010:	06079463          	bnez	a5,80002078 <prvCopyDataToQueue+0xd0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2098
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    80002014:	fd843783          	ld	a5,-40(s0)
    80002018:	0087b703          	ld	a4,8(a5)
    8000201c:	fd843783          	ld	a5,-40(s0)
    80002020:	0807b783          	ld	a5,128(a5)
    80002024:	00078613          	mv	a2,a5
    80002028:	fd043583          	ld	a1,-48(s0)
    8000202c:	00070513          	mv	a0,a4
    80002030:	4c4020ef          	jal	ra,800044f4 <memcpy>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2099
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    80002034:	fd843783          	ld	a5,-40(s0)
    80002038:	0087b703          	ld	a4,8(a5)
    8000203c:	fd843783          	ld	a5,-40(s0)
    80002040:	0807b783          	ld	a5,128(a5)
    80002044:	00f70733          	add	a4,a4,a5
    80002048:	fd843783          	ld	a5,-40(s0)
    8000204c:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2100
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    80002050:	fd843783          	ld	a5,-40(s0)
    80002054:	0087b703          	ld	a4,8(a5)
    80002058:	fd843783          	ld	a5,-40(s0)
    8000205c:	0107b783          	ld	a5,16(a5)
    80002060:	0af76663          	bltu	a4,a5,8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2102
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    80002064:	fd843783          	ld	a5,-40(s0)
    80002068:	0007b703          	ld	a4,0(a5)
    8000206c:	fd843783          	ld	a5,-40(s0)
    80002070:	00e7b423          	sd	a4,8(a5)
    80002074:	0980006f          	j	8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2111
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    80002078:	fd843783          	ld	a5,-40(s0)
    8000207c:	0187b703          	ld	a4,24(a5)
    80002080:	fd843783          	ld	a5,-40(s0)
    80002084:	0807b783          	ld	a5,128(a5)
    80002088:	00078613          	mv	a2,a5
    8000208c:	fd043583          	ld	a1,-48(s0)
    80002090:	00070513          	mv	a0,a4
    80002094:	460020ef          	jal	ra,800044f4 <memcpy>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2112
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    80002098:	fd843783          	ld	a5,-40(s0)
    8000209c:	0187b703          	ld	a4,24(a5)
    800020a0:	fd843783          	ld	a5,-40(s0)
    800020a4:	0807b783          	ld	a5,128(a5)
    800020a8:	40f007b3          	neg	a5,a5
    800020ac:	00f70733          	add	a4,a4,a5
    800020b0:	fd843783          	ld	a5,-40(s0)
    800020b4:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2113
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    800020b8:	fd843783          	ld	a5,-40(s0)
    800020bc:	0187b703          	ld	a4,24(a5)
    800020c0:	fd843783          	ld	a5,-40(s0)
    800020c4:	0007b783          	ld	a5,0(a5)
    800020c8:	02f77263          	bgeu	a4,a5,800020ec <prvCopyDataToQueue+0x144>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2115
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    800020cc:	fd843783          	ld	a5,-40(s0)
    800020d0:	0107b703          	ld	a4,16(a5)
    800020d4:	fd843783          	ld	a5,-40(s0)
    800020d8:	0807b783          	ld	a5,128(a5)
    800020dc:	40f007b3          	neg	a5,a5
    800020e0:	00f70733          	add	a4,a4,a5
    800020e4:	fd843783          	ld	a5,-40(s0)
    800020e8:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2122
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    800020ec:	fc843703          	ld	a4,-56(s0)
    800020f0:	00200793          	li	a5,2
    800020f4:	00f71c63          	bne	a4,a5,8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2124
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    800020f8:	fe043783          	ld	a5,-32(s0)
    800020fc:	00078863          	beqz	a5,8000210c <prvCopyDataToQueue+0x164>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2130
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    80002100:	fe043783          	ld	a5,-32(s0)
    80002104:	fff78793          	addi	a5,a5,-1
    80002108:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2143
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    8000210c:	fe043783          	ld	a5,-32(s0)
    80002110:	00178713          	addi	a4,a5,1
    80002114:	fd843783          	ld	a5,-40(s0)
    80002118:	06e7b823          	sd	a4,112(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2145

	return xReturn;
    8000211c:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2146
}
    80002120:	00078513          	mv	a0,a5
    80002124:	03813083          	ld	ra,56(sp)
    80002128:	03013403          	ld	s0,48(sp)
    8000212c:	04010113          	addi	sp,sp,64
    80002130:	00008067          	ret

0000000080002134 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2150
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    80002134:	fe010113          	addi	sp,sp,-32
    80002138:	00113c23          	sd	ra,24(sp)
    8000213c:	00813823          	sd	s0,16(sp)
    80002140:	02010413          	addi	s0,sp,32
    80002144:	fea43423          	sd	a0,-24(s0)
    80002148:	feb43023          	sd	a1,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2151
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    8000214c:	fe843783          	ld	a5,-24(s0)
    80002150:	0807b783          	ld	a5,128(a5)
    80002154:	06078263          	beqz	a5,800021b8 <prvCopyDataFromQueue+0x84>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2153
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    80002158:	fe843783          	ld	a5,-24(s0)
    8000215c:	0187b703          	ld	a4,24(a5)
    80002160:	fe843783          	ld	a5,-24(s0)
    80002164:	0807b783          	ld	a5,128(a5)
    80002168:	00f70733          	add	a4,a4,a5
    8000216c:	fe843783          	ld	a5,-24(s0)
    80002170:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2154
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    80002174:	fe843783          	ld	a5,-24(s0)
    80002178:	0187b703          	ld	a4,24(a5)
    8000217c:	fe843783          	ld	a5,-24(s0)
    80002180:	0107b783          	ld	a5,16(a5)
    80002184:	00f76a63          	bltu	a4,a5,80002198 <prvCopyDataFromQueue+0x64>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2156
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    80002188:	fe843783          	ld	a5,-24(s0)
    8000218c:	0007b703          	ld	a4,0(a5)
    80002190:	fe843783          	ld	a5,-24(s0)
    80002194:	00e7bc23          	sd	a4,24(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2162
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    80002198:	fe843783          	ld	a5,-24(s0)
    8000219c:	0187b703          	ld	a4,24(a5)
    800021a0:	fe843783          	ld	a5,-24(s0)
    800021a4:	0807b783          	ld	a5,128(a5)
    800021a8:	00078613          	mv	a2,a5
    800021ac:	00070593          	mv	a1,a4
    800021b0:	fe043503          	ld	a0,-32(s0)
    800021b4:	340020ef          	jal	ra,800044f4 <memcpy>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2164
	}
}
    800021b8:	00000013          	nop
    800021bc:	01813083          	ld	ra,24(sp)
    800021c0:	01013403          	ld	s0,16(sp)
    800021c4:	02010113          	addi	sp,sp,32
    800021c8:	00008067          	ret

00000000800021cc <prvUnlockQueue>:
prvUnlockQueue():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2168
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    800021cc:	fd010113          	addi	sp,sp,-48
    800021d0:	02113423          	sd	ra,40(sp)
    800021d4:	02813023          	sd	s0,32(sp)
    800021d8:	03010413          	addi	s0,sp,48
    800021dc:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2175

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    800021e0:	620010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2177
	{
		int8_t cTxLock = pxQueue->cTxLock;
    800021e4:	fd843783          	ld	a5,-40(s0)
    800021e8:	0897c783          	lbu	a5,137(a5)
    800021ec:	fef407a3          	sb	a5,-17(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2180

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    800021f0:	03c0006f          	j	8000222c <prvUnlockQueue+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2228
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    800021f4:	fd843783          	ld	a5,-40(s0)
    800021f8:	0487b783          	ld	a5,72(a5)
    800021fc:	04078263          	beqz	a5,80002240 <prvUnlockQueue+0x74>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2230
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    80002200:	fd843783          	ld	a5,-40(s0)
    80002204:	04878793          	addi	a5,a5,72
    80002208:	00078513          	mv	a0,a5
    8000220c:	705000ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    80002210:	00050793          	mv	a5,a0
    80002214:	00078463          	beqz	a5,8000221c <prvUnlockQueue+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2234
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    80002218:	1a0010ef          	jal	ra,800033b8 <vTaskMissedYield>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2248
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    8000221c:	fef44783          	lbu	a5,-17(s0)
    80002220:	fff7879b          	addiw	a5,a5,-1
    80002224:	0ff7f793          	andi	a5,a5,255
    80002228:	fef407a3          	sb	a5,-17(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2180
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8000222c:	fef44783          	lbu	a5,-17(s0)
    80002230:	0187979b          	slliw	a5,a5,0x18
    80002234:	4187d79b          	sraiw	a5,a5,0x18
    80002238:	faf04ee3          	bgtz	a5,800021f4 <prvUnlockQueue+0x28>
    8000223c:	0080006f          	j	80002244 <prvUnlockQueue+0x78>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2243
					break;
    80002240:	00000013          	nop
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2251
		}

		pxQueue->cTxLock = queueUNLOCKED;
    80002244:	fd843783          	ld	a5,-40(s0)
    80002248:	fff00713          	li	a4,-1
    8000224c:	08e784a3          	sb	a4,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2253
	}
	taskEXIT_CRITICAL();
    80002250:	5f8010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2256

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    80002254:	5ac010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2258
	{
		int8_t cRxLock = pxQueue->cRxLock;
    80002258:	fd843783          	ld	a5,-40(s0)
    8000225c:	0887c783          	lbu	a5,136(a5)
    80002260:	fef40723          	sb	a5,-18(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2260

		while( cRxLock > queueLOCKED_UNMODIFIED )
    80002264:	03c0006f          	j	800022a0 <prvUnlockQueue+0xd4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2262
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    80002268:	fd843783          	ld	a5,-40(s0)
    8000226c:	0207b783          	ld	a5,32(a5)
    80002270:	04078263          	beqz	a5,800022b4 <prvUnlockQueue+0xe8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2264
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    80002274:	fd843783          	ld	a5,-40(s0)
    80002278:	02078793          	addi	a5,a5,32
    8000227c:	00078513          	mv	a0,a5
    80002280:	691000ef          	jal	ra,80003110 <xTaskRemoveFromEventList>
    80002284:	00050793          	mv	a5,a0
    80002288:	00078463          	beqz	a5,80002290 <prvUnlockQueue+0xc4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2266
				{
					vTaskMissedYield();
    8000228c:	12c010ef          	jal	ra,800033b8 <vTaskMissedYield>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2273
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    80002290:	fee44783          	lbu	a5,-18(s0)
    80002294:	fff7879b          	addiw	a5,a5,-1
    80002298:	0ff7f793          	andi	a5,a5,255
    8000229c:	fef40723          	sb	a5,-18(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2260
		while( cRxLock > queueLOCKED_UNMODIFIED )
    800022a0:	fee44783          	lbu	a5,-18(s0)
    800022a4:	0187979b          	slliw	a5,a5,0x18
    800022a8:	4187d79b          	sraiw	a5,a5,0x18
    800022ac:	faf04ee3          	bgtz	a5,80002268 <prvUnlockQueue+0x9c>
    800022b0:	0080006f          	j	800022b8 <prvUnlockQueue+0xec>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2277
			}
			else
			{
				break;
    800022b4:	00000013          	nop
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2281
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    800022b8:	fd843783          	ld	a5,-40(s0)
    800022bc:	fff00713          	li	a4,-1
    800022c0:	08e78423          	sb	a4,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2283
	}
	taskEXIT_CRITICAL();
    800022c4:	584010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2284
}
    800022c8:	00000013          	nop
    800022cc:	02813083          	ld	ra,40(sp)
    800022d0:	02013403          	ld	s0,32(sp)
    800022d4:	03010113          	addi	sp,sp,48
    800022d8:	00008067          	ret

00000000800022dc <prvIsQueueEmpty>:
prvIsQueueEmpty():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2288
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    800022dc:	fd010113          	addi	sp,sp,-48
    800022e0:	02113423          	sd	ra,40(sp)
    800022e4:	02813023          	sd	s0,32(sp)
    800022e8:	03010413          	addi	s0,sp,48
    800022ec:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2291
BaseType_t xReturn;

	taskENTER_CRITICAL();
    800022f0:	510010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2293
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    800022f4:	fd843783          	ld	a5,-40(s0)
    800022f8:	0707b783          	ld	a5,112(a5)
    800022fc:	00079863          	bnez	a5,8000230c <prvIsQueueEmpty+0x30>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2295
		{
			xReturn = pdTRUE;
    80002300:	00100793          	li	a5,1
    80002304:	fef43423          	sd	a5,-24(s0)
    80002308:	0080006f          	j	80002310 <prvIsQueueEmpty+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2299
		}
		else
		{
			xReturn = pdFALSE;
    8000230c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2302
		}
	}
	taskEXIT_CRITICAL();
    80002310:	538010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2304

	return xReturn;
    80002314:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2305
}
    80002318:	00078513          	mv	a0,a5
    8000231c:	02813083          	ld	ra,40(sp)
    80002320:	02013403          	ld	s0,32(sp)
    80002324:	03010113          	addi	sp,sp,48
    80002328:	00008067          	ret

000000008000232c <prvIsQueueFull>:
prvIsQueueFull():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2328
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    8000232c:	fd010113          	addi	sp,sp,-48
    80002330:	02113423          	sd	ra,40(sp)
    80002334:	02813023          	sd	s0,32(sp)
    80002338:	03010413          	addi	s0,sp,48
    8000233c:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2331
BaseType_t xReturn;

	taskENTER_CRITICAL();
    80002340:	4c0010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2333
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    80002344:	fd843783          	ld	a5,-40(s0)
    80002348:	0707b703          	ld	a4,112(a5)
    8000234c:	fd843783          	ld	a5,-40(s0)
    80002350:	0787b783          	ld	a5,120(a5)
    80002354:	00f71863          	bne	a4,a5,80002364 <prvIsQueueFull+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2335
		{
			xReturn = pdTRUE;
    80002358:	00100793          	li	a5,1
    8000235c:	fef43423          	sd	a5,-24(s0)
    80002360:	0080006f          	j	80002368 <prvIsQueueFull+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2339
		}
		else
		{
			xReturn = pdFALSE;
    80002364:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2342
		}
	}
	taskEXIT_CRITICAL();
    80002368:	4e0010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2344

	return xReturn;
    8000236c:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2345
}
    80002370:	00078513          	mv	a0,a5
    80002374:	02813083          	ld	ra,40(sp)
    80002378:	02013403          	ld	s0,32(sp)
    8000237c:	03010113          	addi	sp,sp,48
    80002380:	00008067          	ret

0000000080002384 <vQueueAddToRegistry>:
vQueueAddToRegistry():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2645
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    80002384:	fd010113          	addi	sp,sp,-48
    80002388:	02813423          	sd	s0,40(sp)
    8000238c:	03010413          	addi	s0,sp,48
    80002390:	fca43c23          	sd	a0,-40(s0)
    80002394:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2650
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    80002398:	fe043423          	sd	zero,-24(s0)
    8000239c:	0680006f          	j	80002404 <vQueueAddToRegistry+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2652
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    800023a0:	00103717          	auipc	a4,0x103
    800023a4:	9e070713          	addi	a4,a4,-1568 # 80104d80 <xQueueRegistry>
    800023a8:	fe843783          	ld	a5,-24(s0)
    800023ac:	00479793          	slli	a5,a5,0x4
    800023b0:	00f707b3          	add	a5,a4,a5
    800023b4:	0007b783          	ld	a5,0(a5)
    800023b8:	04079063          	bnez	a5,800023f8 <vQueueAddToRegistry+0x74>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2655
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    800023bc:	00103717          	auipc	a4,0x103
    800023c0:	9c470713          	addi	a4,a4,-1596 # 80104d80 <xQueueRegistry>
    800023c4:	fe843783          	ld	a5,-24(s0)
    800023c8:	00479793          	slli	a5,a5,0x4
    800023cc:	00f707b3          	add	a5,a4,a5
    800023d0:	fd043703          	ld	a4,-48(s0)
    800023d4:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2656
				xQueueRegistry[ ux ].xHandle = xQueue;
    800023d8:	00103717          	auipc	a4,0x103
    800023dc:	9a870713          	addi	a4,a4,-1624 # 80104d80 <xQueueRegistry>
    800023e0:	fe843783          	ld	a5,-24(s0)
    800023e4:	00479793          	slli	a5,a5,0x4
    800023e8:	00f707b3          	add	a5,a4,a5
    800023ec:	fd843703          	ld	a4,-40(s0)
    800023f0:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2659

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    800023f4:	0200006f          	j	80002414 <vQueueAddToRegistry+0x90>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2650 (discriminator 2)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    800023f8:	fe843783          	ld	a5,-24(s0)
    800023fc:	00178793          	addi	a5,a5,1
    80002400:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2650 (discriminator 1)
    80002404:	fe843703          	ld	a4,-24(s0)
    80002408:	00700793          	li	a5,7
    8000240c:	f8e7fae3          	bgeu	a5,a4,800023a0 <vQueueAddToRegistry+0x1c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2666
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    80002410:	00000013          	nop
    80002414:	00000013          	nop
    80002418:	02813403          	ld	s0,40(sp)
    8000241c:	03010113          	addi	sp,sp,48
    80002420:	00008067          	ret

0000000080002424 <vQueueWaitForMessageRestricted>:
vQueueWaitForMessageRestricted():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2734
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    80002424:	fc010113          	addi	sp,sp,-64
    80002428:	02113c23          	sd	ra,56(sp)
    8000242c:	02813823          	sd	s0,48(sp)
    80002430:	04010413          	addi	s0,sp,64
    80002434:	fca43c23          	sd	a0,-40(s0)
    80002438:	fcb43823          	sd	a1,-48(s0)
    8000243c:	fcc43423          	sd	a2,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2735
	Queue_t * const pxQueue = xQueue;
    80002440:	fd843783          	ld	a5,-40(s0)
    80002444:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2751
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    80002448:	3b8010ef          	jal	ra,80003800 <vTaskEnterCritical>
    8000244c:	fe843783          	ld	a5,-24(s0)
    80002450:	0887c783          	lbu	a5,136(a5)
    80002454:	0187979b          	slliw	a5,a5,0x18
    80002458:	4187d79b          	sraiw	a5,a5,0x18
    8000245c:	00078713          	mv	a4,a5
    80002460:	fff00793          	li	a5,-1
    80002464:	00f71663          	bne	a4,a5,80002470 <vQueueWaitForMessageRestricted+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2751 (discriminator 1)
    80002468:	fe843783          	ld	a5,-24(s0)
    8000246c:	08078423          	sb	zero,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2751 (discriminator 3)
    80002470:	fe843783          	ld	a5,-24(s0)
    80002474:	0897c783          	lbu	a5,137(a5)
    80002478:	0187979b          	slliw	a5,a5,0x18
    8000247c:	4187d79b          	sraiw	a5,a5,0x18
    80002480:	00078713          	mv	a4,a5
    80002484:	fff00793          	li	a5,-1
    80002488:	00f71663          	bne	a4,a5,80002494 <vQueueWaitForMessageRestricted+0x70>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2751 (discriminator 4)
    8000248c:	fe843783          	ld	a5,-24(s0)
    80002490:	080784a3          	sb	zero,137(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2751 (discriminator 6)
    80002494:	3b4010ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2752 (discriminator 6)
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    80002498:	fe843783          	ld	a5,-24(s0)
    8000249c:	0707b783          	ld	a5,112(a5)
    800024a0:	00079e63          	bnez	a5,800024bc <vQueueWaitForMessageRestricted+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2755
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    800024a4:	fe843783          	ld	a5,-24(s0)
    800024a8:	04878793          	addi	a5,a5,72
    800024ac:	fc843603          	ld	a2,-56(s0)
    800024b0:	fd043583          	ld	a1,-48(s0)
    800024b4:	00078513          	mv	a0,a5
    800024b8:	3e1000ef          	jal	ra,80003098 <vTaskPlaceOnEventListRestricted>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2761
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    800024bc:	fe843503          	ld	a0,-24(s0)
    800024c0:	d0dff0ef          	jal	ra,800021cc <prvUnlockQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/queue.c:2762
	}
    800024c4:	00000013          	nop
    800024c8:	03813083          	ld	ra,56(sp)
    800024cc:	03013403          	ld	s0,48(sp)
    800024d0:	04010113          	addi	sp,sp,64
    800024d4:	00008067          	ret

00000000800024d8 <xTaskCreate>:
xTaskCreate():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:736
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    800024d8:	fa010113          	addi	sp,sp,-96
    800024dc:	04113c23          	sd	ra,88(sp)
    800024e0:	04813823          	sd	s0,80(sp)
    800024e4:	06010413          	addi	s0,sp,96
    800024e8:	fca43423          	sd	a0,-56(s0)
    800024ec:	fcb43023          	sd	a1,-64(s0)
    800024f0:	fad43823          	sd	a3,-80(s0)
    800024f4:	fae43423          	sd	a4,-88(s0)
    800024f8:	faf43023          	sd	a5,-96(s0)
    800024fc:	00060793          	mv	a5,a2
    80002500:	faf41f23          	sh	a5,-66(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:770
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    80002504:	fbe45783          	lhu	a5,-66(s0)
    80002508:	00379793          	slli	a5,a5,0x3
    8000250c:	00078513          	mv	a0,a5
    80002510:	cb8fe0ef          	jal	ra,800009c8 <pvPortMalloc>
    80002514:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:772

			if( pxStack != NULL )
    80002518:	fd843783          	ld	a5,-40(s0)
    8000251c:	02078a63          	beqz	a5,80002550 <xTaskCreate+0x78>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:775
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    80002520:	09800513          	li	a0,152
    80002524:	ca4fe0ef          	jal	ra,800009c8 <pvPortMalloc>
    80002528:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:777

				if( pxNewTCB != NULL )
    8000252c:	fe843783          	ld	a5,-24(s0)
    80002530:	00078a63          	beqz	a5,80002544 <xTaskCreate+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:780
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    80002534:	fe843783          	ld	a5,-24(s0)
    80002538:	fd843703          	ld	a4,-40(s0)
    8000253c:	06e7b023          	sd	a4,96(a5)
    80002540:	0140006f          	j	80002554 <xTaskCreate+0x7c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:786
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    80002544:	fd843503          	ld	a0,-40(s0)
    80002548:	ebcfe0ef          	jal	ra,80000c04 <vPortFree>
    8000254c:	0080006f          	j	80002554 <xTaskCreate+0x7c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:791
				}
			}
			else
			{
				pxNewTCB = NULL;
    80002550:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:796
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    80002554:	fe843783          	ld	a5,-24(s0)
    80002558:	04078063          	beqz	a5,80002598 <xTaskCreate+0xc0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:806
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    8000255c:	fbe45783          	lhu	a5,-66(s0)
    80002560:	0007861b          	sext.w	a2,a5
    80002564:	00000893          	li	a7,0
    80002568:	fe843803          	ld	a6,-24(s0)
    8000256c:	fa043783          	ld	a5,-96(s0)
    80002570:	fa843703          	ld	a4,-88(s0)
    80002574:	fb043683          	ld	a3,-80(s0)
    80002578:	fc043583          	ld	a1,-64(s0)
    8000257c:	fc843503          	ld	a0,-56(s0)
    80002580:	038000ef          	jal	ra,800025b8 <prvInitialiseNewTask>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:807
			prvAddNewTaskToReadyList( pxNewTCB );
    80002584:	fe843503          	ld	a0,-24(s0)
    80002588:	22c000ef          	jal	ra,800027b4 <prvAddNewTaskToReadyList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:808
			xReturn = pdPASS;
    8000258c:	00100793          	li	a5,1
    80002590:	fef43023          	sd	a5,-32(s0)
    80002594:	00c0006f          	j	800025a0 <xTaskCreate+0xc8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:812
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    80002598:	fff00793          	li	a5,-1
    8000259c:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:815
		}

		return xReturn;
    800025a0:	fe043783          	ld	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:816
	}
    800025a4:	00078513          	mv	a0,a5
    800025a8:	05813083          	ld	ra,88(sp)
    800025ac:	05013403          	ld	s0,80(sp)
    800025b0:	06010113          	addi	sp,sp,96
    800025b4:	00008067          	ret

00000000800025b8 <prvInitialiseNewTask>:
prvInitialiseNewTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:829
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    800025b8:	fa010113          	addi	sp,sp,-96
    800025bc:	04113c23          	sd	ra,88(sp)
    800025c0:	04813823          	sd	s0,80(sp)
    800025c4:	06010413          	addi	s0,sp,96
    800025c8:	fca43c23          	sd	a0,-40(s0)
    800025cc:	fcb43823          	sd	a1,-48(s0)
    800025d0:	fcd43023          	sd	a3,-64(s0)
    800025d4:	fae43c23          	sd	a4,-72(s0)
    800025d8:	faf43823          	sd	a5,-80(s0)
    800025dc:	fb043423          	sd	a6,-88(s0)
    800025e0:	fb143023          	sd	a7,-96(s0)
    800025e4:	00060793          	mv	a5,a2
    800025e8:	fcf42623          	sw	a5,-52(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:851

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    800025ec:	fa843783          	ld	a5,-88(s0)
    800025f0:	0607b703          	ld	a4,96(a5)
    800025f4:	fcc46783          	lwu	a5,-52(s0)
    800025f8:	00379793          	slli	a5,a5,0x3
    800025fc:	00078613          	mv	a2,a5
    80002600:	0a500593          	li	a1,165
    80002604:	00070513          	mv	a0,a4
    80002608:	008020ef          	jal	ra,80004610 <memset>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:861
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    8000260c:	fa843783          	ld	a5,-88(s0)
    80002610:	0607b703          	ld	a4,96(a5)
    80002614:	fcc42783          	lw	a5,-52(s0)
    80002618:	fff7879b          	addiw	a5,a5,-1
    8000261c:	0007879b          	sext.w	a5,a5
    80002620:	02079793          	slli	a5,a5,0x20
    80002624:	0207d793          	srli	a5,a5,0x20
    80002628:	00379793          	slli	a5,a5,0x3
    8000262c:	00f707b3          	add	a5,a4,a5
    80002630:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:862
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    80002634:	fe043783          	ld	a5,-32(s0)
    80002638:	ff87f793          	andi	a5,a5,-8
    8000263c:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:865

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    80002640:	fe043783          	ld	a5,-32(s0)
    80002644:	0077f793          	andi	a5,a5,7
    80002648:	00078863          	beqz	a5,80002658 <prvInitialiseNewTask+0xa0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:865 (discriminator 1)
    8000264c:	30047073          	csrci	mstatus,8
    80002650:	00100073          	ebreak
    80002654:	0000006f          	j	80002654 <prvInitialiseNewTask+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:889
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    80002658:	fd043783          	ld	a5,-48(s0)
    8000265c:	06078663          	beqz	a5,800026c8 <prvInitialiseNewTask+0x110>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:891
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    80002660:	fe043423          	sd	zero,-24(s0)
    80002664:	0440006f          	j	800026a8 <prvInitialiseNewTask+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:893
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    80002668:	fd043703          	ld	a4,-48(s0)
    8000266c:	fe843783          	ld	a5,-24(s0)
    80002670:	00f707b3          	add	a5,a4,a5
    80002674:	00078703          	lb	a4,0(a5)
    80002678:	fa843683          	ld	a3,-88(s0)
    8000267c:	fe843783          	ld	a5,-24(s0)
    80002680:	00f687b3          	add	a5,a3,a5
    80002684:	06e78423          	sb	a4,104(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:898

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    80002688:	fd043703          	ld	a4,-48(s0)
    8000268c:	fe843783          	ld	a5,-24(s0)
    80002690:	00f707b3          	add	a5,a4,a5
    80002694:	00078783          	lb	a5,0(a5)
    80002698:	02078063          	beqz	a5,800026b8 <prvInitialiseNewTask+0x100>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:891 (discriminator 2)
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    8000269c:	fe843783          	ld	a5,-24(s0)
    800026a0:	00178793          	addi	a5,a5,1
    800026a4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:891 (discriminator 1)
    800026a8:	fe843703          	ld	a4,-24(s0)
    800026ac:	00f00793          	li	a5,15
    800026b0:	fae7fce3          	bgeu	a5,a4,80002668 <prvInitialiseNewTask+0xb0>
    800026b4:	0080006f          	j	800026bc <prvInitialiseNewTask+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:900
			{
				break;
    800026b8:	00000013          	nop
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:910
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    800026bc:	fa843783          	ld	a5,-88(s0)
    800026c0:	06078ba3          	sb	zero,119(a5)
    800026c4:	00c0006f          	j	800026d0 <prvInitialiseNewTask+0x118>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:916
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    800026c8:	fa843783          	ld	a5,-88(s0)
    800026cc:	06078423          	sb	zero,104(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:921
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    800026d0:	fb843703          	ld	a4,-72(s0)
    800026d4:	00400793          	li	a5,4
    800026d8:	00e7f663          	bgeu	a5,a4,800026e4 <prvInitialiseNewTask+0x12c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:923
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    800026dc:	00400793          	li	a5,4
    800026e0:	faf43c23          	sd	a5,-72(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:930
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    800026e4:	fa843783          	ld	a5,-88(s0)
    800026e8:	fb843703          	ld	a4,-72(s0)
    800026ec:	04e7bc23          	sd	a4,88(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:933
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    800026f0:	fa843783          	ld	a5,-88(s0)
    800026f4:	fb843703          	ld	a4,-72(s0)
    800026f8:	08e7b023          	sd	a4,128(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:934
		pxNewTCB->uxMutexesHeld = 0;
    800026fc:	fa843783          	ld	a5,-88(s0)
    80002700:	0807b423          	sd	zero,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:938
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    80002704:	fa843783          	ld	a5,-88(s0)
    80002708:	00878793          	addi	a5,a5,8
    8000270c:	00078513          	mv	a0,a5
    80002710:	e01fe0ef          	jal	ra,80001510 <vListInitialiseItem>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:939
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    80002714:	fa843783          	ld	a5,-88(s0)
    80002718:	03078793          	addi	a5,a5,48
    8000271c:	00078513          	mv	a0,a5
    80002720:	df1fe0ef          	jal	ra,80001510 <vListInitialiseItem>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:943

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    80002724:	fa843783          	ld	a5,-88(s0)
    80002728:	fa843703          	ld	a4,-88(s0)
    8000272c:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:946

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    80002730:	00500713          	li	a4,5
    80002734:	fb843783          	ld	a5,-72(s0)
    80002738:	40f70733          	sub	a4,a4,a5
    8000273c:	fa843783          	ld	a5,-88(s0)
    80002740:	02e7b823          	sd	a4,48(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:947
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    80002744:	fa843783          	ld	a5,-88(s0)
    80002748:	fa843703          	ld	a4,-88(s0)
    8000274c:	04e7b423          	sd	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:951

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    80002750:	fa843783          	ld	a5,-88(s0)
    80002754:	0607bc23          	sd	zero,120(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:989
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    80002758:	fa843783          	ld	a5,-88(s0)
    8000275c:	0807a823          	sw	zero,144(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:990
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    80002760:	fa843783          	ld	a5,-88(s0)
    80002764:	08078a23          	sb	zero,148(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1003
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
    80002768:	fa843783          	ld	a5,-88(s0)
    8000276c:	08078aa3          	sb	zero,149(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1053
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    80002770:	fc043603          	ld	a2,-64(s0)
    80002774:	fd843583          	ld	a1,-40(s0)
    80002778:	fe043503          	ld	a0,-32(s0)
    8000277c:	c85fe0ef          	jal	ra,80001400 <pxPortInitialiseStack>
    80002780:	00050713          	mv	a4,a0
    80002784:	fa843783          	ld	a5,-88(s0)
    80002788:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1059
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    8000278c:	fb043783          	ld	a5,-80(s0)
    80002790:	00078863          	beqz	a5,800027a0 <prvInitialiseNewTask+0x1e8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1063
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    80002794:	fb043783          	ld	a5,-80(s0)
    80002798:	fa843703          	ld	a4,-88(s0)
    8000279c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1069
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    800027a0:	00000013          	nop
    800027a4:	05813083          	ld	ra,88(sp)
    800027a8:	05013403          	ld	s0,80(sp)
    800027ac:	06010113          	addi	sp,sp,96
    800027b0:	00008067          	ret

00000000800027b4 <prvAddNewTaskToReadyList>:
prvAddNewTaskToReadyList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1073
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    800027b4:	fe010113          	addi	sp,sp,-32
    800027b8:	00113c23          	sd	ra,24(sp)
    800027bc:	00813823          	sd	s0,16(sp)
    800027c0:	02010413          	addi	s0,sp,32
    800027c4:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1076
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    800027c8:	038010ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1078
	{
		uxCurrentNumberOfTasks++;
    800027cc:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    800027d0:	0007b783          	ld	a5,0(a5)
    800027d4:	00178713          	addi	a4,a5,1
    800027d8:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    800027dc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1079
		if( pxCurrentTCB == NULL )
    800027e0:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800027e4:	0007b783          	ld	a5,0(a5)
    800027e8:	02079463          	bnez	a5,80002810 <prvAddNewTaskToReadyList+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1083
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    800027ec:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800027f0:	fe843703          	ld	a4,-24(s0)
    800027f4:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1085

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    800027f8:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    800027fc:	0007b703          	ld	a4,0(a5)
    80002800:	00100793          	li	a5,1
    80002804:	02f71e63          	bne	a4,a5,80002840 <prvAddNewTaskToReadyList+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1090
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    80002808:	3f9000ef          	jal	ra,80003400 <prvInitialiseTaskLists>
    8000280c:	0340006f          	j	80002840 <prvAddNewTaskToReadyList+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1102
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    80002810:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    80002814:	0007b783          	ld	a5,0(a5)
    80002818:	02079463          	bnez	a5,80002840 <prvAddNewTaskToReadyList+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1104
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    8000281c:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002820:	0007b783          	ld	a5,0(a5)
    80002824:	0587b703          	ld	a4,88(a5)
    80002828:	fe843783          	ld	a5,-24(s0)
    8000282c:	0587b783          	ld	a5,88(a5)
    80002830:	00e7e863          	bltu	a5,a4,80002840 <prvAddNewTaskToReadyList+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1106
				{
					pxCurrentTCB = pxNewTCB;
    80002834:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002838:	fe843703          	ld	a4,-24(s0)
    8000283c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1119
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    80002840:	9a818793          	addi	a5,gp,-1624 # 80004d28 <uxTaskNumber>
    80002844:	0007b783          	ld	a5,0(a5)
    80002848:	00178713          	addi	a4,a5,1
    8000284c:	9a818793          	addi	a5,gp,-1624 # 80004d28 <uxTaskNumber>
    80002850:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1129
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    80002854:	fe843783          	ld	a5,-24(s0)
    80002858:	0587b783          	ld	a5,88(a5)
    8000285c:	0007879b          	sext.w	a5,a5
    80002860:	00078713          	mv	a4,a5
    80002864:	00100793          	li	a5,1
    80002868:	00e79733          	sll	a4,a5,a4
    8000286c:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002870:	0007b783          	ld	a5,0(a5)
    80002874:	00f76733          	or	a4,a4,a5
    80002878:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    8000287c:	00e7b023          	sd	a4,0(a5)
    80002880:	fe843783          	ld	a5,-24(s0)
    80002884:	0587b703          	ld	a4,88(a5)
    80002888:	00070793          	mv	a5,a4
    8000288c:	00279793          	slli	a5,a5,0x2
    80002890:	00e787b3          	add	a5,a5,a4
    80002894:	00379793          	slli	a5,a5,0x3
    80002898:	00102717          	auipc	a4,0x102
    8000289c:	56870713          	addi	a4,a4,1384 # 80104e00 <pxReadyTasksLists>
    800028a0:	00e78733          	add	a4,a5,a4
    800028a4:	fe843783          	ld	a5,-24(s0)
    800028a8:	00878793          	addi	a5,a5,8
    800028ac:	00078593          	mv	a1,a5
    800028b0:	00070513          	mv	a0,a4
    800028b4:	c85fe0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1133

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    800028b8:	791000ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1135

	if( xSchedulerRunning != pdFALSE )
    800028bc:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    800028c0:	0007b783          	ld	a5,0(a5)
    800028c4:	02078063          	beqz	a5,800028e4 <prvAddNewTaskToReadyList+0x130>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1139
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    800028c8:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800028cc:	0007b783          	ld	a5,0(a5)
    800028d0:	0587b703          	ld	a4,88(a5)
    800028d4:	fe843783          	ld	a5,-24(s0)
    800028d8:	0587b783          	ld	a5,88(a5)
    800028dc:	00f77463          	bgeu	a4,a5,800028e4 <prvAddNewTaskToReadyList+0x130>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1141
		{
			taskYIELD_IF_USING_PREEMPTION();
    800028e0:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1152
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    800028e4:	00000013          	nop
    800028e8:	01813083          	ld	ra,24(sp)
    800028ec:	01013403          	ld	s0,16(sp)
    800028f0:	02010113          	addi	sp,sp,32
    800028f4:	00008067          	ret

00000000800028f8 <vTaskDelay>:
vTaskDelay():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1334
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    800028f8:	fd010113          	addi	sp,sp,-48
    800028fc:	02113423          	sd	ra,40(sp)
    80002900:	02813023          	sd	s0,32(sp)
    80002904:	03010413          	addi	s0,sp,48
    80002908:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1335
	BaseType_t xAlreadyYielded = pdFALSE;
    8000290c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1338

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    80002910:	fd843783          	ld	a5,-40(s0)
    80002914:	02078a63          	beqz	a5,80002948 <vTaskDelay+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1340
		{
			configASSERT( uxSchedulerSuspended == 0 );
    80002918:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    8000291c:	0007b783          	ld	a5,0(a5)
    80002920:	00078863          	beqz	a5,80002930 <vTaskDelay+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1340 (discriminator 1)
    80002924:	30047073          	csrci	mstatus,8
    80002928:	00100073          	ebreak
    8000292c:	0000006f          	j	8000292c <vTaskDelay+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1341
			vTaskSuspendAll();
    80002930:	0e8000ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1352
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    80002934:	00000593          	li	a1,0
    80002938:	fd843503          	ld	a0,-40(s0)
    8000293c:	76d000ef          	jal	ra,800038a8 <prvAddCurrentTaskToDelayedList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1354
			}
			xAlreadyYielded = xTaskResumeAll();
    80002940:	108000ef          	jal	ra,80002a48 <xTaskResumeAll>
    80002944:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1363
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    80002948:	fe843783          	ld	a5,-24(s0)
    8000294c:	00079463          	bnez	a5,80002954 <vTaskDelay+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1365
		{
			portYIELD_WITHIN_API();
    80002950:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1371
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    80002954:	00000013          	nop
    80002958:	02813083          	ld	ra,40(sp)
    8000295c:	02013403          	ld	s0,32(sp)
    80002960:	03010113          	addi	sp,sp,48
    80002964:	00008067          	ret

0000000080002968 <vTaskStartScheduler>:
vTaskStartScheduler():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:1968

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    80002968:	fe010113          	addi	sp,sp,-32
    8000296c:	00113c23          	sd	ra,24(sp)
    80002970:	00813823          	sd	s0,16(sp)
    80002974:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2001
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    80002978:	9b818793          	addi	a5,gp,-1608 # 80004d38 <xIdleTaskHandle>
    8000297c:	00000713          	li	a4,0
    80002980:	00000693          	li	a3,0
    80002984:	0aa00613          	li	a2,170
    80002988:	00002597          	auipc	a1,0x2
    8000298c:	04858593          	addi	a1,a1,72 # 800049d0 <memset+0x3c0>
    80002990:	00001517          	auipc	a0,0x1
    80002994:	a5050513          	addi	a0,a0,-1456 # 800033e0 <prvIdleTask>
    80002998:	b41ff0ef          	jal	ra,800024d8 <xTaskCreate>
    8000299c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2012
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    800029a0:	fe843703          	ld	a4,-24(s0)
    800029a4:	00100793          	li	a5,1
    800029a8:	00f71663          	bne	a4,a5,800029b4 <vTaskStartScheduler+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2014
		{
			xReturn = xTimerCreateTimerTask();
    800029ac:	050010ef          	jal	ra,800039fc <xTimerCreateTimerTask>
    800029b0:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2023
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    800029b4:	fe843703          	ld	a4,-24(s0)
    800029b8:	00100793          	li	a5,1
    800029bc:	02f71863          	bne	a4,a5,800029ec <vTaskStartScheduler+0x84>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2039
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    800029c0:	30047073          	csrci	mstatus,8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2049
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    800029c4:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    800029c8:	fff00713          	li	a4,-1
    800029cc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2050
		xSchedulerRunning = pdTRUE;
    800029d0:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    800029d4:	00100713          	li	a4,1
    800029d8:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2051
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    800029dc:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    800029e0:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2065

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    800029e4:	e38fe0ef          	jal	ra,8000101c <xPortStartScheduler>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2086
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    800029e8:	01c0006f          	j	80002a04 <vTaskStartScheduler+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2080
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    800029ec:	fe843703          	ld	a4,-24(s0)
    800029f0:	fff00793          	li	a5,-1
    800029f4:	00f71863          	bne	a4,a5,80002a04 <vTaskStartScheduler+0x9c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2080 (discriminator 1)
    800029f8:	30047073          	csrci	mstatus,8
    800029fc:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2080 (discriminator 2)
    80002a00:	0000006f          	j	80002a00 <vTaskStartScheduler+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2086
}
    80002a04:	00000013          	nop
    80002a08:	01813083          	ld	ra,24(sp)
    80002a0c:	01013403          	ld	s0,16(sp)
    80002a10:	02010113          	addi	sp,sp,32
    80002a14:	00008067          	ret

0000000080002a18 <vTaskSuspendAll>:
vTaskSuspendAll():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2101
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    80002a18:	ff010113          	addi	sp,sp,-16
    80002a1c:	00813423          	sd	s0,8(sp)
    80002a20:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2106
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    80002a24:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a28:	0007b783          	ld	a5,0(a5)
    80002a2c:	00178713          	addi	a4,a5,1
    80002a30:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a34:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2108
	portMEMORY_BARRIER();
}
    80002a38:	00000013          	nop
    80002a3c:	00813403          	ld	s0,8(sp)
    80002a40:	01010113          	addi	sp,sp,16
    80002a44:	00008067          	ret

0000000080002a48 <xTaskResumeAll>:
xTaskResumeAll():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2175

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    80002a48:	fd010113          	addi	sp,sp,-48
    80002a4c:	02113423          	sd	ra,40(sp)
    80002a50:	02813023          	sd	s0,32(sp)
    80002a54:	03010413          	addi	s0,sp,48
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2176
TCB_t *pxTCB = NULL;
    80002a58:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2177
BaseType_t xAlreadyYielded = pdFALSE;
    80002a5c:	fe043023          	sd	zero,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2181

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    80002a60:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a64:	0007b783          	ld	a5,0(a5)
    80002a68:	00079863          	bnez	a5,80002a78 <xTaskResumeAll+0x30>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2181 (discriminator 1)
    80002a6c:	30047073          	csrci	mstatus,8
    80002a70:	00100073          	ebreak
    80002a74:	0000006f          	j	80002a74 <xTaskResumeAll+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2188
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    80002a78:	589000ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2190
	{
		--uxSchedulerSuspended;
    80002a7c:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a80:	0007b783          	ld	a5,0(a5)
    80002a84:	fff78713          	addi	a4,a5,-1
    80002a88:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a8c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2192

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80002a90:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002a94:	0007b783          	ld	a5,0(a5)
    80002a98:	14079663          	bnez	a5,80002be4 <xTaskResumeAll+0x19c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2194
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    80002a9c:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    80002aa0:	0007b783          	ld	a5,0(a5)
    80002aa4:	14078063          	beqz	a5,80002be4 <xTaskResumeAll+0x19c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2198
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    80002aa8:	0c00006f          	j	80002b68 <xTaskResumeAll+0x120>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2200
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    80002aac:	00102797          	auipc	a5,0x102
    80002ab0:	46c78793          	addi	a5,a5,1132 # 80104f18 <xPendingReadyList>
    80002ab4:	0187b783          	ld	a5,24(a5)
    80002ab8:	0187b783          	ld	a5,24(a5)
    80002abc:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2201
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    80002ac0:	fe843783          	ld	a5,-24(s0)
    80002ac4:	03078793          	addi	a5,a5,48
    80002ac8:	00078513          	mv	a0,a5
    80002acc:	bc9fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2202
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    80002ad0:	fe843783          	ld	a5,-24(s0)
    80002ad4:	00878793          	addi	a5,a5,8
    80002ad8:	00078513          	mv	a0,a5
    80002adc:	bb9fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2203
					prvAddTaskToReadyList( pxTCB );
    80002ae0:	fe843783          	ld	a5,-24(s0)
    80002ae4:	0587b783          	ld	a5,88(a5)
    80002ae8:	0007879b          	sext.w	a5,a5
    80002aec:	00078713          	mv	a4,a5
    80002af0:	00100793          	li	a5,1
    80002af4:	00e79733          	sll	a4,a5,a4
    80002af8:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002afc:	0007b783          	ld	a5,0(a5)
    80002b00:	00f76733          	or	a4,a4,a5
    80002b04:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002b08:	00e7b023          	sd	a4,0(a5)
    80002b0c:	fe843783          	ld	a5,-24(s0)
    80002b10:	0587b703          	ld	a4,88(a5)
    80002b14:	00070793          	mv	a5,a4
    80002b18:	00279793          	slli	a5,a5,0x2
    80002b1c:	00e787b3          	add	a5,a5,a4
    80002b20:	00379793          	slli	a5,a5,0x3
    80002b24:	00102717          	auipc	a4,0x102
    80002b28:	2dc70713          	addi	a4,a4,732 # 80104e00 <pxReadyTasksLists>
    80002b2c:	00e78733          	add	a4,a5,a4
    80002b30:	fe843783          	ld	a5,-24(s0)
    80002b34:	00878793          	addi	a5,a5,8
    80002b38:	00078593          	mv	a1,a5
    80002b3c:	00070513          	mv	a0,a4
    80002b40:	9f9fe0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2207

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    80002b44:	fe843783          	ld	a5,-24(s0)
    80002b48:	0587b703          	ld	a4,88(a5)
    80002b4c:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002b50:	0007b783          	ld	a5,0(a5)
    80002b54:	0587b783          	ld	a5,88(a5)
    80002b58:	00f76863          	bltu	a4,a5,80002b68 <xTaskResumeAll+0x120>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2209
					{
						xYieldPending = pdTRUE;
    80002b5c:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002b60:	00100713          	li	a4,1
    80002b64:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2198
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    80002b68:	00102797          	auipc	a5,0x102
    80002b6c:	3b078793          	addi	a5,a5,944 # 80104f18 <xPendingReadyList>
    80002b70:	0007b783          	ld	a5,0(a5)
    80002b74:	f2079ce3          	bnez	a5,80002aac <xTaskResumeAll+0x64>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2217
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    80002b78:	fe843783          	ld	a5,-24(s0)
    80002b7c:	00078463          	beqz	a5,80002b84 <xTaskResumeAll+0x13c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2225
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    80002b80:	21d000ef          	jal	ra,8000359c <prvResetNextTaskUnblockTime>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2233
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    80002b84:	99018793          	addi	a5,gp,-1648 # 80004d10 <uxPendedTicks>
    80002b88:	0007b783          	ld	a5,0(a5)
    80002b8c:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2235

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    80002b90:	fd843783          	ld	a5,-40(s0)
    80002b94:	02078c63          	beqz	a5,80002bcc <xTaskResumeAll+0x184>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2239
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    80002b98:	094000ef          	jal	ra,80002c2c <xTaskIncrementTick>
    80002b9c:	00050793          	mv	a5,a0
    80002ba0:	00078863          	beqz	a5,80002bb0 <xTaskResumeAll+0x168>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2241
							{
								xYieldPending = pdTRUE;
    80002ba4:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002ba8:	00100713          	li	a4,1
    80002bac:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2247
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    80002bb0:	fd843783          	ld	a5,-40(s0)
    80002bb4:	fff78793          	addi	a5,a5,-1
    80002bb8:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2248
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    80002bbc:	fd843783          	ld	a5,-40(s0)
    80002bc0:	fc079ce3          	bnez	a5,80002b98 <xTaskResumeAll+0x150>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2250

						uxPendedTicks = 0;
    80002bc4:	99018793          	addi	a5,gp,-1648 # 80004d10 <uxPendedTicks>
    80002bc8:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2258
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    80002bcc:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002bd0:	0007b783          	ld	a5,0(a5)
    80002bd4:	00078863          	beqz	a5,80002be4 <xTaskResumeAll+0x19c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2262
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    80002bd8:	00100793          	li	a5,1
    80002bdc:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2265
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    80002be0:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2278
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    80002be4:	465000ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2280

	return xAlreadyYielded;
    80002be8:	fe043783          	ld	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2281
}
    80002bec:	00078513          	mv	a0,a5
    80002bf0:	02813083          	ld	ra,40(sp)
    80002bf4:	02013403          	ld	s0,32(sp)
    80002bf8:	03010113          	addi	sp,sp,48
    80002bfc:	00008067          	ret

0000000080002c00 <xTaskGetTickCount>:
xTaskGetTickCount():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2285
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    80002c00:	fe010113          	addi	sp,sp,-32
    80002c04:	00813c23          	sd	s0,24(sp)
    80002c08:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2291
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    80002c0c:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    80002c10:	0007b783          	ld	a5,0(a5)
    80002c14:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2295
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    80002c18:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2296
}
    80002c1c:	00078513          	mv	a0,a5
    80002c20:	01813403          	ld	s0,24(sp)
    80002c24:	02010113          	addi	sp,sp,32
    80002c28:	00008067          	ret

0000000080002c2c <xTaskIncrementTick>:
xTaskIncrementTick():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2666

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    80002c2c:	fc010113          	addi	sp,sp,-64
    80002c30:	02113c23          	sd	ra,56(sp)
    80002c34:	02813823          	sd	s0,48(sp)
    80002c38:	04010413          	addi	s0,sp,64
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2669
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    80002c3c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2675

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80002c40:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002c44:	0007b783          	ld	a5,0(a5)
    80002c48:	1e079263          	bnez	a5,80002e2c <xTaskIncrementTick+0x200>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2679
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    80002c4c:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    80002c50:	0007b783          	ld	a5,0(a5)
    80002c54:	00178793          	addi	a5,a5,1
    80002c58:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2683

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    80002c5c:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    80002c60:	fe043703          	ld	a4,-32(s0)
    80002c64:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2685

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    80002c68:	fe043783          	ld	a5,-32(s0)
    80002c6c:	06079063          	bnez	a5,80002ccc <xTaskIncrementTick+0xa0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2687
		{
			taskSWITCH_DELAYED_LISTS();
    80002c70:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80002c74:	0007b783          	ld	a5,0(a5)
    80002c78:	0007b783          	ld	a5,0(a5)
    80002c7c:	00078863          	beqz	a5,80002c8c <xTaskIncrementTick+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2687 (discriminator 1)
    80002c80:	30047073          	csrci	mstatus,8
    80002c84:	00100073          	ebreak
    80002c88:	0000006f          	j	80002c88 <xTaskIncrementTick+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2687 (discriminator 2)
    80002c8c:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80002c90:	0007b783          	ld	a5,0(a5)
    80002c94:	fcf43c23          	sd	a5,-40(s0)
    80002c98:	96018793          	addi	a5,gp,-1696 # 80004ce0 <pxOverflowDelayedTaskList>
    80002c9c:	0007b703          	ld	a4,0(a5)
    80002ca0:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80002ca4:	00e7b023          	sd	a4,0(a5)
    80002ca8:	96018793          	addi	a5,gp,-1696 # 80004ce0 <pxOverflowDelayedTaskList>
    80002cac:	fd843703          	ld	a4,-40(s0)
    80002cb0:	00e7b023          	sd	a4,0(a5)
    80002cb4:	9a018793          	addi	a5,gp,-1632 # 80004d20 <xNumOfOverflows>
    80002cb8:	0007b783          	ld	a5,0(a5)
    80002cbc:	00178713          	addi	a4,a5,1
    80002cc0:	9a018793          	addi	a5,gp,-1632 # 80004d20 <xNumOfOverflows>
    80002cc4:	00e7b023          	sd	a4,0(a5)
    80002cc8:	0d5000ef          	jal	ra,8000359c <prvResetNextTaskUnblockTime>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2698

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    80002ccc:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    80002cd0:	0007b783          	ld	a5,0(a5)
    80002cd4:	fe043703          	ld	a4,-32(s0)
    80002cd8:	10f76a63          	bltu	a4,a5,80002dec <xTaskIncrementTick+0x1c0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2702
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    80002cdc:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80002ce0:	0007b783          	ld	a5,0(a5)
    80002ce4:	0007b783          	ld	a5,0(a5)
    80002ce8:	00079a63          	bnez	a5,80002cfc <xTaskIncrementTick+0xd0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2709
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    80002cec:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    80002cf0:	fff00713          	li	a4,-1
    80002cf4:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2710
					break;
    80002cf8:	0f40006f          	j	80002dec <xTaskIncrementTick+0x1c0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2718
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    80002cfc:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80002d00:	0007b783          	ld	a5,0(a5)
    80002d04:	0187b783          	ld	a5,24(a5)
    80002d08:	0187b783          	ld	a5,24(a5)
    80002d0c:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2719
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    80002d10:	fd043783          	ld	a5,-48(s0)
    80002d14:	0087b783          	ld	a5,8(a5)
    80002d18:	fcf43423          	sd	a5,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2721

					if( xConstTickCount < xItemValue )
    80002d1c:	fe043703          	ld	a4,-32(s0)
    80002d20:	fc843783          	ld	a5,-56(s0)
    80002d24:	00f77a63          	bgeu	a4,a5,80002d38 <xTaskIncrementTick+0x10c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2728
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    80002d28:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    80002d2c:	fc843703          	ld	a4,-56(s0)
    80002d30:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2729
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    80002d34:	0b80006f          	j	80002dec <xTaskIncrementTick+0x1c0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2737
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    80002d38:	fd043783          	ld	a5,-48(s0)
    80002d3c:	00878793          	addi	a5,a5,8
    80002d40:	00078513          	mv	a0,a5
    80002d44:	951fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2741

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    80002d48:	fd043783          	ld	a5,-48(s0)
    80002d4c:	0507b783          	ld	a5,80(a5)
    80002d50:	00078a63          	beqz	a5,80002d64 <xTaskIncrementTick+0x138>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2743
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    80002d54:	fd043783          	ld	a5,-48(s0)
    80002d58:	03078793          	addi	a5,a5,48
    80002d5c:	00078513          	mv	a0,a5
    80002d60:	935fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2752
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    80002d64:	fd043783          	ld	a5,-48(s0)
    80002d68:	0587b783          	ld	a5,88(a5)
    80002d6c:	0007879b          	sext.w	a5,a5
    80002d70:	00078713          	mv	a4,a5
    80002d74:	00100793          	li	a5,1
    80002d78:	00e79733          	sll	a4,a5,a4
    80002d7c:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002d80:	0007b783          	ld	a5,0(a5)
    80002d84:	00f76733          	or	a4,a4,a5
    80002d88:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002d8c:	00e7b023          	sd	a4,0(a5)
    80002d90:	fd043783          	ld	a5,-48(s0)
    80002d94:	0587b703          	ld	a4,88(a5)
    80002d98:	00070793          	mv	a5,a4
    80002d9c:	00279793          	slli	a5,a5,0x2
    80002da0:	00e787b3          	add	a5,a5,a4
    80002da4:	00379793          	slli	a5,a5,0x3
    80002da8:	00102717          	auipc	a4,0x102
    80002dac:	05870713          	addi	a4,a4,88 # 80104e00 <pxReadyTasksLists>
    80002db0:	00e78733          	add	a4,a5,a4
    80002db4:	fd043783          	ld	a5,-48(s0)
    80002db8:	00878793          	addi	a5,a5,8
    80002dbc:	00078593          	mv	a1,a5
    80002dc0:	00070513          	mv	a0,a4
    80002dc4:	f74fe0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2762
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    80002dc8:	fd043783          	ld	a5,-48(s0)
    80002dcc:	0587b703          	ld	a4,88(a5)
    80002dd0:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002dd4:	0007b783          	ld	a5,0(a5)
    80002dd8:	0587b783          	ld	a5,88(a5)
    80002ddc:	f0f760e3          	bltu	a4,a5,80002cdc <xTaskIncrementTick+0xb0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2764
						{
							xSwitchRequired = pdTRUE;
    80002de0:	00100793          	li	a5,1
    80002de4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2702
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    80002de8:	ef5ff06f          	j	80002cdc <xTaskIncrementTick+0xb0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2781
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    80002dec:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002df0:	0007b783          	ld	a5,0(a5)
    80002df4:	0587b703          	ld	a4,88(a5)
    80002df8:	00102697          	auipc	a3,0x102
    80002dfc:	00868693          	addi	a3,a3,8 # 80104e00 <pxReadyTasksLists>
    80002e00:	00070793          	mv	a5,a4
    80002e04:	00279793          	slli	a5,a5,0x2
    80002e08:	00e787b3          	add	a5,a5,a4
    80002e0c:	00379793          	slli	a5,a5,0x3
    80002e10:	00f687b3          	add	a5,a3,a5
    80002e14:	0007b703          	ld	a4,0(a5)
    80002e18:	00100793          	li	a5,1
    80002e1c:	02e7f263          	bgeu	a5,a4,80002e40 <xTaskIncrementTick+0x214>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2783
			{
				xSwitchRequired = pdTRUE;
    80002e20:	00100793          	li	a5,1
    80002e24:	fef43423          	sd	a5,-24(s0)
    80002e28:	0180006f          	j	80002e40 <xTaskIncrementTick+0x214>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2809
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    80002e2c:	99018793          	addi	a5,gp,-1648 # 80004d10 <uxPendedTicks>
    80002e30:	0007b783          	ld	a5,0(a5)
    80002e34:	00178713          	addi	a4,a5,1
    80002e38:	99018793          	addi	a5,gp,-1648 # 80004d10 <uxPendedTicks>
    80002e3c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2822
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    80002e40:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002e44:	0007b783          	ld	a5,0(a5)
    80002e48:	00078663          	beqz	a5,80002e54 <xTaskIncrementTick+0x228>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2824
		{
			xSwitchRequired = pdTRUE;
    80002e4c:	00100793          	li	a5,1
    80002e50:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2833
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    80002e54:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2834
}
    80002e58:	00078513          	mv	a0,a5
    80002e5c:	03813083          	ld	ra,56(sp)
    80002e60:	03013403          	ld	s0,48(sp)
    80002e64:	04010113          	addi	sp,sp,64
    80002e68:	00008067          	ret

0000000080002e6c <vTaskSwitchContext>:
vTaskSwitchContext():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2948

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    80002e6c:	fd010113          	addi	sp,sp,-48
    80002e70:	02113423          	sd	ra,40(sp)
    80002e74:	02813023          	sd	s0,32(sp)
    80002e78:	03010413          	addi	s0,sp,48
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2949
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    80002e7c:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80002e80:	0007b783          	ld	a5,0(a5)
    80002e84:	00078a63          	beqz	a5,80002e98 <vTaskSwitchContext+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2953
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    80002e88:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002e8c:	00100713          	li	a4,1
    80002e90:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3017
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    80002e94:	18c0006f          	j	80003020 <vTaskSwitchContext+0x1b4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2957
		xYieldPending = pdFALSE;
    80002e98:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80002e9c:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2988
		taskCHECK_FOR_STACK_OVERFLOW();
    80002ea0:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002ea4:	0007b783          	ld	a5,0(a5)
    80002ea8:	0607b783          	ld	a5,96(a5)
    80002eac:	fef43423          	sd	a5,-24(s0)
    80002eb0:	a5a5a7b7          	lui	a5,0xa5a5a
    80002eb4:	5a578793          	addi	a5,a5,1445 # ffffffffa5a5a5a5 <__freertos_irq_stack_top+0xffffffff1eddd5c5>
    80002eb8:	fef42223          	sw	a5,-28(s0)
    80002ebc:	fe843783          	ld	a5,-24(s0)
    80002ec0:	0007a703          	lw	a4,0(a5)
    80002ec4:	fe442783          	lw	a5,-28(s0)
    80002ec8:	0007879b          	sext.w	a5,a5
    80002ecc:	04e79663          	bne	a5,a4,80002f18 <vTaskSwitchContext+0xac>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2988 (discriminator 2)
    80002ed0:	fe843783          	ld	a5,-24(s0)
    80002ed4:	00478793          	addi	a5,a5,4
    80002ed8:	0007a703          	lw	a4,0(a5)
    80002edc:	fe442783          	lw	a5,-28(s0)
    80002ee0:	0007879b          	sext.w	a5,a5
    80002ee4:	02e79a63          	bne	a5,a4,80002f18 <vTaskSwitchContext+0xac>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2988 (discriminator 4)
    80002ee8:	fe843783          	ld	a5,-24(s0)
    80002eec:	00878793          	addi	a5,a5,8
    80002ef0:	0007a703          	lw	a4,0(a5)
    80002ef4:	fe442783          	lw	a5,-28(s0)
    80002ef8:	0007879b          	sext.w	a5,a5
    80002efc:	00e79e63          	bne	a5,a4,80002f18 <vTaskSwitchContext+0xac>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2988 (discriminator 6)
    80002f00:	fe843783          	ld	a5,-24(s0)
    80002f04:	00c78793          	addi	a5,a5,12
    80002f08:	0007a703          	lw	a4,0(a5)
    80002f0c:	fe442783          	lw	a5,-28(s0)
    80002f10:	0007879b          	sext.w	a5,a5
    80002f14:	02e78263          	beq	a5,a4,80002f38 <vTaskSwitchContext+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2988 (discriminator 7)
    80002f18:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002f1c:	0007b703          	ld	a4,0(a5)
    80002f20:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80002f24:	0007b783          	ld	a5,0(a5)
    80002f28:	06878793          	addi	a5,a5,104
    80002f2c:	00078593          	mv	a1,a5
    80002f30:	00070513          	mv	a0,a4
    80002f34:	564010ef          	jal	ra,80004498 <vApplicationStackOverflowHook>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2999
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    80002f38:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80002f3c:	0007b783          	ld	a5,0(a5)
    80002f40:	0007879b          	sext.w	a5,a5
    80002f44:	02079793          	slli	a5,a5,0x20
    80002f48:	0207d793          	srli	a5,a5,0x20
    80002f4c:	00078513          	mv	a0,a5
    80002f50:	568010ef          	jal	ra,800044b8 <__clzdi2>
    80002f54:	00050793          	mv	a5,a0
    80002f58:	02079793          	slli	a5,a5,0x20
    80002f5c:	0207d793          	srli	a5,a5,0x20
    80002f60:	fe078793          	addi	a5,a5,-32
    80002f64:	0007879b          	sext.w	a5,a5
    80002f68:	00078713          	mv	a4,a5
    80002f6c:	01f00793          	li	a5,31
    80002f70:	40e787b3          	sub	a5,a5,a4
    80002f74:	fcf43c23          	sd	a5,-40(s0)
    80002f78:	00102697          	auipc	a3,0x102
    80002f7c:	e8868693          	addi	a3,a3,-376 # 80104e00 <pxReadyTasksLists>
    80002f80:	fd843703          	ld	a4,-40(s0)
    80002f84:	00070793          	mv	a5,a4
    80002f88:	00279793          	slli	a5,a5,0x2
    80002f8c:	00e787b3          	add	a5,a5,a4
    80002f90:	00379793          	slli	a5,a5,0x3
    80002f94:	00f687b3          	add	a5,a3,a5
    80002f98:	0007b783          	ld	a5,0(a5)
    80002f9c:	00079863          	bnez	a5,80002fac <vTaskSwitchContext+0x140>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2999 (discriminator 1)
    80002fa0:	30047073          	csrci	mstatus,8
    80002fa4:	00100073          	ebreak
    80002fa8:	0000006f          	j	80002fa8 <vTaskSwitchContext+0x13c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2999 (discriminator 2)
    80002fac:	fd843703          	ld	a4,-40(s0)
    80002fb0:	00070793          	mv	a5,a4
    80002fb4:	00279793          	slli	a5,a5,0x2
    80002fb8:	00e787b3          	add	a5,a5,a4
    80002fbc:	00379793          	slli	a5,a5,0x3
    80002fc0:	00102717          	auipc	a4,0x102
    80002fc4:	e4070713          	addi	a4,a4,-448 # 80104e00 <pxReadyTasksLists>
    80002fc8:	00e787b3          	add	a5,a5,a4
    80002fcc:	fcf43823          	sd	a5,-48(s0)
    80002fd0:	fd043783          	ld	a5,-48(s0)
    80002fd4:	0087b783          	ld	a5,8(a5)
    80002fd8:	0087b703          	ld	a4,8(a5)
    80002fdc:	fd043783          	ld	a5,-48(s0)
    80002fe0:	00e7b423          	sd	a4,8(a5)
    80002fe4:	fd043783          	ld	a5,-48(s0)
    80002fe8:	0087b703          	ld	a4,8(a5)
    80002fec:	fd043783          	ld	a5,-48(s0)
    80002ff0:	01078793          	addi	a5,a5,16
    80002ff4:	00f71c63          	bne	a4,a5,8000300c <vTaskSwitchContext+0x1a0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2999 (discriminator 3)
    80002ff8:	fd043783          	ld	a5,-48(s0)
    80002ffc:	0087b783          	ld	a5,8(a5)
    80003000:	0087b703          	ld	a4,8(a5)
    80003004:	fd043783          	ld	a5,-48(s0)
    80003008:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:2999 (discriminator 5)
    8000300c:	fd043783          	ld	a5,-48(s0)
    80003010:	0087b783          	ld	a5,8(a5)
    80003014:	0187b703          	ld	a4,24(a5)
    80003018:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    8000301c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3017
}
    80003020:	00000013          	nop
    80003024:	02813083          	ld	ra,40(sp)
    80003028:	02013403          	ld	s0,32(sp)
    8000302c:	03010113          	addi	sp,sp,48
    80003030:	00008067          	ret

0000000080003034 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3021
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    80003034:	fe010113          	addi	sp,sp,-32
    80003038:	00113c23          	sd	ra,24(sp)
    8000303c:	00813823          	sd	s0,16(sp)
    80003040:	02010413          	addi	s0,sp,32
    80003044:	fea43423          	sd	a0,-24(s0)
    80003048:	feb43023          	sd	a1,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3022
	configASSERT( pxEventList );
    8000304c:	fe843783          	ld	a5,-24(s0)
    80003050:	00079863          	bnez	a5,80003060 <vTaskPlaceOnEventList+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3022 (discriminator 1)
    80003054:	30047073          	csrci	mstatus,8
    80003058:	00100073          	ebreak
    8000305c:	0000006f          	j	8000305c <vTaskPlaceOnEventList+0x28>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3031

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    80003060:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003064:	0007b783          	ld	a5,0(a5)
    80003068:	03078793          	addi	a5,a5,48
    8000306c:	00078593          	mv	a1,a5
    80003070:	fe843503          	ld	a0,-24(s0)
    80003074:	d4cfe0ef          	jal	ra,800015c0 <vListInsert>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3033

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    80003078:	00100593          	li	a1,1
    8000307c:	fe043503          	ld	a0,-32(s0)
    80003080:	029000ef          	jal	ra,800038a8 <prvAddCurrentTaskToDelayedList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3034
}
    80003084:	00000013          	nop
    80003088:	01813083          	ld	ra,24(sp)
    8000308c:	01013403          	ld	s0,16(sp)
    80003090:	02010113          	addi	sp,sp,32
    80003094:	00008067          	ret

0000000080003098 <vTaskPlaceOnEventListRestricted>:
vTaskPlaceOnEventListRestricted():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3064
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    80003098:	fd010113          	addi	sp,sp,-48
    8000309c:	02113423          	sd	ra,40(sp)
    800030a0:	02813023          	sd	s0,32(sp)
    800030a4:	03010413          	addi	s0,sp,48
    800030a8:	fea43423          	sd	a0,-24(s0)
    800030ac:	feb43023          	sd	a1,-32(s0)
    800030b0:	fcc43c23          	sd	a2,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3065
		configASSERT( pxEventList );
    800030b4:	fe843783          	ld	a5,-24(s0)
    800030b8:	00079863          	bnez	a5,800030c8 <vTaskPlaceOnEventListRestricted+0x30>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3065 (discriminator 1)
    800030bc:	30047073          	csrci	mstatus,8
    800030c0:	00100073          	ebreak
    800030c4:	0000006f          	j	800030c4 <vTaskPlaceOnEventListRestricted+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3077

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    800030c8:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800030cc:	0007b783          	ld	a5,0(a5)
    800030d0:	03078793          	addi	a5,a5,48
    800030d4:	00078593          	mv	a1,a5
    800030d8:	fe843503          	ld	a0,-24(s0)
    800030dc:	c5cfe0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3082

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    800030e0:	fd843783          	ld	a5,-40(s0)
    800030e4:	00078663          	beqz	a5,800030f0 <vTaskPlaceOnEventListRestricted+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3084
		{
			xTicksToWait = portMAX_DELAY;
    800030e8:	fff00793          	li	a5,-1
    800030ec:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3088
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    800030f0:	fd843583          	ld	a1,-40(s0)
    800030f4:	fe043503          	ld	a0,-32(s0)
    800030f8:	7b0000ef          	jal	ra,800038a8 <prvAddCurrentTaskToDelayedList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3089
	}
    800030fc:	00000013          	nop
    80003100:	02813083          	ld	ra,40(sp)
    80003104:	02013403          	ld	s0,32(sp)
    80003108:	03010113          	addi	sp,sp,48
    8000310c:	00008067          	ret

0000000080003110 <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3095

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    80003110:	fd010113          	addi	sp,sp,-48
    80003114:	02113423          	sd	ra,40(sp)
    80003118:	02813023          	sd	s0,32(sp)
    8000311c:	03010413          	addi	s0,sp,48
    80003120:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3112
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    80003124:	fd843783          	ld	a5,-40(s0)
    80003128:	0187b783          	ld	a5,24(a5)
    8000312c:	0187b783          	ld	a5,24(a5)
    80003130:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3113
	configASSERT( pxUnblockedTCB );
    80003134:	fe043783          	ld	a5,-32(s0)
    80003138:	00079863          	bnez	a5,80003148 <xTaskRemoveFromEventList+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3113 (discriminator 1)
    8000313c:	30047073          	csrci	mstatus,8
    80003140:	00100073          	ebreak
    80003144:	0000006f          	j	80003144 <xTaskRemoveFromEventList+0x34>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3114
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    80003148:	fe043783          	ld	a5,-32(s0)
    8000314c:	03078793          	addi	a5,a5,48
    80003150:	00078513          	mv	a0,a5
    80003154:	d40fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3116

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80003158:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    8000315c:	0007b783          	ld	a5,0(a5)
    80003160:	06079e63          	bnez	a5,800031dc <xTaskRemoveFromEventList+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3118
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    80003164:	fe043783          	ld	a5,-32(s0)
    80003168:	00878793          	addi	a5,a5,8
    8000316c:	00078513          	mv	a0,a5
    80003170:	d24fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3119
		prvAddTaskToReadyList( pxUnblockedTCB );
    80003174:	fe043783          	ld	a5,-32(s0)
    80003178:	0587b783          	ld	a5,88(a5)
    8000317c:	0007879b          	sext.w	a5,a5
    80003180:	00078713          	mv	a4,a5
    80003184:	00100793          	li	a5,1
    80003188:	00e79733          	sll	a4,a5,a4
    8000318c:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003190:	0007b783          	ld	a5,0(a5)
    80003194:	00f76733          	or	a4,a4,a5
    80003198:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    8000319c:	00e7b023          	sd	a4,0(a5)
    800031a0:	fe043783          	ld	a5,-32(s0)
    800031a4:	0587b703          	ld	a4,88(a5)
    800031a8:	00070793          	mv	a5,a4
    800031ac:	00279793          	slli	a5,a5,0x2
    800031b0:	00e787b3          	add	a5,a5,a4
    800031b4:	00379793          	slli	a5,a5,0x3
    800031b8:	00102717          	auipc	a4,0x102
    800031bc:	c4870713          	addi	a4,a4,-952 # 80104e00 <pxReadyTasksLists>
    800031c0:	00e78733          	add	a4,a5,a4
    800031c4:	fe043783          	ld	a5,-32(s0)
    800031c8:	00878793          	addi	a5,a5,8
    800031cc:	00078593          	mv	a1,a5
    800031d0:	00070513          	mv	a0,a4
    800031d4:	b64fe0ef          	jal	ra,80001538 <vListInsertEnd>
    800031d8:	01c0006f          	j	800031f4 <xTaskRemoveFromEventList+0xe4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3139
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    800031dc:	fe043783          	ld	a5,-32(s0)
    800031e0:	03078793          	addi	a5,a5,48
    800031e4:	00078593          	mv	a1,a5
    800031e8:	00102517          	auipc	a0,0x102
    800031ec:	d3050513          	addi	a0,a0,-720 # 80104f18 <xPendingReadyList>
    800031f0:	b48fe0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3142
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    800031f4:	fe043783          	ld	a5,-32(s0)
    800031f8:	0587b703          	ld	a4,88(a5)
    800031fc:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003200:	0007b783          	ld	a5,0(a5)
    80003204:	0587b783          	ld	a5,88(a5)
    80003208:	00e7fe63          	bgeu	a5,a4,80003224 <xTaskRemoveFromEventList+0x114>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3147
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    8000320c:	00100793          	li	a5,1
    80003210:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3151

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    80003214:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    80003218:	00100713          	li	a4,1
    8000321c:	00e7b023          	sd	a4,0(a5)
    80003220:	0080006f          	j	80003228 <xTaskRemoveFromEventList+0x118>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3155
	}
	else
	{
		xReturn = pdFALSE;
    80003224:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3158
	}

	return xReturn;
    80003228:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3159
}
    8000322c:	00078513          	mv	a0,a5
    80003230:	02813083          	ld	ra,40(sp)
    80003234:	02013403          	ld	s0,32(sp)
    80003238:	03010113          	addi	sp,sp,48
    8000323c:	00008067          	ret

0000000080003240 <vTaskInternalSetTimeOutState>:
vTaskInternalSetTimeOutState():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3209
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    80003240:	fe010113          	addi	sp,sp,-32
    80003244:	00813c23          	sd	s0,24(sp)
    80003248:	02010413          	addi	s0,sp,32
    8000324c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3211
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    80003250:	9a018793          	addi	a5,gp,-1632 # 80004d20 <xNumOfOverflows>
    80003254:	0007b703          	ld	a4,0(a5)
    80003258:	fe843783          	ld	a5,-24(s0)
    8000325c:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3212
	pxTimeOut->xTimeOnEntering = xTickCount;
    80003260:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    80003264:	0007b703          	ld	a4,0(a5)
    80003268:	fe843783          	ld	a5,-24(s0)
    8000326c:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3213
}
    80003270:	00000013          	nop
    80003274:	01813403          	ld	s0,24(sp)
    80003278:	02010113          	addi	sp,sp,32
    8000327c:	00008067          	ret

0000000080003280 <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3217
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    80003280:	fc010113          	addi	sp,sp,-64
    80003284:	02113c23          	sd	ra,56(sp)
    80003288:	02813823          	sd	s0,48(sp)
    8000328c:	04010413          	addi	s0,sp,64
    80003290:	fca43423          	sd	a0,-56(s0)
    80003294:	fcb43023          	sd	a1,-64(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3220
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    80003298:	fc843783          	ld	a5,-56(s0)
    8000329c:	00079863          	bnez	a5,800032ac <xTaskCheckForTimeOut+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3220 (discriminator 1)
    800032a0:	30047073          	csrci	mstatus,8
    800032a4:	00100073          	ebreak
    800032a8:	0000006f          	j	800032a8 <xTaskCheckForTimeOut+0x28>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3221
	configASSERT( pxTicksToWait );
    800032ac:	fc043783          	ld	a5,-64(s0)
    800032b0:	00079863          	bnez	a5,800032c0 <xTaskCheckForTimeOut+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3221 (discriminator 1)
    800032b4:	30047073          	csrci	mstatus,8
    800032b8:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3221 (discriminator 2)
    800032bc:	0000006f          	j	800032bc <xTaskCheckForTimeOut+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3223

	taskENTER_CRITICAL();
    800032c0:	540000ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3226
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    800032c4:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    800032c8:	0007b783          	ld	a5,0(a5)
    800032cc:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3227
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    800032d0:	fc843783          	ld	a5,-56(s0)
    800032d4:	0087b783          	ld	a5,8(a5)
    800032d8:	fe043703          	ld	a4,-32(s0)
    800032dc:	40f707b3          	sub	a5,a4,a5
    800032e0:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3230

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    800032e4:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800032e8:	0007b783          	ld	a5,0(a5)
    800032ec:	0957c783          	lbu	a5,149(a5)
    800032f0:	00078e63          	beqz	a5,8000330c <xTaskCheckForTimeOut+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3234
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
    800032f4:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800032f8:	0007b783          	ld	a5,0(a5)
    800032fc:	08078aa3          	sb	zero,149(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3235
				xReturn = pdTRUE;
    80003300:	00100793          	li	a5,1
    80003304:	fef43423          	sd	a5,-24(s0)
    80003308:	0940006f          	j	8000339c <xTaskCheckForTimeOut+0x11c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3241
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8000330c:	fc043783          	ld	a5,-64(s0)
    80003310:	0007b703          	ld	a4,0(a5)
    80003314:	fff00793          	li	a5,-1
    80003318:	00f71663          	bne	a4,a5,80003324 <xTaskCheckForTimeOut+0xa4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3246
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    8000331c:	fe043423          	sd	zero,-24(s0)
    80003320:	07c0006f          	j	8000339c <xTaskCheckForTimeOut+0x11c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3251
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    80003324:	fc843783          	ld	a5,-56(s0)
    80003328:	0007b703          	ld	a4,0(a5)
    8000332c:	9a018793          	addi	a5,gp,-1632 # 80004d20 <xNumOfOverflows>
    80003330:	0007b783          	ld	a5,0(a5)
    80003334:	02f70063          	beq	a4,a5,80003354 <xTaskCheckForTimeOut+0xd4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3251 (discriminator 1)
    80003338:	fc843783          	ld	a5,-56(s0)
    8000333c:	0087b783          	ld	a5,8(a5)
    80003340:	fe043703          	ld	a4,-32(s0)
    80003344:	00f76863          	bltu	a4,a5,80003354 <xTaskCheckForTimeOut+0xd4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3258
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    80003348:	00100793          	li	a5,1
    8000334c:	fef43423          	sd	a5,-24(s0)
    80003350:	04c0006f          	j	8000339c <xTaskCheckForTimeOut+0x11c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3260
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    80003354:	fc043783          	ld	a5,-64(s0)
    80003358:	0007b783          	ld	a5,0(a5)
    8000335c:	fd843703          	ld	a4,-40(s0)
    80003360:	02f77663          	bgeu	a4,a5,8000338c <xTaskCheckForTimeOut+0x10c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3263
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    80003364:	fc043783          	ld	a5,-64(s0)
    80003368:	0007b703          	ld	a4,0(a5)
    8000336c:	fd843783          	ld	a5,-40(s0)
    80003370:	40f70733          	sub	a4,a4,a5
    80003374:	fc043783          	ld	a5,-64(s0)
    80003378:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3264
			vTaskInternalSetTimeOutState( pxTimeOut );
    8000337c:	fc843503          	ld	a0,-56(s0)
    80003380:	ec1ff0ef          	jal	ra,80003240 <vTaskInternalSetTimeOutState>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3265
			xReturn = pdFALSE;
    80003384:	fe043423          	sd	zero,-24(s0)
    80003388:	0140006f          	j	8000339c <xTaskCheckForTimeOut+0x11c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3269
		}
		else
		{
			*pxTicksToWait = 0;
    8000338c:	fc043783          	ld	a5,-64(s0)
    80003390:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3270
			xReturn = pdTRUE;
    80003394:	00100793          	li	a5,1
    80003398:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3273
		}
	}
	taskEXIT_CRITICAL();
    8000339c:	4ac000ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3275

	return xReturn;
    800033a0:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3276
}
    800033a4:	00078513          	mv	a0,a5
    800033a8:	03813083          	ld	ra,56(sp)
    800033ac:	03013403          	ld	s0,48(sp)
    800033b0:	04010113          	addi	sp,sp,64
    800033b4:	00008067          	ret

00000000800033b8 <vTaskMissedYield>:
vTaskMissedYield():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3280
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    800033b8:	ff010113          	addi	sp,sp,-16
    800033bc:	00813423          	sd	s0,8(sp)
    800033c0:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3281
	xYieldPending = pdTRUE;
    800033c4:	99818793          	addi	a5,gp,-1640 # 80004d18 <xYieldPending>
    800033c8:	00100713          	li	a4,1
    800033cc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3282
}
    800033d0:	00000013          	nop
    800033d4:	00813403          	ld	s0,8(sp)
    800033d8:	01010113          	addi	sp,sp,16
    800033dc:	00008067          	ret

00000000800033e0 <prvIdleTask>:
prvIdleTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3335
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    800033e0:	fe010113          	addi	sp,sp,-32
    800033e4:	00113c23          	sd	ra,24(sp)
    800033e8:	00813823          	sd	s0,16(sp)
    800033ec:	02010413          	addi	s0,sp,32
    800033f0:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3351 (discriminator 1)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    800033f4:	0d4000ef          	jal	ra,800034c8 <prvCheckTasksWaitingTermination>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3394 (discriminator 1)
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    800033f8:	084010ef          	jal	ra,8000447c <vApplicationIdleHook>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3351 (discriminator 1)
		prvCheckTasksWaitingTermination();
    800033fc:	ff9ff06f          	j	800033f4 <prvIdleTask+0x14>

0000000080003400 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3547

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    80003400:	fe010113          	addi	sp,sp,-32
    80003404:	00113c23          	sd	ra,24(sp)
    80003408:	00813823          	sd	s0,16(sp)
    8000340c:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3550
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    80003410:	fe043423          	sd	zero,-24(s0)
    80003414:	0380006f          	j	8000344c <prvInitialiseTaskLists+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3552 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    80003418:	fe843703          	ld	a4,-24(s0)
    8000341c:	00070793          	mv	a5,a4
    80003420:	00279793          	slli	a5,a5,0x2
    80003424:	00e787b3          	add	a5,a5,a4
    80003428:	00379793          	slli	a5,a5,0x3
    8000342c:	00102717          	auipc	a4,0x102
    80003430:	9d470713          	addi	a4,a4,-1580 # 80104e00 <pxReadyTasksLists>
    80003434:	00e787b3          	add	a5,a5,a4
    80003438:	00078513          	mv	a0,a5
    8000343c:	870fe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3550 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    80003440:	fe843783          	ld	a5,-24(s0)
    80003444:	00178793          	addi	a5,a5,1
    80003448:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3550 (discriminator 1)
    8000344c:	fe843703          	ld	a4,-24(s0)
    80003450:	00400793          	li	a5,4
    80003454:	fce7f2e3          	bgeu	a5,a4,80003418 <prvInitialiseTaskLists+0x18>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3555
	}

	vListInitialise( &xDelayedTaskList1 );
    80003458:	00102517          	auipc	a0,0x102
    8000345c:	a7050513          	addi	a0,a0,-1424 # 80104ec8 <xDelayedTaskList1>
    80003460:	84cfe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3556
	vListInitialise( &xDelayedTaskList2 );
    80003464:	00102517          	auipc	a0,0x102
    80003468:	a8c50513          	addi	a0,a0,-1396 # 80104ef0 <xDelayedTaskList2>
    8000346c:	840fe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3557
	vListInitialise( &xPendingReadyList );
    80003470:	00102517          	auipc	a0,0x102
    80003474:	aa850513          	addi	a0,a0,-1368 # 80104f18 <xPendingReadyList>
    80003478:	834fe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3561

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    8000347c:	00102517          	auipc	a0,0x102
    80003480:	ac450513          	addi	a0,a0,-1340 # 80104f40 <xTasksWaitingTermination>
    80003484:	828fe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3567
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    80003488:	00102517          	auipc	a0,0x102
    8000348c:	ae050513          	addi	a0,a0,-1312 # 80104f68 <xSuspendedTaskList>
    80003490:	81cfe0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3573
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    80003494:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    80003498:	00102717          	auipc	a4,0x102
    8000349c:	a3070713          	addi	a4,a4,-1488 # 80104ec8 <xDelayedTaskList1>
    800034a0:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3574
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    800034a4:	96018793          	addi	a5,gp,-1696 # 80004ce0 <pxOverflowDelayedTaskList>
    800034a8:	00102717          	auipc	a4,0x102
    800034ac:	a4870713          	addi	a4,a4,-1464 # 80104ef0 <xDelayedTaskList2>
    800034b0:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3575
}
    800034b4:	00000013          	nop
    800034b8:	01813083          	ld	ra,24(sp)
    800034bc:	01013403          	ld	s0,16(sp)
    800034c0:	02010113          	addi	sp,sp,32
    800034c4:	00008067          	ret

00000000800034c8 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3579
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    800034c8:	fe010113          	addi	sp,sp,-32
    800034cc:	00113c23          	sd	ra,24(sp)
    800034d0:	00813823          	sd	s0,16(sp)
    800034d4:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3589
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    800034d8:	0600006f          	j	80003538 <prvCheckTasksWaitingTermination+0x70>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3591
		{
			taskENTER_CRITICAL();
    800034dc:	324000ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3593
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    800034e0:	00102797          	auipc	a5,0x102
    800034e4:	a6078793          	addi	a5,a5,-1440 # 80104f40 <xTasksWaitingTermination>
    800034e8:	0187b783          	ld	a5,24(a5)
    800034ec:	0187b783          	ld	a5,24(a5)
    800034f0:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3594
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    800034f4:	fe843783          	ld	a5,-24(s0)
    800034f8:	00878793          	addi	a5,a5,8
    800034fc:	00078513          	mv	a0,a5
    80003500:	994fe0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3595
				--uxCurrentNumberOfTasks;
    80003504:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    80003508:	0007b783          	ld	a5,0(a5)
    8000350c:	fff78713          	addi	a4,a5,-1
    80003510:	97018793          	addi	a5,gp,-1680 # 80004cf0 <uxCurrentNumberOfTasks>
    80003514:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3596
				--uxDeletedTasksWaitingCleanUp;
    80003518:	96818793          	addi	a5,gp,-1688 # 80004ce8 <uxDeletedTasksWaitingCleanUp>
    8000351c:	0007b783          	ld	a5,0(a5)
    80003520:	fff78713          	addi	a4,a5,-1
    80003524:	96818793          	addi	a5,gp,-1688 # 80004ce8 <uxDeletedTasksWaitingCleanUp>
    80003528:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3598
			}
			taskEXIT_CRITICAL();
    8000352c:	31c000ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3600

			prvDeleteTCB( pxTCB );
    80003530:	fe843503          	ld	a0,-24(s0)
    80003534:	028000ef          	jal	ra,8000355c <prvDeleteTCB>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3589
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    80003538:	96818793          	addi	a5,gp,-1688 # 80004ce8 <uxDeletedTasksWaitingCleanUp>
    8000353c:	0007b783          	ld	a5,0(a5)
    80003540:	f8079ee3          	bnez	a5,800034dc <prvCheckTasksWaitingTermination+0x14>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3604
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    80003544:	00000013          	nop
    80003548:	00000013          	nop
    8000354c:	01813083          	ld	ra,24(sp)
    80003550:	01013403          	ld	s0,16(sp)
    80003554:	02010113          	addi	sp,sp,32
    80003558:	00008067          	ret

000000008000355c <prvDeleteTCB>:
prvDeleteTCB():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3827
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    8000355c:	fe010113          	addi	sp,sp,-32
    80003560:	00113c23          	sd	ra,24(sp)
    80003564:	00813823          	sd	s0,16(sp)
    80003568:	02010413          	addi	s0,sp,32
    8000356c:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3845

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    80003570:	fe843783          	ld	a5,-24(s0)
    80003574:	0607b783          	ld	a5,96(a5)
    80003578:	00078513          	mv	a0,a5
    8000357c:	e88fd0ef          	jal	ra,80000c04 <vPortFree>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3846
			vPortFree( pxTCB );
    80003580:	fe843503          	ld	a0,-24(s0)
    80003584:	e80fd0ef          	jal	ra,80000c04 <vPortFree>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3875
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    80003588:	00000013          	nop
    8000358c:	01813083          	ld	ra,24(sp)
    80003590:	01013403          	ld	s0,16(sp)
    80003594:	02010113          	addi	sp,sp,32
    80003598:	00008067          	ret

000000008000359c <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3881

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8000359c:	fe010113          	addi	sp,sp,-32
    800035a0:	00813c23          	sd	s0,24(sp)
    800035a4:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3884
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    800035a8:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    800035ac:	0007b783          	ld	a5,0(a5)
    800035b0:	0007b783          	ld	a5,0(a5)
    800035b4:	00079a63          	bnez	a5,800035c8 <prvResetNextTaskUnblockTime+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3890
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    800035b8:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    800035bc:	fff00713          	li	a4,-1
    800035c0:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3901
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    800035c4:	0280006f          	j	800035ec <prvResetNextTaskUnblockTime+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3898
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    800035c8:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    800035cc:	0007b783          	ld	a5,0(a5)
    800035d0:	0187b783          	ld	a5,24(a5)
    800035d4:	0187b783          	ld	a5,24(a5)
    800035d8:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3899
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    800035dc:	fe843783          	ld	a5,-24(s0)
    800035e0:	0087b703          	ld	a4,8(a5)
    800035e4:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    800035e8:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3901
}
    800035ec:	00000013          	nop
    800035f0:	01813403          	ld	s0,24(sp)
    800035f4:	02010113          	addi	sp,sp,32
    800035f8:	00008067          	ret

00000000800035fc <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3924
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    800035fc:	fe010113          	addi	sp,sp,-32
    80003600:	00813c23          	sd	s0,24(sp)
    80003604:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3927
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    80003608:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    8000360c:	0007b783          	ld	a5,0(a5)
    80003610:	00079863          	bnez	a5,80003620 <xTaskGetSchedulerState+0x24>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3929
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    80003614:	00100793          	li	a5,1
    80003618:	fef43423          	sd	a5,-24(s0)
    8000361c:	0200006f          	j	8000363c <xTaskGetSchedulerState+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3933
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80003620:	9c018793          	addi	a5,gp,-1600 # 80004d40 <uxSchedulerSuspended>
    80003624:	0007b783          	ld	a5,0(a5)
    80003628:	00079863          	bnez	a5,80003638 <xTaskGetSchedulerState+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3935
			{
				xReturn = taskSCHEDULER_RUNNING;
    8000362c:	00200793          	li	a5,2
    80003630:	fef43423          	sd	a5,-24(s0)
    80003634:	0080006f          	j	8000363c <xTaskGetSchedulerState+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3939
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    80003638:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3943
			}
		}

		return xReturn;
    8000363c:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:3944
	}
    80003640:	00078513          	mv	a0,a5
    80003644:	01813403          	ld	s0,24(sp)
    80003648:	02010113          	addi	sp,sp,32
    8000364c:	00008067          	ret

0000000080003650 <xTaskPriorityDisinherit>:
xTaskPriorityDisinherit():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4039
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    80003650:	fd010113          	addi	sp,sp,-48
    80003654:	02113423          	sd	ra,40(sp)
    80003658:	02813023          	sd	s0,32(sp)
    8000365c:	03010413          	addi	s0,sp,48
    80003660:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4040
	TCB_t * const pxTCB = pxMutexHolder;
    80003664:	fd843783          	ld	a5,-40(s0)
    80003668:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4041
	BaseType_t xReturn = pdFALSE;
    8000366c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4043

		if( pxMutexHolder != NULL )
    80003670:	fd843783          	ld	a5,-40(s0)
    80003674:	16078a63          	beqz	a5,800037e8 <xTaskPriorityDisinherit+0x198>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4049
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    80003678:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    8000367c:	0007b783          	ld	a5,0(a5)
    80003680:	fe043703          	ld	a4,-32(s0)
    80003684:	00f70863          	beq	a4,a5,80003694 <xTaskPriorityDisinherit+0x44>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4049 (discriminator 1)
    80003688:	30047073          	csrci	mstatus,8
    8000368c:	00100073          	ebreak
    80003690:	0000006f          	j	80003690 <xTaskPriorityDisinherit+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4050
			configASSERT( pxTCB->uxMutexesHeld );
    80003694:	fe043783          	ld	a5,-32(s0)
    80003698:	0887b783          	ld	a5,136(a5)
    8000369c:	00079863          	bnez	a5,800036ac <xTaskPriorityDisinherit+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4050 (discriminator 1)
    800036a0:	30047073          	csrci	mstatus,8
    800036a4:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4050 (discriminator 2)
    800036a8:	0000006f          	j	800036a8 <xTaskPriorityDisinherit+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4051
			( pxTCB->uxMutexesHeld )--;
    800036ac:	fe043783          	ld	a5,-32(s0)
    800036b0:	0887b783          	ld	a5,136(a5)
    800036b4:	fff78713          	addi	a4,a5,-1
    800036b8:	fe043783          	ld	a5,-32(s0)
    800036bc:	08e7b423          	sd	a4,136(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4055

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    800036c0:	fe043783          	ld	a5,-32(s0)
    800036c4:	0587b703          	ld	a4,88(a5)
    800036c8:	fe043783          	ld	a5,-32(s0)
    800036cc:	0807b783          	ld	a5,128(a5)
    800036d0:	10f70c63          	beq	a4,a5,800037e8 <xTaskPriorityDisinherit+0x198>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4058
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    800036d4:	fe043783          	ld	a5,-32(s0)
    800036d8:	0887b783          	ld	a5,136(a5)
    800036dc:	10079663          	bnez	a5,800037e8 <xTaskPriorityDisinherit+0x198>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4065
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    800036e0:	fe043783          	ld	a5,-32(s0)
    800036e4:	00878793          	addi	a5,a5,8
    800036e8:	00078513          	mv	a0,a5
    800036ec:	fa9fd0ef          	jal	ra,80001694 <uxListRemove>
    800036f0:	00050793          	mv	a5,a0
    800036f4:	06079063          	bnez	a5,80003754 <xTaskPriorityDisinherit+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4067
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    800036f8:	fe043783          	ld	a5,-32(s0)
    800036fc:	0587b703          	ld	a4,88(a5)
    80003700:	00101697          	auipc	a3,0x101
    80003704:	70068693          	addi	a3,a3,1792 # 80104e00 <pxReadyTasksLists>
    80003708:	00070793          	mv	a5,a4
    8000370c:	00279793          	slli	a5,a5,0x2
    80003710:	00e787b3          	add	a5,a5,a4
    80003714:	00379793          	slli	a5,a5,0x3
    80003718:	00f687b3          	add	a5,a3,a5
    8000371c:	0007b783          	ld	a5,0(a5)
    80003720:	02079a63          	bnez	a5,80003754 <xTaskPriorityDisinherit+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4067 (discriminator 1)
    80003724:	fe043783          	ld	a5,-32(s0)
    80003728:	0587b783          	ld	a5,88(a5)
    8000372c:	0007879b          	sext.w	a5,a5
    80003730:	00078713          	mv	a4,a5
    80003734:	00100793          	li	a5,1
    80003738:	00e797b3          	sll	a5,a5,a4
    8000373c:	fff7c713          	not	a4,a5
    80003740:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003744:	0007b783          	ld	a5,0(a5)
    80003748:	00f77733          	and	a4,a4,a5
    8000374c:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003750:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4077
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    80003754:	fe043783          	ld	a5,-32(s0)
    80003758:	0807b703          	ld	a4,128(a5)
    8000375c:	fe043783          	ld	a5,-32(s0)
    80003760:	04e7bc23          	sd	a4,88(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4082

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    80003764:	fe043783          	ld	a5,-32(s0)
    80003768:	0587b783          	ld	a5,88(a5)
    8000376c:	00500713          	li	a4,5
    80003770:	40f70733          	sub	a4,a4,a5
    80003774:	fe043783          	ld	a5,-32(s0)
    80003778:	02e7b823          	sd	a4,48(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4083
					prvAddTaskToReadyList( pxTCB );
    8000377c:	fe043783          	ld	a5,-32(s0)
    80003780:	0587b783          	ld	a5,88(a5)
    80003784:	0007879b          	sext.w	a5,a5
    80003788:	00078713          	mv	a4,a5
    8000378c:	00100793          	li	a5,1
    80003790:	00e79733          	sll	a4,a5,a4
    80003794:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003798:	0007b783          	ld	a5,0(a5)
    8000379c:	00f76733          	or	a4,a4,a5
    800037a0:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    800037a4:	00e7b023          	sd	a4,0(a5)
    800037a8:	fe043783          	ld	a5,-32(s0)
    800037ac:	0587b703          	ld	a4,88(a5)
    800037b0:	00070793          	mv	a5,a4
    800037b4:	00279793          	slli	a5,a5,0x2
    800037b8:	00e787b3          	add	a5,a5,a4
    800037bc:	00379793          	slli	a5,a5,0x3
    800037c0:	00101717          	auipc	a4,0x101
    800037c4:	64070713          	addi	a4,a4,1600 # 80104e00 <pxReadyTasksLists>
    800037c8:	00e78733          	add	a4,a5,a4
    800037cc:	fe043783          	ld	a5,-32(s0)
    800037d0:	00878793          	addi	a5,a5,8
    800037d4:	00078593          	mv	a1,a5
    800037d8:	00070513          	mv	a0,a4
    800037dc:	d5dfd0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4093
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    800037e0:	00100793          	li	a5,1
    800037e4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4110
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    800037e8:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4111
	}
    800037ec:	00078513          	mv	a0,a5
    800037f0:	02813083          	ld	ra,40(sp)
    800037f4:	02013403          	ld	s0,32(sp)
    800037f8:	03010113          	addi	sp,sp,48
    800037fc:	00008067          	ret

0000000080003800 <vTaskEnterCritical>:
vTaskEnterCritical():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4221
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    80003800:	ff010113          	addi	sp,sp,-16
    80003804:	00813423          	sd	s0,8(sp)
    80003808:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4222
		portDISABLE_INTERRUPTS();
    8000380c:	30047073          	csrci	mstatus,8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4224

		if( xSchedulerRunning != pdFALSE )
    80003810:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    80003814:	0007b783          	ld	a5,0(a5)
    80003818:	02078063          	beqz	a5,80003838 <vTaskEnterCritical+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4226
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    8000381c:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003820:	0007b783          	ld	a5,0(a5)
    80003824:	0787b703          	ld	a4,120(a5)
    80003828:	00170713          	addi	a4,a4,1
    8000382c:	06e7bc23          	sd	a4,120(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4234
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    80003830:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003834:	0007b783          	ld	a5,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4243
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    80003838:	00000013          	nop
    8000383c:	00813403          	ld	s0,8(sp)
    80003840:	01010113          	addi	sp,sp,16
    80003844:	00008067          	ret

0000000080003848 <vTaskExitCritical>:
vTaskExitCritical():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4251
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    80003848:	ff010113          	addi	sp,sp,-16
    8000384c:	00813423          	sd	s0,8(sp)
    80003850:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4252
		if( xSchedulerRunning != pdFALSE )
    80003854:	98818793          	addi	a5,gp,-1656 # 80004d08 <xSchedulerRunning>
    80003858:	0007b783          	ld	a5,0(a5)
    8000385c:	02078e63          	beqz	a5,80003898 <vTaskExitCritical+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4254
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    80003860:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003864:	0007b783          	ld	a5,0(a5)
    80003868:	0787b783          	ld	a5,120(a5)
    8000386c:	02078663          	beqz	a5,80003898 <vTaskExitCritical+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4256
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    80003870:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003874:	0007b783          	ld	a5,0(a5)
    80003878:	0787b703          	ld	a4,120(a5)
    8000387c:	fff70713          	addi	a4,a4,-1
    80003880:	06e7bc23          	sd	a4,120(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4258

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    80003884:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003888:	0007b783          	ld	a5,0(a5)
    8000388c:	0787b783          	ld	a5,120(a5)
    80003890:	00079463          	bnez	a5,80003898 <vTaskExitCritical+0x50>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4260
				{
					portENABLE_INTERRUPTS();
    80003894:	30046073          	csrsi	mstatus,8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:4276
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    80003898:	00000013          	nop
    8000389c:	00813403          	ld	s0,8(sp)
    800038a0:	01010113          	addi	sp,sp,16
    800038a4:	00008067          	ret

00000000800038a8 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5082
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    800038a8:	fd010113          	addi	sp,sp,-48
    800038ac:	02113423          	sd	ra,40(sp)
    800038b0:	02813023          	sd	s0,32(sp)
    800038b4:	03010413          	addi	s0,sp,48
    800038b8:	fca43c23          	sd	a0,-40(s0)
    800038bc:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5084
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    800038c0:	97818793          	addi	a5,gp,-1672 # 80004cf8 <xTickCount>
    800038c4:	0007b783          	ld	a5,0(a5)
    800038c8:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5091
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    800038cc:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800038d0:	0007b783          	ld	a5,0(a5)
    800038d4:	08078aa3          	sb	zero,149(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5097
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    800038d8:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800038dc:	0007b783          	ld	a5,0(a5)
    800038e0:	00878793          	addi	a5,a5,8
    800038e4:	00078513          	mv	a0,a5
    800038e8:	dadfd0ef          	jal	ra,80001694 <uxListRemove>
    800038ec:	00050793          	mv	a5,a0
    800038f0:	02079c63          	bnez	a5,80003928 <prvAddCurrentTaskToDelayedList+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5101
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
    800038f4:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800038f8:	0007b783          	ld	a5,0(a5)
    800038fc:	0587b783          	ld	a5,88(a5)
    80003900:	0007879b          	sext.w	a5,a5
    80003904:	00078713          	mv	a4,a5
    80003908:	00100793          	li	a5,1
    8000390c:	00e797b3          	sll	a5,a5,a4
    80003910:	fff7c713          	not	a4,a5
    80003914:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003918:	0007b783          	ld	a5,0(a5)
    8000391c:	00f77733          	and	a4,a4,a5
    80003920:	98018793          	addi	a5,gp,-1664 # 80004d00 <uxTopReadyPriority>
    80003924:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5110
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    80003928:	fd843703          	ld	a4,-40(s0)
    8000392c:	fff00793          	li	a5,-1
    80003930:	02f71663          	bne	a4,a5,8000395c <prvAddCurrentTaskToDelayedList+0xb4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5110 (discriminator 1)
    80003934:	fd043783          	ld	a5,-48(s0)
    80003938:	02078263          	beqz	a5,8000395c <prvAddCurrentTaskToDelayedList+0xb4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5115
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8000393c:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003940:	0007b783          	ld	a5,0(a5)
    80003944:	00878793          	addi	a5,a5,8
    80003948:	00078593          	mv	a1,a5
    8000394c:	00101517          	auipc	a0,0x101
    80003950:	61c50513          	addi	a0,a0,1564 # 80104f68 <xSuspendedTaskList>
    80003954:	be5fd0ef          	jal	ra,80001538 <vListInsertEnd>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5190

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    80003958:	0900006f          	j	800039e8 <prvAddCurrentTaskToDelayedList+0x140>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5122
			xTimeToWake = xConstTickCount + xTicksToWait;
    8000395c:	fe843703          	ld	a4,-24(s0)
    80003960:	fd843783          	ld	a5,-40(s0)
    80003964:	00f707b3          	add	a5,a4,a5
    80003968:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5125
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    8000396c:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003970:	0007b783          	ld	a5,0(a5)
    80003974:	fe043703          	ld	a4,-32(s0)
    80003978:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5127
			if( xTimeToWake < xConstTickCount )
    8000397c:	fe043703          	ld	a4,-32(s0)
    80003980:	fe843783          	ld	a5,-24(s0)
    80003984:	02f77463          	bgeu	a4,a5,800039ac <prvAddCurrentTaskToDelayedList+0x104>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5131
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    80003988:	96018793          	addi	a5,gp,-1696 # 80004ce0 <pxOverflowDelayedTaskList>
    8000398c:	0007b703          	ld	a4,0(a5)
    80003990:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    80003994:	0007b783          	ld	a5,0(a5)
    80003998:	00878793          	addi	a5,a5,8
    8000399c:	00078593          	mv	a1,a5
    800039a0:	00070513          	mv	a0,a4
    800039a4:	c1dfd0ef          	jal	ra,800015c0 <vListInsert>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5190
}
    800039a8:	0400006f          	j	800039e8 <prvAddCurrentTaskToDelayedList+0x140>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5137
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    800039ac:	95818793          	addi	a5,gp,-1704 # 80004cd8 <pxDelayedTaskList>
    800039b0:	0007b703          	ld	a4,0(a5)
    800039b4:	95018793          	addi	a5,gp,-1712 # 80004cd0 <pxCurrentTCB>
    800039b8:	0007b783          	ld	a5,0(a5)
    800039bc:	00878793          	addi	a5,a5,8
    800039c0:	00078593          	mv	a1,a5
    800039c4:	00070513          	mv	a0,a4
    800039c8:	bf9fd0ef          	jal	ra,800015c0 <vListInsert>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5142
				if( xTimeToWake < xNextTaskUnblockTime )
    800039cc:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    800039d0:	0007b783          	ld	a5,0(a5)
    800039d4:	fe043703          	ld	a4,-32(s0)
    800039d8:	00f77863          	bgeu	a4,a5,800039e8 <prvAddCurrentTaskToDelayedList+0x140>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5144
					xNextTaskUnblockTime = xTimeToWake;
    800039dc:	9b018793          	addi	a5,gp,-1616 # 80004d30 <xNextTaskUnblockTime>
    800039e0:	fe043703          	ld	a4,-32(s0)
    800039e4:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/tasks.c:5190
}
    800039e8:	00000013          	nop
    800039ec:	02813083          	ld	ra,40(sp)
    800039f0:	02013403          	ld	s0,32(sp)
    800039f4:	03010113          	addi	sp,sp,48
    800039f8:	00008067          	ret

00000000800039fc <xTimerCreateTimerTask>:
xTimerCreateTimerTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:228
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    800039fc:	fe010113          	addi	sp,sp,-32
    80003a00:	00113c23          	sd	ra,24(sp)
    80003a04:	00813823          	sd	s0,16(sp)
    80003a08:	02010413          	addi	s0,sp,32
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:229
BaseType_t xReturn = pdFAIL;
    80003a0c:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:235

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    80003a10:	0f1000ef          	jal	ra,80004300 <prvCheckForValidListAndQueue>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:237

	if( xTimerQueue != NULL )
    80003a14:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003a18:	0007b783          	ld	a5,0(a5)
    80003a1c:	02078663          	beqz	a5,80003a48 <xTimerCreateTimerTask+0x4c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:261
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    80003a20:	9e018793          	addi	a5,gp,-1568 # 80004d60 <xTimerTaskHandle>
    80003a24:	00400713          	li	a4,4
    80003a28:	00000693          	li	a3,0
    80003a2c:	0aa00613          	li	a2,170
    80003a30:	00001597          	auipc	a1,0x1
    80003a34:	fa858593          	addi	a1,a1,-88 # 800049d8 <memset+0x3c8>
    80003a38:	00000517          	auipc	a0,0x0
    80003a3c:	23050513          	addi	a0,a0,560 # 80003c68 <prvTimerTask>
    80003a40:	a99fe0ef          	jal	ra,800024d8 <xTaskCreate>
    80003a44:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:275
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    80003a48:	fe843783          	ld	a5,-24(s0)
    80003a4c:	00079863          	bnez	a5,80003a5c <xTimerCreateTimerTask+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:275 (discriminator 1)
    80003a50:	30047073          	csrci	mstatus,8
    80003a54:	00100073          	ebreak
    80003a58:	0000006f          	j	80003a58 <xTimerCreateTimerTask+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:276
	return xReturn;
    80003a5c:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:277
}
    80003a60:	00078513          	mv	a0,a5
    80003a64:	01813083          	ld	ra,24(sp)
    80003a68:	01013403          	ld	s0,16(sp)
    80003a6c:	02010113          	addi	sp,sp,32
    80003a70:	00008067          	ret

0000000080003a74 <xTimerGenericCommand>:
xTimerGenericCommand():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:382
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    80003a74:	f9010113          	addi	sp,sp,-112
    80003a78:	06113423          	sd	ra,104(sp)
    80003a7c:	06813023          	sd	s0,96(sp)
    80003a80:	07010413          	addi	s0,sp,112
    80003a84:	faa43c23          	sd	a0,-72(s0)
    80003a88:	fab43823          	sd	a1,-80(s0)
    80003a8c:	fac43423          	sd	a2,-88(s0)
    80003a90:	fad43023          	sd	a3,-96(s0)
    80003a94:	f8e43c23          	sd	a4,-104(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:383
BaseType_t xReturn = pdFAIL;
    80003a98:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:386
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    80003a9c:	fb843783          	ld	a5,-72(s0)
    80003aa0:	00079863          	bnez	a5,80003ab0 <xTimerGenericCommand+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:386 (discriminator 1)
    80003aa4:	30047073          	csrci	mstatus,8
    80003aa8:	00100073          	ebreak
    80003aac:	0000006f          	j	80003aac <xTimerGenericCommand+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:390

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    80003ab0:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003ab4:	0007b783          	ld	a5,0(a5)
    80003ab8:	0a078663          	beqz	a5,80003b64 <xTimerGenericCommand+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:393
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    80003abc:	fb043783          	ld	a5,-80(s0)
    80003ac0:	fcf43423          	sd	a5,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:394
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    80003ac4:	fa843783          	ld	a5,-88(s0)
    80003ac8:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:395
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    80003acc:	fb843783          	ld	a5,-72(s0)
    80003ad0:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:397

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    80003ad4:	fb043703          	ld	a4,-80(s0)
    80003ad8:	00500793          	li	a5,5
    80003adc:	06e7c263          	blt	a5,a4,80003b40 <xTimerGenericCommand+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:399
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    80003ae0:	b1dff0ef          	jal	ra,800035fc <xTaskGetSchedulerState>
    80003ae4:	00050713          	mv	a4,a0
    80003ae8:	00200793          	li	a5,2
    80003aec:	02f71663          	bne	a4,a5,80003b18 <xTimerGenericCommand+0xa4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:401
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    80003af0:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003af4:	0007b783          	ld	a5,0(a5)
    80003af8:	fc840713          	addi	a4,s0,-56
    80003afc:	00000693          	li	a3,0
    80003b00:	f9843603          	ld	a2,-104(s0)
    80003b04:	00070593          	mv	a1,a4
    80003b08:	00078513          	mv	a0,a5
    80003b0c:	e89fd0ef          	jal	ra,80001994 <xQueueGenericSend>
    80003b10:	fea43423          	sd	a0,-24(s0)
    80003b14:	0500006f          	j	80003b64 <xTimerGenericCommand+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:405
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    80003b18:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003b1c:	0007b783          	ld	a5,0(a5)
    80003b20:	fc840713          	addi	a4,s0,-56
    80003b24:	00000693          	li	a3,0
    80003b28:	00000613          	li	a2,0
    80003b2c:	00070593          	mv	a1,a4
    80003b30:	00078513          	mv	a0,a5
    80003b34:	e61fd0ef          	jal	ra,80001994 <xQueueGenericSend>
    80003b38:	fea43423          	sd	a0,-24(s0)
    80003b3c:	0280006f          	j	80003b64 <xTimerGenericCommand+0xf0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:410
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    80003b40:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003b44:	0007b783          	ld	a5,0(a5)
    80003b48:	fc840713          	addi	a4,s0,-56
    80003b4c:	00000693          	li	a3,0
    80003b50:	fa043603          	ld	a2,-96(s0)
    80003b54:	00070593          	mv	a1,a4
    80003b58:	00078513          	mv	a0,a5
    80003b5c:	8a8fe0ef          	jal	ra,80001c04 <xQueueGenericSendFromISR>
    80003b60:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:420
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    80003b64:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:421
}
    80003b68:	00078513          	mv	a0,a5
    80003b6c:	06813083          	ld	ra,104(sp)
    80003b70:	06013403          	ld	s0,96(sp)
    80003b74:	07010113          	addi	sp,sp,112
    80003b78:	00008067          	ret

0000000080003b7c <prvProcessExpiredTimer>:
prvProcessExpiredTimer():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:483
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    80003b7c:	fd010113          	addi	sp,sp,-48
    80003b80:	02113423          	sd	ra,40(sp)
    80003b84:	02813023          	sd	s0,32(sp)
    80003b88:	03010413          	addi	s0,sp,48
    80003b8c:	fca43c23          	sd	a0,-40(s0)
    80003b90:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:485
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    80003b94:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    80003b98:	0007b783          	ld	a5,0(a5)
    80003b9c:	0187b783          	ld	a5,24(a5)
    80003ba0:	0187b783          	ld	a5,24(a5)
    80003ba4:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:489

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    80003ba8:	fe843783          	ld	a5,-24(s0)
    80003bac:	00878793          	addi	a5,a5,8
    80003bb0:	00078513          	mv	a0,a5
    80003bb4:	ae1fd0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:494
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    80003bb8:	fe843783          	ld	a5,-24(s0)
    80003bbc:	0487c783          	lbu	a5,72(a5)
    80003bc0:	0007879b          	sext.w	a5,a5
    80003bc4:	0047f793          	andi	a5,a5,4
    80003bc8:	0007879b          	sext.w	a5,a5
    80003bcc:	06078063          	beqz	a5,80003c2c <prvProcessExpiredTimer+0xb0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:499
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    80003bd0:	fe843783          	ld	a5,-24(s0)
    80003bd4:	0307b703          	ld	a4,48(a5)
    80003bd8:	fd843783          	ld	a5,-40(s0)
    80003bdc:	00f707b3          	add	a5,a4,a5
    80003be0:	fd843683          	ld	a3,-40(s0)
    80003be4:	fd043603          	ld	a2,-48(s0)
    80003be8:	00078593          	mv	a1,a5
    80003bec:	fe843503          	ld	a0,-24(s0)
    80003bf0:	264000ef          	jal	ra,80003e54 <prvInsertTimerInActiveList>
    80003bf4:	00050793          	mv	a5,a0
    80003bf8:	04078663          	beqz	a5,80003c44 <prvProcessExpiredTimer+0xc8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:503
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    80003bfc:	00000713          	li	a4,0
    80003c00:	00000693          	li	a3,0
    80003c04:	fd843603          	ld	a2,-40(s0)
    80003c08:	00000593          	li	a1,0
    80003c0c:	fe843503          	ld	a0,-24(s0)
    80003c10:	e65ff0ef          	jal	ra,80003a74 <xTimerGenericCommand>
    80003c14:	fea43023          	sd	a0,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:504
			configASSERT( xResult );
    80003c18:	fe043783          	ld	a5,-32(s0)
    80003c1c:	02079463          	bnez	a5,80003c44 <prvProcessExpiredTimer+0xc8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:504 (discriminator 1)
    80003c20:	30047073          	csrci	mstatus,8
    80003c24:	00100073          	ebreak
    80003c28:	0000006f          	j	80003c28 <prvProcessExpiredTimer+0xac>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:514
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    80003c2c:	fe843783          	ld	a5,-24(s0)
    80003c30:	0487c783          	lbu	a5,72(a5)
    80003c34:	ffe7f793          	andi	a5,a5,-2
    80003c38:	0ff7f713          	andi	a4,a5,255
    80003c3c:	fe843783          	ld	a5,-24(s0)
    80003c40:	04e78423          	sb	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:519
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    80003c44:	fe843783          	ld	a5,-24(s0)
    80003c48:	0407b783          	ld	a5,64(a5)
    80003c4c:	fe843503          	ld	a0,-24(s0)
    80003c50:	000780e7          	jalr	a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:520
}
    80003c54:	00000013          	nop
    80003c58:	02813083          	ld	ra,40(sp)
    80003c5c:	02013403          	ld	s0,32(sp)
    80003c60:	03010113          	addi	sp,sp,48
    80003c64:	00008067          	ret

0000000080003c68 <prvTimerTask>:
prvTimerTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:524
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    80003c68:	fd010113          	addi	sp,sp,-48
    80003c6c:	02113423          	sd	ra,40(sp)
    80003c70:	02813023          	sd	s0,32(sp)
    80003c74:	03010413          	addi	s0,sp,48
    80003c78:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:547 (discriminator 1)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    80003c7c:	fe040793          	addi	a5,s0,-32
    80003c80:	00078513          	mv	a0,a5
    80003c84:	0f4000ef          	jal	ra,80003d78 <prvGetNextExpireTime>
    80003c88:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:551 (discriminator 1)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    80003c8c:	fe043783          	ld	a5,-32(s0)
    80003c90:	00078593          	mv	a1,a5
    80003c94:	fe843503          	ld	a0,-24(s0)
    80003c98:	00c000ef          	jal	ra,80003ca4 <prvProcessTimerOrBlockTask>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:554 (discriminator 1)

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    80003c9c:	29c000ef          	jal	ra,80003f38 <prvProcessReceivedCommands>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:547 (discriminator 1)
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    80003ca0:	fddff06f          	j	80003c7c <prvTimerTask+0x14>

0000000080003ca4 <prvProcessTimerOrBlockTask>:
prvProcessTimerOrBlockTask():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:560
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    80003ca4:	fd010113          	addi	sp,sp,-48
    80003ca8:	02113423          	sd	ra,40(sp)
    80003cac:	02813023          	sd	s0,32(sp)
    80003cb0:	03010413          	addi	s0,sp,48
    80003cb4:	fca43c23          	sd	a0,-40(s0)
    80003cb8:	fcb43823          	sd	a1,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:564
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    80003cbc:	d5dfe0ef          	jal	ra,80002a18 <vTaskSuspendAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:571
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    80003cc0:	fe040793          	addi	a5,s0,-32
    80003cc4:	00078513          	mv	a0,a5
    80003cc8:	120000ef          	jal	ra,80003de8 <prvSampleTimeNow>
    80003ccc:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:572
		if( xTimerListsWereSwitched == pdFALSE )
    80003cd0:	fe043783          	ld	a5,-32(s0)
    80003cd4:	08079663          	bnez	a5,80003d60 <prvProcessTimerOrBlockTask+0xbc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:575
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    80003cd8:	fd043783          	ld	a5,-48(s0)
    80003cdc:	02079263          	bnez	a5,80003d00 <prvProcessTimerOrBlockTask+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:575 (discriminator 1)
    80003ce0:	fd843703          	ld	a4,-40(s0)
    80003ce4:	fe843783          	ld	a5,-24(s0)
    80003ce8:	00e7ec63          	bltu	a5,a4,80003d00 <prvProcessTimerOrBlockTask+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:577
			{
				( void ) xTaskResumeAll();
    80003cec:	d5dfe0ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:578
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    80003cf0:	fe843583          	ld	a1,-24(s0)
    80003cf4:	fd843503          	ld	a0,-40(s0)
    80003cf8:	e85ff0ef          	jal	ra,80003b7c <prvProcessExpiredTimer>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:616
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    80003cfc:	0680006f          	j	80003d64 <prvProcessTimerOrBlockTask+0xc0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:588
				if( xListWasEmpty != pdFALSE )
    80003d00:	fd043783          	ld	a5,-48(s0)
    80003d04:	02078263          	beqz	a5,80003d28 <prvProcessTimerOrBlockTask+0x84>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:592
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    80003d08:	9d018793          	addi	a5,gp,-1584 # 80004d50 <pxOverflowTimerList>
    80003d0c:	0007b783          	ld	a5,0(a5)
    80003d10:	0007b783          	ld	a5,0(a5)
    80003d14:	00079663          	bnez	a5,80003d20 <prvProcessTimerOrBlockTask+0x7c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:592 (discriminator 1)
    80003d18:	00100793          	li	a5,1
    80003d1c:	0080006f          	j	80003d24 <prvProcessTimerOrBlockTask+0x80>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:592 (discriminator 2)
    80003d20:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:592 (discriminator 4)
    80003d24:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:595
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    80003d28:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80003d2c:	0007b683          	ld	a3,0(a5)
    80003d30:	fd843703          	ld	a4,-40(s0)
    80003d34:	fe843783          	ld	a5,-24(s0)
    80003d38:	40f707b3          	sub	a5,a4,a5
    80003d3c:	fd043603          	ld	a2,-48(s0)
    80003d40:	00078593          	mv	a1,a5
    80003d44:	00068513          	mv	a0,a3
    80003d48:	edcfe0ef          	jal	ra,80002424 <vQueueWaitForMessageRestricted>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:597
				if( xTaskResumeAll() == pdFALSE )
    80003d4c:	cfdfe0ef          	jal	ra,80002a48 <xTaskResumeAll>
    80003d50:	00050793          	mv	a5,a0
    80003d54:	00079863          	bnez	a5,80003d64 <prvProcessTimerOrBlockTask+0xc0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:603
					portYIELD_WITHIN_API();
    80003d58:	00000073          	ecall
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:616
}
    80003d5c:	0080006f          	j	80003d64 <prvProcessTimerOrBlockTask+0xc0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:613
			( void ) xTaskResumeAll();
    80003d60:	ce9fe0ef          	jal	ra,80002a48 <xTaskResumeAll>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:616
}
    80003d64:	00000013          	nop
    80003d68:	02813083          	ld	ra,40(sp)
    80003d6c:	02013403          	ld	s0,32(sp)
    80003d70:	03010113          	addi	sp,sp,48
    80003d74:	00008067          	ret

0000000080003d78 <prvGetNextExpireTime>:
prvGetNextExpireTime():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:620
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    80003d78:	fd010113          	addi	sp,sp,-48
    80003d7c:	02813423          	sd	s0,40(sp)
    80003d80:	03010413          	addi	s0,sp,48
    80003d84:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:630
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    80003d88:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    80003d8c:	0007b783          	ld	a5,0(a5)
    80003d90:	0007b783          	ld	a5,0(a5)
    80003d94:	00079663          	bnez	a5,80003da0 <prvGetNextExpireTime+0x28>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:630 (discriminator 1)
    80003d98:	00100793          	li	a5,1
    80003d9c:	0080006f          	j	80003da4 <prvGetNextExpireTime+0x2c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:630 (discriminator 2)
    80003da0:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:630 (discriminator 4)
    80003da4:	fd843703          	ld	a4,-40(s0)
    80003da8:	00f73023          	sd	a5,0(a4)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:631 (discriminator 4)
	if( *pxListWasEmpty == pdFALSE )
    80003dac:	fd843783          	ld	a5,-40(s0)
    80003db0:	0007b783          	ld	a5,0(a5)
    80003db4:	00079e63          	bnez	a5,80003dd0 <prvGetNextExpireTime+0x58>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:633
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    80003db8:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    80003dbc:	0007b783          	ld	a5,0(a5)
    80003dc0:	0187b783          	ld	a5,24(a5)
    80003dc4:	0007b783          	ld	a5,0(a5)
    80003dc8:	fef43423          	sd	a5,-24(s0)
    80003dcc:	0080006f          	j	80003dd4 <prvGetNextExpireTime+0x5c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:638
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    80003dd0:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:641
	}

	return xNextExpireTime;
    80003dd4:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:642
}
    80003dd8:	00078513          	mv	a0,a5
    80003ddc:	02813403          	ld	s0,40(sp)
    80003de0:	03010113          	addi	sp,sp,48
    80003de4:	00008067          	ret

0000000080003de8 <prvSampleTimeNow>:
prvSampleTimeNow():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:646
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    80003de8:	fd010113          	addi	sp,sp,-48
    80003dec:	02113423          	sd	ra,40(sp)
    80003df0:	02813023          	sd	s0,32(sp)
    80003df4:	03010413          	addi	s0,sp,48
    80003df8:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:650
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    80003dfc:	e05fe0ef          	jal	ra,80002c00 <xTaskGetTickCount>
    80003e00:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:652

	if( xTimeNow < xLastTime )
    80003e04:	9e818793          	addi	a5,gp,-1560 # 80004d68 <xLastTime.0>
    80003e08:	0007b783          	ld	a5,0(a5)
    80003e0c:	fe843703          	ld	a4,-24(s0)
    80003e10:	00f77c63          	bgeu	a4,a5,80003e28 <prvSampleTimeNow+0x40>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:654
	{
		prvSwitchTimerLists();
    80003e14:	3a4000ef          	jal	ra,800041b8 <prvSwitchTimerLists>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:655
		*pxTimerListsWereSwitched = pdTRUE;
    80003e18:	fd843783          	ld	a5,-40(s0)
    80003e1c:	00100713          	li	a4,1
    80003e20:	00e7b023          	sd	a4,0(a5)
    80003e24:	00c0006f          	j	80003e30 <prvSampleTimeNow+0x48>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:659
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    80003e28:	fd843783          	ld	a5,-40(s0)
    80003e2c:	0007b023          	sd	zero,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:662
	}

	xLastTime = xTimeNow;
    80003e30:	9e818793          	addi	a5,gp,-1560 # 80004d68 <xLastTime.0>
    80003e34:	fe843703          	ld	a4,-24(s0)
    80003e38:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:664

	return xTimeNow;
    80003e3c:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:665
}
    80003e40:	00078513          	mv	a0,a5
    80003e44:	02813083          	ld	ra,40(sp)
    80003e48:	02013403          	ld	s0,32(sp)
    80003e4c:	03010113          	addi	sp,sp,48
    80003e50:	00008067          	ret

0000000080003e54 <prvInsertTimerInActiveList>:
prvInsertTimerInActiveList():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:669
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    80003e54:	fc010113          	addi	sp,sp,-64
    80003e58:	02113c23          	sd	ra,56(sp)
    80003e5c:	02813823          	sd	s0,48(sp)
    80003e60:	04010413          	addi	s0,sp,64
    80003e64:	fca43c23          	sd	a0,-40(s0)
    80003e68:	fcb43823          	sd	a1,-48(s0)
    80003e6c:	fcc43423          	sd	a2,-56(s0)
    80003e70:	fcd43023          	sd	a3,-64(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:670
BaseType_t xProcessTimerNow = pdFALSE;
    80003e74:	fe043423          	sd	zero,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:672

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    80003e78:	fd843783          	ld	a5,-40(s0)
    80003e7c:	fd043703          	ld	a4,-48(s0)
    80003e80:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:673
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    80003e84:	fd843783          	ld	a5,-40(s0)
    80003e88:	fd843703          	ld	a4,-40(s0)
    80003e8c:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:675

	if( xNextExpiryTime <= xTimeNow )
    80003e90:	fd043703          	ld	a4,-48(s0)
    80003e94:	fc843783          	ld	a5,-56(s0)
    80003e98:	04e7e463          	bltu	a5,a4,80003ee0 <prvInsertTimerInActiveList+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:679
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    80003e9c:	fc843703          	ld	a4,-56(s0)
    80003ea0:	fc043783          	ld	a5,-64(s0)
    80003ea4:	40f70733          	sub	a4,a4,a5
    80003ea8:	fd843783          	ld	a5,-40(s0)
    80003eac:	0307b783          	ld	a5,48(a5)
    80003eb0:	00f76863          	bltu	a4,a5,80003ec0 <prvInsertTimerInActiveList+0x6c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:683
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    80003eb4:	00100793          	li	a5,1
    80003eb8:	fef43423          	sd	a5,-24(s0)
    80003ebc:	0640006f          	j	80003f20 <prvInsertTimerInActiveList+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:687
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    80003ec0:	9d018793          	addi	a5,gp,-1584 # 80004d50 <pxOverflowTimerList>
    80003ec4:	0007b703          	ld	a4,0(a5)
    80003ec8:	fd843783          	ld	a5,-40(s0)
    80003ecc:	00878793          	addi	a5,a5,8
    80003ed0:	00078593          	mv	a1,a5
    80003ed4:	00070513          	mv	a0,a4
    80003ed8:	ee8fd0ef          	jal	ra,800015c0 <vListInsert>
    80003edc:	0440006f          	j	80003f20 <prvInsertTimerInActiveList+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:692
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    80003ee0:	fc843703          	ld	a4,-56(s0)
    80003ee4:	fc043783          	ld	a5,-64(s0)
    80003ee8:	00f77e63          	bgeu	a4,a5,80003f04 <prvInsertTimerInActiveList+0xb0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:692 (discriminator 1)
    80003eec:	fd043703          	ld	a4,-48(s0)
    80003ef0:	fc043783          	ld	a5,-64(s0)
    80003ef4:	00f76863          	bltu	a4,a5,80003f04 <prvInsertTimerInActiveList+0xb0>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:697
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    80003ef8:	00100793          	li	a5,1
    80003efc:	fef43423          	sd	a5,-24(s0)
    80003f00:	0200006f          	j	80003f20 <prvInsertTimerInActiveList+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:701
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    80003f04:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    80003f08:	0007b703          	ld	a4,0(a5)
    80003f0c:	fd843783          	ld	a5,-40(s0)
    80003f10:	00878793          	addi	a5,a5,8
    80003f14:	00078593          	mv	a1,a5
    80003f18:	00070513          	mv	a0,a4
    80003f1c:	ea4fd0ef          	jal	ra,800015c0 <vListInsert>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:705
		}
	}

	return xProcessTimerNow;
    80003f20:	fe843783          	ld	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:706
}
    80003f24:	00078513          	mv	a0,a5
    80003f28:	03813083          	ld	ra,56(sp)
    80003f2c:	03013403          	ld	s0,48(sp)
    80003f30:	04010113          	addi	sp,sp,64
    80003f34:	00008067          	ret

0000000080003f38 <prvProcessReceivedCommands>:
prvProcessReceivedCommands():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:710
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    80003f38:	fa010113          	addi	sp,sp,-96
    80003f3c:	04113c23          	sd	ra,88(sp)
    80003f40:	04813823          	sd	s0,80(sp)
    80003f44:	06010413          	addi	s0,sp,96
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:716
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    80003f48:	2340006f          	j	8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:722
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    80003f4c:	fb043783          	ld	a5,-80(s0)
    80003f50:	0407d463          	bgez	a5,80003f98 <prvProcessReceivedCommands+0x60>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:724
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    80003f54:	fb040793          	addi	a5,s0,-80
    80003f58:	00878793          	addi	a5,a5,8
    80003f5c:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:728

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    80003f60:	fe843783          	ld	a5,-24(s0)
    80003f64:	00079863          	bnez	a5,80003f74 <prvProcessReceivedCommands+0x3c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:728 (discriminator 1)
    80003f68:	30047073          	csrci	mstatus,8
    80003f6c:	00100073          	ebreak
    80003f70:	0000006f          	j	80003f70 <prvProcessReceivedCommands+0x38>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:731

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    80003f74:	fe843783          	ld	a5,-24(s0)
    80003f78:	0007b683          	ld	a3,0(a5)
    80003f7c:	fe843783          	ld	a5,-24(s0)
    80003f80:	0087b703          	ld	a4,8(a5)
    80003f84:	fe843783          	ld	a5,-24(s0)
    80003f88:	0107a783          	lw	a5,16(a5)
    80003f8c:	00078593          	mv	a1,a5
    80003f90:	00070513          	mv	a0,a4
    80003f94:	000680e7          	jalr	a3
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:742
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    80003f98:	fb043783          	ld	a5,-80(s0)
    80003f9c:	1c07ce63          	bltz	a5,80004178 <prvProcessReceivedCommands+0x240>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:746
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    80003fa0:	fc043783          	ld	a5,-64(s0)
    80003fa4:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:748

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    80003fa8:	fe043783          	ld	a5,-32(s0)
    80003fac:	0287b783          	ld	a5,40(a5)
    80003fb0:	00078a63          	beqz	a5,80003fc4 <prvProcessReceivedCommands+0x8c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:751
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    80003fb4:	fe043783          	ld	a5,-32(s0)
    80003fb8:	00878793          	addi	a5,a5,8
    80003fbc:	00078513          	mv	a0,a5
    80003fc0:	ed4fd0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:766
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    80003fc4:	fa840793          	addi	a5,s0,-88
    80003fc8:	00078513          	mv	a0,a5
    80003fcc:	e1dff0ef          	jal	ra,80003de8 <prvSampleTimeNow>
    80003fd0:	fca43c23          	sd	a0,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:768

			switch( xMessage.xMessageID )
    80003fd4:	fb043783          	ld	a5,-80(s0)
    80003fd8:	00900713          	li	a4,9
    80003fdc:	1af76063          	bltu	a4,a5,8000417c <prvProcessReceivedCommands+0x244>
    80003fe0:	00279713          	slli	a4,a5,0x2
    80003fe4:	00001797          	auipc	a5,0x1
    80003fe8:	a0478793          	addi	a5,a5,-1532 # 800049e8 <memset+0x3d8>
    80003fec:	00f707b3          	add	a5,a4,a5
    80003ff0:	0007a783          	lw	a5,0(a5)
    80003ff4:	0007871b          	sext.w	a4,a5
    80003ff8:	00001797          	auipc	a5,0x1
    80003ffc:	9f078793          	addi	a5,a5,-1552 # 800049e8 <memset+0x3d8>
    80004000:	00f707b3          	add	a5,a4,a5
    80004004:	00078067          	jr	a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:776
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    80004008:	fe043783          	ld	a5,-32(s0)
    8000400c:	0487c783          	lbu	a5,72(a5)
    80004010:	0017e793          	ori	a5,a5,1
    80004014:	0ff7f713          	andi	a4,a5,255
    80004018:	fe043783          	ld	a5,-32(s0)
    8000401c:	04e78423          	sb	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:777
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    80004020:	fb843703          	ld	a4,-72(s0)
    80004024:	fe043783          	ld	a5,-32(s0)
    80004028:	0307b783          	ld	a5,48(a5)
    8000402c:	00f707b3          	add	a5,a4,a5
    80004030:	fb843703          	ld	a4,-72(s0)
    80004034:	00070693          	mv	a3,a4
    80004038:	fd843603          	ld	a2,-40(s0)
    8000403c:	00078593          	mv	a1,a5
    80004040:	fe043503          	ld	a0,-32(s0)
    80004044:	e11ff0ef          	jal	ra,80003e54 <prvInsertTimerInActiveList>
    80004048:	00050793          	mv	a5,a0
    8000404c:	12078863          	beqz	a5,8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:781
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    80004050:	fe043783          	ld	a5,-32(s0)
    80004054:	0407b783          	ld	a5,64(a5)
    80004058:	fe043503          	ld	a0,-32(s0)
    8000405c:	000780e7          	jalr	a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:784
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    80004060:	fe043783          	ld	a5,-32(s0)
    80004064:	0487c783          	lbu	a5,72(a5)
    80004068:	0007879b          	sext.w	a5,a5
    8000406c:	0047f793          	andi	a5,a5,4
    80004070:	0007879b          	sext.w	a5,a5
    80004074:	10078463          	beqz	a5,8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:786
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    80004078:	fb843703          	ld	a4,-72(s0)
    8000407c:	fe043783          	ld	a5,-32(s0)
    80004080:	0307b783          	ld	a5,48(a5)
    80004084:	00f707b3          	add	a5,a4,a5
    80004088:	00000713          	li	a4,0
    8000408c:	00000693          	li	a3,0
    80004090:	00078613          	mv	a2,a5
    80004094:	00000593          	li	a1,0
    80004098:	fe043503          	ld	a0,-32(s0)
    8000409c:	9d9ff0ef          	jal	ra,80003a74 <xTimerGenericCommand>
    800040a0:	fca43823          	sd	a0,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:787
							configASSERT( xResult );
    800040a4:	fd043783          	ld	a5,-48(s0)
    800040a8:	0c079a63          	bnez	a5,8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:787 (discriminator 1)
    800040ac:	30047073          	csrci	mstatus,8
    800040b0:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:787 (discriminator 2)
    800040b4:	0000006f          	j	800040b4 <prvProcessReceivedCommands+0x17c>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:804
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    800040b8:	fe043783          	ld	a5,-32(s0)
    800040bc:	0487c783          	lbu	a5,72(a5)
    800040c0:	ffe7f793          	andi	a5,a5,-2
    800040c4:	0ff7f713          	andi	a4,a5,255
    800040c8:	fe043783          	ld	a5,-32(s0)
    800040cc:	04e78423          	sb	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:805
					break;
    800040d0:	0ac0006f          	j	8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:809

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    800040d4:	fe043783          	ld	a5,-32(s0)
    800040d8:	0487c783          	lbu	a5,72(a5)
    800040dc:	0017e793          	ori	a5,a5,1
    800040e0:	0ff7f713          	andi	a4,a5,255
    800040e4:	fe043783          	ld	a5,-32(s0)
    800040e8:	04e78423          	sb	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:810
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    800040ec:	fb843703          	ld	a4,-72(s0)
    800040f0:	fe043783          	ld	a5,-32(s0)
    800040f4:	02e7b823          	sd	a4,48(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:811
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    800040f8:	fe043783          	ld	a5,-32(s0)
    800040fc:	0307b783          	ld	a5,48(a5)
    80004100:	00079863          	bnez	a5,80004110 <prvProcessReceivedCommands+0x1d8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:811 (discriminator 1)
    80004104:	30047073          	csrci	mstatus,8
    80004108:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:811 (discriminator 5)
    8000410c:	0000006f          	j	8000410c <prvProcessReceivedCommands+0x1d4>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:819
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    80004110:	fe043783          	ld	a5,-32(s0)
    80004114:	0307b703          	ld	a4,48(a5)
    80004118:	fd843783          	ld	a5,-40(s0)
    8000411c:	00f707b3          	add	a5,a4,a5
    80004120:	fd843683          	ld	a3,-40(s0)
    80004124:	fd843603          	ld	a2,-40(s0)
    80004128:	00078593          	mv	a1,a5
    8000412c:	fe043503          	ld	a0,-32(s0)
    80004130:	d25ff0ef          	jal	ra,80003e54 <prvInsertTimerInActiveList>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:820
					break;
    80004134:	0480006f          	j	8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:828
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    80004138:	fe043783          	ld	a5,-32(s0)
    8000413c:	0487c783          	lbu	a5,72(a5)
    80004140:	0007879b          	sext.w	a5,a5
    80004144:	0027f793          	andi	a5,a5,2
    80004148:	0007879b          	sext.w	a5,a5
    8000414c:	00079863          	bnez	a5,8000415c <prvProcessReceivedCommands+0x224>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:830
						{
							vPortFree( pxTimer );
    80004150:	fe043503          	ld	a0,-32(s0)
    80004154:	ab1fc0ef          	jal	ra,80000c04 <vPortFree>
    80004158:	0240006f          	j	8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:834
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    8000415c:	fe043783          	ld	a5,-32(s0)
    80004160:	0487c783          	lbu	a5,72(a5)
    80004164:	ffe7f793          	andi	a5,a5,-2
    80004168:	0ff7f713          	andi	a4,a5,255
    8000416c:	fe043783          	ld	a5,-32(s0)
    80004170:	04e78423          	sb	a4,72(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:846
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    80004174:	0080006f          	j	8000417c <prvProcessReceivedCommands+0x244>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:852

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    80004178:	00000013          	nop
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:716
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8000417c:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80004180:	0007b783          	ld	a5,0(a5)
    80004184:	fb040713          	addi	a4,s0,-80
    80004188:	00000613          	li	a2,0
    8000418c:	00070593          	mv	a1,a4
    80004190:	00078513          	mv	a0,a5
    80004194:	be5fd0ef          	jal	ra,80001d78 <xQueueReceive>
    80004198:	00050793          	mv	a5,a0
    8000419c:	da0798e3          	bnez	a5,80003f4c <prvProcessReceivedCommands+0x14>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:854
	}
}
    800041a0:	00000013          	nop
    800041a4:	00000013          	nop
    800041a8:	05813083          	ld	ra,88(sp)
    800041ac:	05013403          	ld	s0,80(sp)
    800041b0:	06010113          	addi	sp,sp,96
    800041b4:	00008067          	ret

00000000800041b8 <prvSwitchTimerLists>:
prvSwitchTimerLists():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:858
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    800041b8:	fc010113          	addi	sp,sp,-64
    800041bc:	02113c23          	sd	ra,56(sp)
    800041c0:	02813823          	sd	s0,48(sp)
    800041c4:	04010413          	addi	s0,sp,64
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:868

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    800041c8:	0ec0006f          	j	800042b4 <prvSwitchTimerLists+0xfc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:870
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    800041cc:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    800041d0:	0007b783          	ld	a5,0(a5)
    800041d4:	0187b783          	ld	a5,24(a5)
    800041d8:	0007b783          	ld	a5,0(a5)
    800041dc:	fef43023          	sd	a5,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:873

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    800041e0:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    800041e4:	0007b783          	ld	a5,0(a5)
    800041e8:	0187b783          	ld	a5,24(a5)
    800041ec:	0187b783          	ld	a5,24(a5)
    800041f0:	fcf43c23          	sd	a5,-40(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:874
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    800041f4:	fd843783          	ld	a5,-40(s0)
    800041f8:	00878793          	addi	a5,a5,8
    800041fc:	00078513          	mv	a0,a5
    80004200:	c94fd0ef          	jal	ra,80001694 <uxListRemove>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:880
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    80004204:	fd843783          	ld	a5,-40(s0)
    80004208:	0407b783          	ld	a5,64(a5)
    8000420c:	fd843503          	ld	a0,-40(s0)
    80004210:	000780e7          	jalr	a5
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:882

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    80004214:	fd843783          	ld	a5,-40(s0)
    80004218:	0487c783          	lbu	a5,72(a5)
    8000421c:	0007879b          	sext.w	a5,a5
    80004220:	0047f793          	andi	a5,a5,4
    80004224:	0007879b          	sext.w	a5,a5
    80004228:	08078663          	beqz	a5,800042b4 <prvSwitchTimerLists+0xfc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:890
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    8000422c:	fd843783          	ld	a5,-40(s0)
    80004230:	0307b783          	ld	a5,48(a5)
    80004234:	fe043703          	ld	a4,-32(s0)
    80004238:	00f707b3          	add	a5,a4,a5
    8000423c:	fcf43823          	sd	a5,-48(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:891
			if( xReloadTime > xNextExpireTime )
    80004240:	fd043703          	ld	a4,-48(s0)
    80004244:	fe043783          	ld	a5,-32(s0)
    80004248:	02e7fe63          	bgeu	a5,a4,80004284 <prvSwitchTimerLists+0xcc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:893
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    8000424c:	fd843783          	ld	a5,-40(s0)
    80004250:	fd043703          	ld	a4,-48(s0)
    80004254:	00e7b423          	sd	a4,8(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:894
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    80004258:	fd843783          	ld	a5,-40(s0)
    8000425c:	fd843703          	ld	a4,-40(s0)
    80004260:	02e7b023          	sd	a4,32(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:895
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    80004264:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    80004268:	0007b703          	ld	a4,0(a5)
    8000426c:	fd843783          	ld	a5,-40(s0)
    80004270:	00878793          	addi	a5,a5,8
    80004274:	00078593          	mv	a1,a5
    80004278:	00070513          	mv	a0,a4
    8000427c:	b44fd0ef          	jal	ra,800015c0 <vListInsert>
    80004280:	0340006f          	j	800042b4 <prvSwitchTimerLists+0xfc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:899
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    80004284:	00000713          	li	a4,0
    80004288:	00000693          	li	a3,0
    8000428c:	fe043603          	ld	a2,-32(s0)
    80004290:	00000593          	li	a1,0
    80004294:	fd843503          	ld	a0,-40(s0)
    80004298:	fdcff0ef          	jal	ra,80003a74 <xTimerGenericCommand>
    8000429c:	fca43423          	sd	a0,-56(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:900
				configASSERT( xResult );
    800042a0:	fc843783          	ld	a5,-56(s0)
    800042a4:	00079863          	bnez	a5,800042b4 <prvSwitchTimerLists+0xfc>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:900 (discriminator 1)
    800042a8:	30047073          	csrci	mstatus,8
    800042ac:	00100073          	ebreak
    800042b0:	0000006f          	j	800042b0 <prvSwitchTimerLists+0xf8>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:868
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    800042b4:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    800042b8:	0007b783          	ld	a5,0(a5)
    800042bc:	0007b783          	ld	a5,0(a5)
    800042c0:	f00796e3          	bnez	a5,800041cc <prvSwitchTimerLists+0x14>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:910
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    800042c4:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    800042c8:	0007b783          	ld	a5,0(a5)
    800042cc:	fef43423          	sd	a5,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:911
	pxCurrentTimerList = pxOverflowTimerList;
    800042d0:	9d018793          	addi	a5,gp,-1584 # 80004d50 <pxOverflowTimerList>
    800042d4:	0007b703          	ld	a4,0(a5)
    800042d8:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    800042dc:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:912
	pxOverflowTimerList = pxTemp;
    800042e0:	9d018793          	addi	a5,gp,-1584 # 80004d50 <pxOverflowTimerList>
    800042e4:	fe843703          	ld	a4,-24(s0)
    800042e8:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:913
}
    800042ec:	00000013          	nop
    800042f0:	03813083          	ld	ra,56(sp)
    800042f4:	03013403          	ld	s0,48(sp)
    800042f8:	04010113          	addi	sp,sp,64
    800042fc:	00008067          	ret

0000000080004300 <prvCheckForValidListAndQueue>:
prvCheckForValidListAndQueue():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:917
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    80004300:	ff010113          	addi	sp,sp,-16
    80004304:	00113423          	sd	ra,8(sp)
    80004308:	00813023          	sd	s0,0(sp)
    8000430c:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:921
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    80004310:	cf0ff0ef          	jal	ra,80003800 <vTaskEnterCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:923
	{
		if( xTimerQueue == NULL )
    80004314:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80004318:	0007b783          	ld	a5,0(a5)
    8000431c:	06079e63          	bnez	a5,80004398 <prvCheckForValidListAndQueue+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:925
		{
			vListInitialise( &xActiveTimerList1 );
    80004320:	00101517          	auipc	a0,0x101
    80004324:	c7050513          	addi	a0,a0,-912 # 80104f90 <xActiveTimerList1>
    80004328:	984fd0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:926
			vListInitialise( &xActiveTimerList2 );
    8000432c:	00101517          	auipc	a0,0x101
    80004330:	c8c50513          	addi	a0,a0,-884 # 80104fb8 <xActiveTimerList2>
    80004334:	978fd0ef          	jal	ra,800014ac <vListInitialise>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:927
			pxCurrentTimerList = &xActiveTimerList1;
    80004338:	9c818793          	addi	a5,gp,-1592 # 80004d48 <pxCurrentTimerList>
    8000433c:	00101717          	auipc	a4,0x101
    80004340:	c5470713          	addi	a4,a4,-940 # 80104f90 <xActiveTimerList1>
    80004344:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:928
			pxOverflowTimerList = &xActiveTimerList2;
    80004348:	9d018793          	addi	a5,gp,-1584 # 80004d50 <pxOverflowTimerList>
    8000434c:	00101717          	auipc	a4,0x101
    80004350:	c6c70713          	addi	a4,a4,-916 # 80104fb8 <xActiveTimerList2>
    80004354:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:941

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    80004358:	00000613          	li	a2,0
    8000435c:	02000593          	li	a1,32
    80004360:	00400513          	li	a0,4
    80004364:	cf4fd0ef          	jal	ra,80001858 <xQueueGenericCreate>
    80004368:	00050713          	mv	a4,a0
    8000436c:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80004370:	00e7b023          	sd	a4,0(a5)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:947
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    80004374:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80004378:	0007b783          	ld	a5,0(a5)
    8000437c:	00078e63          	beqz	a5,80004398 <prvCheckForValidListAndQueue+0x98>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:949
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    80004380:	9d818793          	addi	a5,gp,-1576 # 80004d58 <xTimerQueue>
    80004384:	0007b783          	ld	a5,0(a5)
    80004388:	00000597          	auipc	a1,0x0
    8000438c:	65858593          	addi	a1,a1,1624 # 800049e0 <memset+0x3d0>
    80004390:	00078513          	mv	a0,a5
    80004394:	ff1fd0ef          	jal	ra,80002384 <vQueueAddToRegistry>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:963
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    80004398:	cb0ff0ef          	jal	ra,80003848 <vTaskExitCritical>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Source/timers.c:964
}
    8000439c:	00000013          	nop
    800043a0:	00813083          	ld	ra,8(sp)
    800043a4:	00013403          	ld	s0,0(sp)
    800043a8:	01010113          	addi	sp,sp,16
    800043ac:	00008067          	ret

00000000800043b0 <main>:
main():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:89
//static gpio_instance_t g_gpio_out;

/*-----------------------------------------------------------*/

int main( void )
{
    800043b0:	ff010113          	addi	sp,sp,-16
    800043b4:	00113423          	sd	ra,8(sp)
    800043b8:	00813023          	sd	s0,0(sp)
    800043bc:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:90
	prvSetupHardware();
    800043c0:	044000ef          	jal	ra,80004404 <prvSetupHardware>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:91
	vSendString("[  2] prvSetupHardware Over \n\r");
    800043c4:	00000517          	auipc	a0,0x0
    800043c8:	64c50513          	addi	a0,a0,1612 # 80004a10 <memset+0x400>
    800043cc:	068000ef          	jal	ra,80004434 <vSendString>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:100
	{
		main_blinky();
	}
	#else
	{
		vSendString("[  3] main_full \n\r");
    800043d0:	00000517          	auipc	a0,0x0
    800043d4:	66050513          	addi	a0,a0,1632 # 80004a30 <memset+0x420>
    800043d8:	05c000ef          	jal	ra,80004434 <vSendString>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:101
		main_full();
    800043dc:	c65fb0ef          	jal	ra,80000040 <main_full>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:102
		vSendString("[  9] main_full over\n\r");
    800043e0:	00000517          	auipc	a0,0x0
    800043e4:	66850513          	addi	a0,a0,1640 # 80004a48 <memset+0x438>
    800043e8:	04c000ef          	jal	ra,80004434 <vSendString>
    800043ec:	00000793          	li	a5,0
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:105
	}
	#endif
}
    800043f0:	00078513          	mv	a0,a5
    800043f4:	00813083          	ld	ra,8(sp)
    800043f8:	00013403          	ld	s0,0(sp)
    800043fc:	01010113          	addi	sp,sp,16
    80004400:	00008067          	ret

0000000080004404 <prvSetupHardware>:
prvSetupHardware():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:109
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
    80004404:	ff010113          	addi	sp,sp,-16
    80004408:	00113423          	sd	ra,8(sp)
    8000440c:	00813023          	sd	s0,0(sp)
    80004410:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:112
	//PLIC_init();
	//Init_uart();
	vSendString("\r[  1] UART OK !\n\r");
    80004414:	00000517          	auipc	a0,0x0
    80004418:	64c50513          	addi	a0,a0,1612 # 80004a60 <memset+0x450>
    8000441c:	018000ef          	jal	ra,80004434 <vSendString>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:113
}
    80004420:	00000013          	nop
    80004424:	00813083          	ld	ra,8(sp)
    80004428:	00013403          	ld	s0,0(sp)
    8000442c:	01010113          	addi	sp,sp,16
    80004430:	00008067          	ret

0000000080004434 <vSendString>:
vSendString():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:126
	//ulLEDState = !ulLEDState;
}
/*-----------------------------------------------------------*/

void vSendString( const char * const pcString )
{
    80004434:	fe010113          	addi	sp,sp,-32
    80004438:	00113c23          	sd	ra,24(sp)
    8000443c:	00813823          	sd	s0,16(sp)
    80004440:	02010413          	addi	s0,sp,32
    80004444:	fea43423          	sd	a0,-24(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:127
	Transmit_uart(pcString );
    80004448:	fe843503          	ld	a0,-24(s0)
    8000444c:	cb0fc0ef          	jal	ra,800008fc <Transmit_uart>
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:128
}
    80004450:	00000013          	nop
    80004454:	01813083          	ld	ra,24(sp)
    80004458:	01013403          	ld	s0,16(sp)
    8000445c:	02010113          	addi	sp,sp,32
    80004460:	00008067          	ret

0000000080004464 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:132
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
    80004464:	ff010113          	addi	sp,sp,-16
    80004468:	00813423          	sd	s0,8(sp)
    8000446c:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:143
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
    80004470:	30047073          	csrci	mstatus,8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:144
	__asm volatile( "ebreak" );
    80004474:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:145 (discriminator 1)
	for( ;; );
    80004478:	0000006f          	j	80004478 <vApplicationMallocFailedHook+0x14>

000000008000447c <vApplicationIdleHook>:
vApplicationIdleHook():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:150
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
    8000447c:	ff010113          	addi	sp,sp,-16
    80004480:	00813423          	sd	s0,8(sp)
    80004484:	01010413          	addi	s0,sp,16
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:160
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
    80004488:	00000013          	nop
    8000448c:	00813403          	ld	s0,8(sp)
    80004490:	01010113          	addi	sp,sp,16
    80004494:	00008067          	ret

0000000080004498 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:164
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
    80004498:	fe010113          	addi	sp,sp,-32
    8000449c:	00813c23          	sd	s0,24(sp)
    800044a0:	02010413          	addi	s0,sp,32
    800044a4:	fea43423          	sd	a0,-24(s0)
    800044a8:	feb43023          	sd	a1,-32(s0)
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:171
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
    800044ac:	30047073          	csrci	mstatus,8
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:172
	__asm volatile( "ebreak" );
    800044b0:	00100073          	ebreak
/media/hdg/Workspace/MDP/Test_Programs/OS/FreeRTOSv10.2.1-master/freertosv10.2.1/FreeRTOS/Demo/RISC-V_Renode_Emulator_SoftConsole/Debug/../main.c:173 (discriminator 1)
	for( ;; );
    800044b4:	0000006f          	j	800044b4 <vApplicationStackOverflowHook+0x1c>

00000000800044b8 <__clzdi2>:
__clzdi2():
/media/hdg/Workspace/MDP/Archive/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:710
int
__clzSI2 (UWtype x)
{
  Wtype ret;

  count_leading_zeros (ret, x);
    800044b8:	03800793          	li	a5,56
/media/hdg/Workspace/MDP/Archive/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 20)
    800044bc:	00f55733          	srl	a4,a0,a5
    800044c0:	0ff77713          	andi	a4,a4,255
    800044c4:	00071663          	bnez	a4,800044d0 <__clzdi2+0x18>
/media/hdg/Workspace/MDP/Archive/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 18)
    800044c8:	ff878793          	addi	a5,a5,-8
    800044cc:	fe0798e3          	bnez	a5,800044bc <__clzdi2+0x4>
/media/hdg/Workspace/MDP/Archive/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 21)
    800044d0:	04000713          	li	a4,64
    800044d4:	40f70733          	sub	a4,a4,a5
    800044d8:	00f55533          	srl	a0,a0,a5
    800044dc:	00000797          	auipc	a5,0x0
    800044e0:	59c78793          	addi	a5,a5,1436 # 80004a78 <__clz_tab>
    800044e4:	00a78533          	add	a0,a5,a0
    800044e8:	00054503          	lbu	a0,0(a0)
/media/hdg/Workspace/MDP/Archive/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:713 (discriminator 21)

  return ret;
}
    800044ec:	40a7053b          	subw	a0,a4,a0
    800044f0:	00008067          	ret

00000000800044f4 <memcpy>:
memcpy():
    800044f4:	00a5c7b3          	xor	a5,a1,a0
    800044f8:	0077f793          	andi	a5,a5,7
    800044fc:	00c508b3          	add	a7,a0,a2
    80004500:	06079263          	bnez	a5,80004564 <memcpy+0x70>
    80004504:	00700793          	li	a5,7
    80004508:	04c7fe63          	bgeu	a5,a2,80004564 <memcpy+0x70>
    8000450c:	00757793          	andi	a5,a0,7
    80004510:	00050713          	mv	a4,a0
    80004514:	06079863          	bnez	a5,80004584 <memcpy+0x90>
    80004518:	ff88f613          	andi	a2,a7,-8
    8000451c:	fc060793          	addi	a5,a2,-64
    80004520:	08f76c63          	bltu	a4,a5,800045b8 <memcpy+0xc4>
    80004524:	02c77c63          	bgeu	a4,a2,8000455c <memcpy+0x68>
    80004528:	00058693          	mv	a3,a1
    8000452c:	00070793          	mv	a5,a4
    80004530:	0006b803          	ld	a6,0(a3)
    80004534:	00878793          	addi	a5,a5,8
    80004538:	00868693          	addi	a3,a3,8
    8000453c:	ff07bc23          	sd	a6,-8(a5)
    80004540:	fec7e8e3          	bltu	a5,a2,80004530 <memcpy+0x3c>
    80004544:	fff60793          	addi	a5,a2,-1
    80004548:	40e787b3          	sub	a5,a5,a4
    8000454c:	ff87f793          	andi	a5,a5,-8
    80004550:	00878793          	addi	a5,a5,8
    80004554:	00f70733          	add	a4,a4,a5
    80004558:	00f585b3          	add	a1,a1,a5
    8000455c:	01176863          	bltu	a4,a7,8000456c <memcpy+0x78>
    80004560:	00008067          	ret
    80004564:	00050713          	mv	a4,a0
    80004568:	ff157ce3          	bgeu	a0,a7,80004560 <memcpy+0x6c>
    8000456c:	0005c783          	lbu	a5,0(a1)
    80004570:	00170713          	addi	a4,a4,1
    80004574:	00158593          	addi	a1,a1,1
    80004578:	fef70fa3          	sb	a5,-1(a4)
    8000457c:	ff1768e3          	bltu	a4,a7,8000456c <memcpy+0x78>
    80004580:	00008067          	ret
    80004584:	0005c683          	lbu	a3,0(a1)
    80004588:	00170713          	addi	a4,a4,1
    8000458c:	00777793          	andi	a5,a4,7
    80004590:	fed70fa3          	sb	a3,-1(a4)
    80004594:	00158593          	addi	a1,a1,1
    80004598:	f80780e3          	beqz	a5,80004518 <memcpy+0x24>
    8000459c:	0005c683          	lbu	a3,0(a1)
    800045a0:	00170713          	addi	a4,a4,1
    800045a4:	00777793          	andi	a5,a4,7
    800045a8:	fed70fa3          	sb	a3,-1(a4)
    800045ac:	00158593          	addi	a1,a1,1
    800045b0:	fc079ae3          	bnez	a5,80004584 <memcpy+0x90>
    800045b4:	f65ff06f          	j	80004518 <memcpy+0x24>
    800045b8:	0085b683          	ld	a3,8(a1)
    800045bc:	0005b283          	ld	t0,0(a1)
    800045c0:	0105bf83          	ld	t6,16(a1)
    800045c4:	0185bf03          	ld	t5,24(a1)
    800045c8:	0205be83          	ld	t4,32(a1)
    800045cc:	0285be03          	ld	t3,40(a1)
    800045d0:	0305b303          	ld	t1,48(a1)
    800045d4:	0385b803          	ld	a6,56(a1)
    800045d8:	00d73423          	sd	a3,8(a4)
    800045dc:	0405b683          	ld	a3,64(a1)
    800045e0:	00573023          	sd	t0,0(a4)
    800045e4:	01f73823          	sd	t6,16(a4)
    800045e8:	01e73c23          	sd	t5,24(a4)
    800045ec:	03d73023          	sd	t4,32(a4)
    800045f0:	03c73423          	sd	t3,40(a4)
    800045f4:	02673823          	sd	t1,48(a4)
    800045f8:	03073c23          	sd	a6,56(a4)
    800045fc:	04d73023          	sd	a3,64(a4)
    80004600:	04870713          	addi	a4,a4,72
    80004604:	04858593          	addi	a1,a1,72
    80004608:	faf768e3          	bltu	a4,a5,800045b8 <memcpy+0xc4>
    8000460c:	f19ff06f          	j	80004524 <memcpy+0x30>

0000000080004610 <memset>:
memset():
    80004610:	00f00313          	li	t1,15
    80004614:	00050713          	mv	a4,a0
    80004618:	02c37a63          	bgeu	t1,a2,8000464c <memset+0x3c>
    8000461c:	00f77793          	andi	a5,a4,15
    80004620:	0a079063          	bnez	a5,800046c0 <memset+0xb0>
    80004624:	06059e63          	bnez	a1,800046a0 <memset+0x90>
    80004628:	ff067693          	andi	a3,a2,-16
    8000462c:	00f67613          	andi	a2,a2,15
    80004630:	00e686b3          	add	a3,a3,a4
    80004634:	00b73023          	sd	a1,0(a4)
    80004638:	00b73423          	sd	a1,8(a4)
    8000463c:	01070713          	addi	a4,a4,16
    80004640:	fed76ae3          	bltu	a4,a3,80004634 <memset+0x24>
    80004644:	00061463          	bnez	a2,8000464c <memset+0x3c>
    80004648:	00008067          	ret
    8000464c:	40c306b3          	sub	a3,t1,a2
    80004650:	00269693          	slli	a3,a3,0x2
    80004654:	00000297          	auipc	t0,0x0
    80004658:	005686b3          	add	a3,a3,t0
    8000465c:	00c68067          	jr	12(a3)
    80004660:	00b70723          	sb	a1,14(a4)
    80004664:	00b706a3          	sb	a1,13(a4)
    80004668:	00b70623          	sb	a1,12(a4)
    8000466c:	00b705a3          	sb	a1,11(a4)
    80004670:	00b70523          	sb	a1,10(a4)
    80004674:	00b704a3          	sb	a1,9(a4)
    80004678:	00b70423          	sb	a1,8(a4)
    8000467c:	00b703a3          	sb	a1,7(a4)
    80004680:	00b70323          	sb	a1,6(a4)
    80004684:	00b702a3          	sb	a1,5(a4)
    80004688:	00b70223          	sb	a1,4(a4)
    8000468c:	00b701a3          	sb	a1,3(a4)
    80004690:	00b70123          	sb	a1,2(a4)
    80004694:	00b700a3          	sb	a1,1(a4)
    80004698:	00b70023          	sb	a1,0(a4)
    8000469c:	00008067          	ret
    800046a0:	0ff5f593          	andi	a1,a1,255
    800046a4:	00859693          	slli	a3,a1,0x8
    800046a8:	00d5e5b3          	or	a1,a1,a3
    800046ac:	01059693          	slli	a3,a1,0x10
    800046b0:	00d5e5b3          	or	a1,a1,a3
    800046b4:	02059693          	slli	a3,a1,0x20
    800046b8:	00d5e5b3          	or	a1,a1,a3
    800046bc:	f6dff06f          	j	80004628 <memset+0x18>
    800046c0:	00279693          	slli	a3,a5,0x2
    800046c4:	00000297          	auipc	t0,0x0
    800046c8:	005686b3          	add	a3,a3,t0
    800046cc:	00008293          	mv	t0,ra
    800046d0:	f98680e7          	jalr	-104(a3)
    800046d4:	00028093          	mv	ra,t0
    800046d8:	ff078793          	addi	a5,a5,-16
    800046dc:	40f70733          	sub	a4,a4,a5
    800046e0:	00f60633          	add	a2,a2,a5
    800046e4:	f6c374e3          	bgeu	t1,a2,8000464c <memset+0x3c>
    800046e8:	f3dff06f          	j	80004624 <memset+0x14>
    800046ec:	0000                	unimp
    800046ee:	0000                	unimp
    800046f0:	6552                	ld	a0,272(sp)
    800046f2:	00003167          	0x3167
    800046f6:	0000                	unimp
    800046f8:	3520205b          	0x3520205b
    800046fc:	205d                	0x205d
    800046fe:	6154                	ld	a3,128(a0)
    80004700:	31206b73          	csrrsi	s6,0x312,0
    80004704:	6f20                	ld	s0,88(a4)
    80004706:	2021206b          	0x2021206b
    8000470a:	0d0a                	slli	s10,s10,0x2
    8000470c:	0000                	unimp
    8000470e:	0000                	unimp
    80004710:	6552                	ld	a0,272(sp)
    80004712:	00003267          	0x3267
    80004716:	0000                	unimp
    80004718:	3620205b          	0x3620205b
    8000471c:	205d                	0x205d
    8000471e:	6154                	ld	a3,128(a0)
    80004720:	32206b73          	csrrsi	s6,mhcounteren,0
    80004724:	6f20                	ld	s0,88(a4)
    80004726:	2021206b          	0x2021206b
    8000472a:	0d0a                	slli	s10,s10,0x2
    8000472c:	0000                	unimp
    8000472e:	0000                	unimp
    80004730:	3720205b          	0x3720205b
    80004734:	205d                	0x205d
    80004736:	6544                	ld	s1,136(a0)
    80004738:	6f6d                	lui	t5,0x1b
    8000473a:	5320                	lw	s0,96(a4)
    8000473c:	7465                	lui	s0,0xffff9
    8000473e:	6574                	ld	a3,200(a0)
    80004740:	2064                	fld	fs1,192(s0)
    80004742:	2021                	0x2021
    80004744:	0d0a                	slli	s10,s10,0x2
    80004746:	0000                	unimp
    80004748:	3820205b          	0x3820205b
    8000474c:	205d                	0x205d
    8000474e:	6544                	ld	s1,136(a0)
    80004750:	6f6d                	lui	t5,0x1b
    80004752:	5320                	lw	s0,96(a4)
    80004754:	6174                	ld	a3,192(a0)
    80004756:	7472                	ld	s0,312(sp)
    80004758:	6465                	lui	s0,0x19
    8000475a:	2120                	fld	fs0,64(a0)
    8000475c:	0a20                	addi	s0,sp,280
    8000475e:	000d                	c.nop	3
    80004760:	002e                	c.slli	zero,0xb
    80004762:	0000                	unimp
    80004764:	0000                	unimp
    80004766:	0000                	unimp
    80004768:	6150                	ld	a2,128(a0)
    8000476a:	00007373          	csrrci	t1,ustatus,0
    8000476e:	0000                	unimp
    80004770:	5245                	li	tp,-15
    80004772:	4f52                	lw	t5,20(sp)
    80004774:	3a52                	fld	fs4,304(sp)
    80004776:	4420                	lw	s0,72(s0)
    80004778:	6e79                	lui	t3,0x1e
    8000477a:	6d61                	lui	s10,0x18
    8000477c:	6369                	lui	t1,0x1a
    8000477e:	7020                	ld	s0,96(s0)
    80004780:	6972                	ld	s2,280(sp)
    80004782:	7469726f          	jal	tp,8009bec8 <__global_pointer$+0x96b48>
    80004786:	2079                	0x2079
    80004788:	6564                	ld	s1,200(a0)
    8000478a:	6f6d                	lui	t5,0x1b
    8000478c:	7365742f          	0x7365742f
    80004790:	7374                	ld	a3,224(a4)
    80004792:	0d2e                	slli	s10,s10,0xb
    80004794:	000a                	c.slli	zero,0x2
    80004796:	0000                	unimp
    80004798:	5245                	li	tp,-15
    8000479a:	4f52                	lw	t5,20(sp)
    8000479c:	3a52                	fld	fs4,304(sp)
    8000479e:	4220                	lw	s0,64(a2)
    800047a0:	6f6c                	ld	a1,216(a4)
    800047a2:	74206b63          	bltu	zero,sp,80004ef8 <ucHeap+0x188>
    800047a6:	6d69                	lui	s10,0x1a
    800047a8:	2065                	0x2065
    800047aa:	6564                	ld	s1,200(a0)
    800047ac:	6f6d                	lui	t5,0x1b
    800047ae:	7365742f          	0x7365742f
    800047b2:	7374                	ld	a3,224(a4)
    800047b4:	0d2e                	slli	s10,s10,0xb
    800047b6:	000a                	c.slli	zero,0x2
    800047b8:	5245                	li	tp,-15
    800047ba:	4f52                	lw	t5,20(sp)
    800047bc:	3a52                	fld	fs4,304(sp)
    800047be:	4720                	lw	s0,72(a4)
    800047c0:	6e65                	lui	t3,0x19
    800047c2:	7265                	lui	tp,0xffff9
    800047c4:	6369                	lui	t1,0x1a
    800047c6:	7120                	ld	s0,96(a0)
    800047c8:	6575                	lui	a0,0x1d
    800047ca:	6575                	lui	a0,0x1d
    800047cc:	6420                	ld	s0,72(s0)
    800047ce:	6d65                	lui	s10,0x19
    800047d0:	65742f6f          	jal	t5,80047626 <__global_pointer$+0x422a6>
    800047d4:	2e737473          	csrrci	s0,0x2e7,6
    800047d8:	0a0d                	addi	s4,s4,3
    800047da:	0000                	unimp
    800047dc:	0000                	unimp
    800047de:	0000                	unimp
    800047e0:	5245                	li	tp,-15
    800047e2:	4f52                	lw	t5,20(sp)
    800047e4:	3a52                	fld	fs4,304(sp)
    800047e6:	5220                	lw	s0,96(a2)
    800047e8:	6365                	lui	t1,0x19
    800047ea:	7275                	lui	tp,0xffffd
    800047ec:	65766973          	csrrsi	s2,0x657,12
    800047f0:	6d20                	ld	s0,88(a0)
    800047f2:	7475                	lui	s0,0xffffd
    800047f4:	7865                	lui	a6,0xffff9
    800047f6:	6420                	ld	s0,72(s0)
    800047f8:	6d65                	lui	s10,0x19
    800047fa:	65742f6f          	jal	t5,80047650 <__global_pointer$+0x422d0>
    800047fe:	2e737473          	csrrci	s0,0x2e7,6
    80004802:	0a0d                	addi	s4,s4,3
    80004804:	0000                	unimp
    80004806:	0000                	unimp
    80004808:	5245                	li	tp,-15
    8000480a:	4f52                	lw	t5,20(sp)
    8000480c:	3a52                	fld	fs4,304(sp)
    8000480e:	5420                	lw	s0,104(s0)
    80004810:	6d69                	lui	s10,0x1a
    80004812:	7265                	lui	tp,0xffff9
    80004814:	6420                	ld	s0,72(s0)
    80004816:	6d65                	lui	s10,0x19
    80004818:	65742f6f          	jal	t5,8004766e <__global_pointer$+0x422ee>
    8000481c:	2e737473          	csrrci	s0,0x2e7,6
    80004820:	0a0d                	addi	s4,s4,3
    80004822:	0000                	unimp
    80004824:	0000                	unimp
    80004826:	0000                	unimp
    80004828:	5245                	li	tp,-15
    8000482a:	4f52                	lw	t5,20(sp)
    8000482c:	3a52                	fld	fs4,304(sp)
    8000482e:	4520                	lw	s0,72(a0)
    80004830:	6576                	ld	a0,344(sp)
    80004832:	746e                	ld	s0,248(sp)
    80004834:	6720                	ld	s0,72(a4)
    80004836:	6f72                	ld	t5,280(sp)
    80004838:	7075                	c.lui	zero,0xffffd
    8000483a:	6420                	ld	s0,72(s0)
    8000483c:	6d65                	lui	s10,0x19
    8000483e:	65742f6f          	jal	t5,80047694 <__global_pointer$+0x42314>
    80004842:	2e737473          	csrrci	s0,0x2e7,6
    80004846:	0a0d                	addi	s4,s4,3
	...
    80004850:	5245                	li	tp,-15
    80004852:	4f52                	lw	t5,20(sp)
    80004854:	3a52                	fld	fs4,304(sp)
    80004856:	5420                	lw	s0,104(s0)
    80004858:	7361                	lui	t1,0xffff8
    8000485a:	6f6e206b          	0x6f6e206b
    8000485e:	6974                	ld	a3,208(a0)
    80004860:	6966                	ld	s2,88(sp)
    80004862:	69746163          	bltu	s0,s7,80004ee4 <ucHeap+0x174>
    80004866:	64206e6f          	jal	t3,8000aea8 <__global_pointer$+0x5b28>
    8000486a:	6d65                	lui	s10,0x19
    8000486c:	65742f6f          	jal	t5,800476c2 <__global_pointer$+0x42342>
    80004870:	2e737473          	csrrci	s0,0x2e7,6
    80004874:	0a0d                	addi	s4,s4,3
    80004876:	0000                	unimp
    80004878:	5245                	li	tp,-15
    8000487a:	4f52                	lw	t5,20(sp)
    8000487c:	3a52                	fld	fs4,304(sp)
    8000487e:	4120                	lw	s0,64(a0)
    80004880:	6f62                	ld	t5,24(sp)
    80004882:	7472                	ld	s0,312(sp)
    80004884:	6420                	ld	s0,72(s0)
    80004886:	6c65                	lui	s8,0x19
    80004888:	7961                	lui	s2,0xffff8
    8000488a:	0d2e                	slli	s10,s10,0xb
    8000488c:	000a                	c.slli	zero,0x2
    8000488e:	0000                	unimp
    80004890:	5245                	li	tp,-15
    80004892:	4f52                	lw	t5,20(sp)
    80004894:	3a52                	fld	fs4,304(sp)
    80004896:	4320                	lw	s0,64(a4)
    80004898:	746e756f          	jal	a0,800ebfde <__global_pointer$+0xe6c5e>
    8000489c:	6e69                	lui	t3,0x1a
    8000489e:	65732067          	0x65732067
    800048a2:	616d                	addi	sp,sp,240
    800048a4:	6870                	ld	a2,208(s0)
    800048a6:	7365726f          	jal	tp,8005bfdc <__global_pointer$+0x56c5c>
    800048aa:	0d2e                	slli	s10,s10,0xb
    800048ac:	000a                	c.slli	zero,0x2
    800048ae:	0000                	unimp
    800048b0:	5245                	li	tp,-15
    800048b2:	4f52                	lw	t5,20(sp)
    800048b4:	3a52                	fld	fs4,304(sp)
    800048b6:	5320                	lw	s0,96(a4)
    800048b8:	6975                	lui	s2,0x1d
    800048ba:	65646963          	bltu	s0,s6,80004f0c <ucHeap+0x19c>
    800048be:	7420                	ld	s0,104(s0)
    800048c0:	7361                	lui	t1,0xffff8
    800048c2:	0d2e736b          	0xd2e736b
    800048c6:	000a                	c.slli	zero,0x2
    800048c8:	5245                	li	tp,-15
    800048ca:	4f52                	lw	t5,20(sp)
    800048cc:	3a52                	fld	fs4,304(sp)
    800048ce:	4d20                	lw	s0,88(a0)
    800048d0:	7365                	lui	t1,0xffff9
    800048d2:	65676173          	csrrsi	sp,0x656,14
    800048d6:	6220                	ld	s0,64(a2)
    800048d8:	6675                	lui	a2,0x1d
    800048da:	6566                	ld	a0,88(sp)
    800048dc:	2e72                	fld	ft8,280(sp)
    800048de:	0a0d                	addi	s4,s4,3
	...
    800048e8:	5245                	li	tp,-15
    800048ea:	4f52                	lw	t5,20(sp)
    800048ec:	3a52                	fld	fs4,304(sp)
    800048ee:	5320                	lw	s0,96(a4)
    800048f0:	7274                	ld	a3,224(a2)
    800048f2:	6165                	addi	sp,sp,112
    800048f4:	206d                	0x206d
    800048f6:	7562                	ld	a0,56(sp)
    800048f8:	6666                	ld	a2,88(sp)
    800048fa:	7265                	lui	tp,0xffff9
    800048fc:	0d2e                	slli	s10,s10,0xb
    800048fe:	000a                	c.slli	zero,0x2
    80004900:	5245                	li	tp,-15
    80004902:	4f52                	lw	t5,20(sp)
    80004904:	3a52                	fld	fs4,304(sp)
    80004906:	5320                	lw	s0,96(a4)
    80004908:	7274                	ld	a3,224(a2)
    8000490a:	6165                	addi	sp,sp,112
    8000490c:	206d                	0x206d
    8000490e:	7562                	ld	a0,56(sp)
    80004910:	6666                	ld	a2,88(sp)
    80004912:	7265                	lui	tp,0xffff9
    80004914:	6920                	ld	s0,80(a0)
    80004916:	746e                	ld	s0,248(sp)
    80004918:	7265                	lui	tp,0xffff9
    8000491a:	7572                	ld	a0,312(sp)
    8000491c:	7470                	ld	a2,232(s0)
    8000491e:	0d2e                	slli	s10,s10,0xb
    80004920:	000a                	c.slli	zero,0x2
    80004922:	0000                	unimp
    80004924:	0000                	unimp
    80004926:	0000                	unimp
    80004928:	5245                	li	tp,-15
    8000492a:	4f52                	lw	t5,20(sp)
    8000492c:	3a52                	fld	fs4,304(sp)
    8000492e:	5220                	lw	s0,96(a2)
    80004930:	6765                	lui	a4,0x19
    80004932:	7369                	lui	t1,0xffffa
    80004934:	6574                	ld	a3,200(a0)
    80004936:	2072                	fld	ft0,280(sp)
    80004938:	6574                	ld	a3,200(a0)
    8000493a:	31207473          	csrrci	s0,0x312,0
    8000493e:	0d2e                	slli	s10,s10,0xb
    80004940:	000a                	c.slli	zero,0x2
    80004942:	0000                	unimp
    80004944:	0000                	unimp
    80004946:	0000                	unimp
    80004948:	5245                	li	tp,-15
    8000494a:	4f52                	lw	t5,20(sp)
    8000494c:	3a52                	fld	fs4,304(sp)
    8000494e:	5220                	lw	s0,96(a2)
    80004950:	6765                	lui	a4,0x19
    80004952:	7369                	lui	t1,0xffffa
    80004954:	6574                	ld	a3,200(a0)
    80004956:	2072                	fld	ft0,280(sp)
    80004958:	6574                	ld	a3,200(a0)
    8000495a:	32207473          	csrrci	s0,mhcounteren,0
    8000495e:	0d2e                	slli	s10,s10,0xb
    80004960:	000a                	c.slli	zero,0x2
    80004962:	0000                	unimp
    80004964:	0000                	unimp
    80004966:	0000                	unimp
    80004968:	5245                	li	tp,-15
    8000496a:	4f52                	lw	t5,20(sp)
    8000496c:	3a52                	fld	fs4,304(sp)
    8000496e:	5020                	lw	s0,96(s0)
    80004970:	7265                	lui	tp,0xffff9
    80004972:	7069                	c.lui	zero,0xffffa
    80004974:	6568                	ld	a0,200(a0)
    80004976:	6172                	ld	sp,280(sp)
    80004978:	206c                	fld	fa1,192(s0)
    8000497a:	6974                	ld	a3,208(a0)
    8000497c:	656d                	lui	a0,0x1b
    8000497e:	2072                	fld	ft0,280(sp)
    80004980:	2e30                	fld	fa2,88(a2)
    80004982:	0a0d                	addi	s4,s4,3
    80004984:	0000                	unimp
    80004986:	0000                	unimp
    80004988:	5245                	li	tp,-15
    8000498a:	4f52                	lw	t5,20(sp)
    8000498c:	3a52                	fld	fs4,304(sp)
    8000498e:	5020                	lw	s0,96(s0)
    80004990:	7265                	lui	tp,0xffff9
    80004992:	7069                	c.lui	zero,0xffffa
    80004994:	6568                	ld	a0,200(a0)
    80004996:	6172                	ld	sp,280(sp)
    80004998:	206c                	fld	fa1,192(s0)
    8000499a:	6974                	ld	a3,208(a0)
    8000499c:	656d                	lui	a0,0x1b
    8000499e:	2072                	fld	ft0,280(sp)
    800049a0:	2e31                	addiw	t3,t3,12
    800049a2:	0a0d                	addi	s4,s4,3
    800049a4:	0000                	unimp
    800049a6:	0000                	unimp
    800049a8:	6154                	ld	a3,128(a0)
    800049aa:	31206b73          	csrrsi	s6,0x312,0
    800049ae:	2120                	fld	fs0,64(a0)
    800049b0:	0d0a                	slli	s10,s10,0x2
    800049b2:	0000                	unimp
    800049b4:	0000                	unimp
    800049b6:	0000                	unimp
    800049b8:	6154                	ld	a3,128(a0)
    800049ba:	32206b73          	csrrsi	s6,mhcounteren,0
    800049be:	2120                	fld	fs0,64(a0)
    800049c0:	0d0a                	slli	s10,s10,0x2
    800049c2:	0000                	unimp
    800049c4:	0000                	unimp
    800049c6:	0000                	unimp
    800049c8:	6568                	ld	a0,200(a0)
    800049ca:	6c6c                	ld	a1,216(s0)
    800049cc:	0000006f          	j	800049cc <memset+0x3bc>
    800049d0:	4449                	li	s0,18
    800049d2:	454c                	lw	a1,12(a0)
    800049d4:	0000                	unimp
    800049d6:	0000                	unimp
    800049d8:	6d54                	ld	a3,152(a0)
    800049da:	2072                	fld	ft0,280(sp)
    800049dc:	00637653          	fadd.s	fa2,ft6,ft6
    800049e0:	6d54                	ld	a3,152(a0)
    800049e2:	5172                	lw	sp,60(sp)
    800049e4:	0000                	unimp
    800049e6:	0000                	unimp
    800049e8:	f620                	sd	s0,104(a2)
    800049ea:	ffff                	0xffff
    800049ec:	f620                	sd	s0,104(a2)
    800049ee:	ffff                	0xffff
    800049f0:	f620                	sd	s0,104(a2)
    800049f2:	ffff                	0xffff
    800049f4:	f6d0                	sd	a2,168(a3)
    800049f6:	ffff                	0xffff
    800049f8:	f6ec                	sd	a1,232(a3)
    800049fa:	ffff                	0xffff
    800049fc:	f750                	sd	a2,168(a4)
    800049fe:	ffff                	0xffff
    80004a00:	f620                	sd	s0,104(a2)
    80004a02:	ffff                	0xffff
    80004a04:	f620                	sd	s0,104(a2)
    80004a06:	ffff                	0xffff
    80004a08:	f6d0                	sd	a2,168(a3)
    80004a0a:	ffff                	0xffff
    80004a0c:	f6ec                	sd	a1,232(a3)
    80004a0e:	ffff                	0xffff
    80004a10:	3220205b          	0x3220205b
    80004a14:	205d                	0x205d
    80004a16:	7270                	ld	a2,224(a2)
    80004a18:	5376                	lw	t1,124(sp)
    80004a1a:	7465                	lui	s0,0xffff9
    80004a1c:	7075                	c.lui	zero,0xffffd
    80004a1e:	6148                	ld	a0,128(a0)
    80004a20:	6472                	ld	s0,280(sp)
    80004a22:	65726177          	0x65726177
    80004a26:	4f20                	lw	s0,88(a4)
    80004a28:	6576                	ld	a0,344(sp)
    80004a2a:	2072                	fld	ft0,280(sp)
    80004a2c:	0d0a                	slli	s10,s10,0x2
    80004a2e:	0000                	unimp
    80004a30:	3320205b          	0x3320205b
    80004a34:	205d                	0x205d
    80004a36:	616d                	addi	sp,sp,240
    80004a38:	6e69                	lui	t3,0x1a
    80004a3a:	665f 6c75 206c      	0x206c6c75665f
    80004a40:	0d0a                	slli	s10,s10,0x2
    80004a42:	0000                	unimp
    80004a44:	0000                	unimp
    80004a46:	0000                	unimp
    80004a48:	3920205b          	0x3920205b
    80004a4c:	205d                	0x205d
    80004a4e:	616d                	addi	sp,sp,240
    80004a50:	6e69                	lui	t3,0x1a
    80004a52:	665f 6c75 206c      	0x206c6c75665f
    80004a58:	7265766f          	jal	a2,8005c17e <__global_pointer$+0x56dfe>
    80004a5c:	0d0a                	slli	s10,s10,0x2
    80004a5e:	0000                	unimp
    80004a60:	5b0d                	li	s6,-29
    80004a62:	2020                	fld	fs0,64(s0)
    80004a64:	5d31                	li	s10,-20
    80004a66:	5520                	lw	s0,104(a0)
    80004a68:	5241                	li	tp,-16
    80004a6a:	2054                	fld	fa3,128(s0)
    80004a6c:	21204b4f          	fnmadd.s	fs6,ft0,fs2,ft4,rmm
    80004a70:	0d0a                	slli	s10,s10,0x2
    80004a72:	0000                	unimp
    80004a74:	0000                	unimp
	...

0000000080004a78 <__clz_tab>:
    80004a78:	0100 0202 0303 0303 0404 0404 0404 0404     ................
    80004a88:	0505 0505 0505 0505 0505 0505 0505 0505     ................
    80004a98:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    80004aa8:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    80004ab8:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    80004ac8:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    80004ad8:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    80004ae8:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    80004af8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b08:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b18:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b28:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b38:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b48:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b58:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    80004b68:	0808 0808 0808 0808 0808 0808 0808 0808     ................
	...
